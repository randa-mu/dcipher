/**

Generated by the following Solidity interface...
```solidity
interface ConfigureRouterScript {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ConfigureRouterScript {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b506108b58061002d5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b60405163350d56bf60e01b815260206004820152601260248201527f524f555445525f5352435f41444452455353000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156100e6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010a91906107ca565b905061014b816040518060400160405280601281526020017f524f555445525f5352435f414444524553530000000000000000000000000000815250610644565b60405163350d56bf60e01b815260206004820152601160248201527f45524332305f5352435f4144445245535300000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156101c8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101ec91906107ca565b905061022d816040518060400160405280601181526020017f45524332305f5352435f41444452455353000000000000000000000000000000815250610644565b60405163350d56bf60e01b815260206004820152601160248201527f45524332305f4453545f4144445245535300000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156102aa573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102ce91906107ca565b905061030f816040518060400160405280601181526020017f45524332305f4453545f41444452455353000000000000000000000000000000815250610644565b6040517fc1978d1f00000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4453545f434841494e5f4944000000000000000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156103a5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c99190610804565b90506103d4816106c4565b60408051808201909152601f81527f436f6e6669677572696e6720726f75746572206f6e20636861696e2069643a0060208201528490849084906104189046610730565b737109709ecfa91a80626ff3989d68f67f5b1dd12d73ffffffffffffffffffffffffffffffffffffffff1663afc980406040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610471575f5ffd5b505af1158015610483573d5f5f3e3d5ffd5b50506040517f44d1da8c0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff861692506344d1da8c91506024015f604051808303815f87803b1580156104ec575f5ffd5b505af11580156104fe573d5f5f3e3d5ffd5b50505050737109709ecfa91a80626ff3989d68f67f5b1dd12d73ffffffffffffffffffffffffffffffffffffffff1663afc980406040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561055b575f5ffd5b505af115801561056d573d5f5f3e3d5ffd5b50506040517f9695ec210000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff8481166024830152858116604483015286169250639695ec2191506064015f604051808303815f87803b1580156105e6575f5ffd5b505af11580156105f8573d5f5f3e3d5ffd5b5050505061063b6040518060400160405280601e81526020017f526f7574657220636f6e66696775726564206f6e20636861696e2069643a000081525046610730565b50505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831615159061066f90839060200161081b565b604051602081830303815290604052906106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b69190610882565b60405180910390fd5b505050565b805f0361072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f436861696e20494420697320696e76616c69640000000000000000000000000060448201526064016106b6565b50565b6107a38282604051602401610746929190610894565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc000000000000000000000000000000000000000000000000000000001790526107a7565b5050565b61072d815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f602082840312156107da575f5ffd5b815173ffffffffffffffffffffffffffffffffffffffff811681146107fd575f5ffd5b9392505050565b5f60208284031215610814575f5ffd5b5051919050565b5f82518060208501845e7f206973207a65726f000000000000000000000000000000000000000000000000920191825250600801919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6107fd6020830184610854565b604081525f6108a66040830185610854565b9050826020830152939250505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\x08\xB5\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FROUTER_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xE6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\n\x91\x90a\x07\xCAV[\x90Pa\x01K\x81`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FROUTER_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06DV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FERC20_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xEC\x91\x90a\x07\xCAV[\x90Pa\x02-\x81`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01\x7FERC20_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06DV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FERC20_DST_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xAAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xCE\x91\x90a\x07\xCAV[\x90Pa\x03\x0F\x81`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01\x7FERC20_DST_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06DV[`@Q\x7F\xC1\x97\x8D\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FDST_CHAIN_ID\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC9\x91\x90a\x08\x04V[\x90Pa\x03\xD4\x81a\x06\xC4V[`@\x80Q\x80\x82\x01\x90\x91R`\x1F\x81R\x7FConfiguring router on chain id:\0` \x82\x01R\x84\x90\x84\x90\x84\x90a\x04\x18\x90Fa\x070V[sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xAF\xC9\x80@`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04qW__\xFD[PZ\xF1\x15\x80\x15a\x04\x83W=__>=_\xFD[PP`@Q\x7FD\xD1\xDA\x8C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x92PcD\xD1\xDA\x8C\x91P`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\xECW__\xFD[PZ\xF1\x15\x80\x15a\x04\xFEW=__>=_\xFD[PPPPsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xAF\xC9\x80@`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05[W__\xFD[PZ\xF1\x15\x80\x15a\x05mW=__>=_\xFD[PP`@Q\x7F\x96\x95\xEC!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x81\x16`$\x83\x01R\x85\x81\x16`D\x83\x01R\x86\x16\x92Pc\x96\x95\xEC!\x91P`d\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05\xE6W__\xFD[PZ\xF1\x15\x80\x15a\x05\xF8W=__>=_\xFD[PPPPa\x06;`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FRouter configured on chain id:\0\0\x81RPFa\x070V[PPPPPPPV[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15\x15\x90a\x06o\x90\x83\x90` \x01a\x08\x1BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90a\x06\xBFW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\xB6\x91\x90a\x08\x82V[`@Q\x80\x91\x03\x90\xFD[PPPV[\x80_\x03a\x07-W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FChain ID is invalid\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06\xB6V[PV[a\x07\xA3\x82\x82`@Q`$\x01a\x07F\x92\x91\x90a\x08\x94V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xB6\x0Er\xCC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra\x07\xA7V[PPV[a\x07-\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\x07\xDAW__\xFD[\x81Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x07\xFDW__\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x08\x14W__\xFD[PQ\x91\x90PV[_\x82Q\x80` \x85\x01\x84^\x7F is zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x01\x91\x82RP`\x08\x01\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x07\xFD` \x83\x01\x84a\x08TV[`@\x81R_a\x08\xA6`@\x83\x01\x85a\x08TV[\x90P\x82` \x83\x01R\x93\x92PPPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b60405163350d56bf60e01b815260206004820152601260248201527f524f555445525f5352435f41444452455353000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156100e6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010a91906107ca565b905061014b816040518060400160405280601281526020017f524f555445525f5352435f414444524553530000000000000000000000000000815250610644565b60405163350d56bf60e01b815260206004820152601160248201527f45524332305f5352435f4144445245535300000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156101c8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101ec91906107ca565b905061022d816040518060400160405280601181526020017f45524332305f5352435f41444452455353000000000000000000000000000000815250610644565b60405163350d56bf60e01b815260206004820152601160248201527f45524332305f4453545f4144445245535300000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156102aa573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102ce91906107ca565b905061030f816040518060400160405280601181526020017f45524332305f4453545f41444452455353000000000000000000000000000000815250610644565b6040517fc1978d1f00000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4453545f434841494e5f4944000000000000000000000000000000000000000060448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156103a5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c99190610804565b90506103d4816106c4565b60408051808201909152601f81527f436f6e6669677572696e6720726f75746572206f6e20636861696e2069643a0060208201528490849084906104189046610730565b737109709ecfa91a80626ff3989d68f67f5b1dd12d73ffffffffffffffffffffffffffffffffffffffff1663afc980406040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610471575f5ffd5b505af1158015610483573d5f5f3e3d5ffd5b50506040517f44d1da8c0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff861692506344d1da8c91506024015f604051808303815f87803b1580156104ec575f5ffd5b505af11580156104fe573d5f5f3e3d5ffd5b50505050737109709ecfa91a80626ff3989d68f67f5b1dd12d73ffffffffffffffffffffffffffffffffffffffff1663afc980406040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561055b575f5ffd5b505af115801561056d573d5f5f3e3d5ffd5b50506040517f9695ec210000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff8481166024830152858116604483015286169250639695ec2191506064015f604051808303815f87803b1580156105e6575f5ffd5b505af11580156105f8573d5f5f3e3d5ffd5b5050505061063b6040518060400160405280601e81526020017f526f7574657220636f6e66696775726564206f6e20636861696e2069643a000081525046610730565b50505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831615159061066f90839060200161081b565b604051602081830303815290604052906106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b69190610882565b60405180910390fd5b505050565b805f0361072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f436861696e20494420697320696e76616c69640000000000000000000000000060448201526064016106b6565b50565b6107a38282604051602401610746929190610894565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc000000000000000000000000000000000000000000000000000000001790526107a7565b5050565b61072d815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f602082840312156107da575f5ffd5b815173ffffffffffffffffffffffffffffffffffffffff811681146107fd575f5ffd5b9392505050565b5f60208284031215610814575f5ffd5b5051919050565b5f82518060208501845e7f206973207a65726f000000000000000000000000000000000000000000000000920191825250600801919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6107fd6020830184610854565b604081525f6108a66040830185610854565b9050826020830152939250505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FROUTER_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xE6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\n\x91\x90a\x07\xCAV[\x90Pa\x01K\x81`@Q\x80`@\x01`@R\x80`\x12\x81R` \x01\x7FROUTER_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06DV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FERC20_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xEC\x91\x90a\x07\xCAV[\x90Pa\x02-\x81`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01\x7FERC20_SRC_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06DV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FERC20_DST_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xAAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xCE\x91\x90a\x07\xCAV[\x90Pa\x03\x0F\x81`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01\x7FERC20_DST_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06DV[`@Q\x7F\xC1\x97\x8D\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FDST_CHAIN_ID\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC9\x91\x90a\x08\x04V[\x90Pa\x03\xD4\x81a\x06\xC4V[`@\x80Q\x80\x82\x01\x90\x91R`\x1F\x81R\x7FConfiguring router on chain id:\0` \x82\x01R\x84\x90\x84\x90\x84\x90a\x04\x18\x90Fa\x070V[sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xAF\xC9\x80@`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04qW__\xFD[PZ\xF1\x15\x80\x15a\x04\x83W=__>=_\xFD[PP`@Q\x7FD\xD1\xDA\x8C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x92PcD\xD1\xDA\x8C\x91P`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\xECW__\xFD[PZ\xF1\x15\x80\x15a\x04\xFEW=__>=_\xFD[PPPPsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xAF\xC9\x80@`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05[W__\xFD[PZ\xF1\x15\x80\x15a\x05mW=__>=_\xFD[PP`@Q\x7F\x96\x95\xEC!\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x87\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x81\x16`$\x83\x01R\x85\x81\x16`D\x83\x01R\x86\x16\x92Pc\x96\x95\xEC!\x91P`d\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05\xE6W__\xFD[PZ\xF1\x15\x80\x15a\x05\xF8W=__>=_\xFD[PPPPa\x06;`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FRouter configured on chain id:\0\0\x81RPFa\x070V[PPPPPPPV[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15\x15\x90a\x06o\x90\x83\x90` \x01a\x08\x1BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90a\x06\xBFW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\xB6\x91\x90a\x08\x82V[`@Q\x80\x91\x03\x90\xFD[PPPV[\x80_\x03a\x07-W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FChain ID is invalid\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06\xB6V[PV[a\x07\xA3\x82\x82`@Q`$\x01a\x07F\x92\x91\x90a\x08\x94V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xB6\x0Er\xCC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra\x07\xA7V[PPV[a\x07-\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\x07\xDAW__\xFD[\x81Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x07\xFDW__\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x08\x14W__\xFD[PQ\x91\x90PV[_\x82Q\x80` \x85\x01\x84^\x7F is zero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x01\x91\x82RP`\x08\x01\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x07\xFD` \x83\x01\x84a\x08TV[`@\x81R_a\x08\xA6`@\x83\x01\x85a\x08TV[\x90P\x82` \x83\x01R\x93\x92PPPV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ConfigureRouterScript`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum ConfigureRouterScriptCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl ConfigureRouterScriptCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConfigureRouterScriptCalls {
        const NAME: &'static str = "ConfigureRouterScriptCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<ConfigureRouterScriptCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ConfigureRouterScriptCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(ConfigureRouterScriptCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ConfigureRouterScriptCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(ConfigureRouterScriptCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<ConfigureRouterScriptCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ConfigureRouterScriptCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ConfigureRouterScriptCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ConfigureRouterScriptCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ConfigureRouterScriptCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ConfigureRouterScript`](self) contract instance.

See the [wrapper's documentation](`ConfigureRouterScriptInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ConfigureRouterScriptInstance<P, N> {
        ConfigureRouterScriptInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ConfigureRouterScriptInstance<P, N>>,
    > {
        ConfigureRouterScriptInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        ConfigureRouterScriptInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`ConfigureRouterScript`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ConfigureRouterScript`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ConfigureRouterScriptInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for ConfigureRouterScriptInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ConfigureRouterScriptInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > ConfigureRouterScriptInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`ConfigureRouterScript`](self) contract instance.

See the [wrapper's documentation](`ConfigureRouterScriptInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ConfigureRouterScriptInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> ConfigureRouterScriptInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ConfigureRouterScriptInstance<P, N> {
            ConfigureRouterScriptInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > ConfigureRouterScriptInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > ConfigureRouterScriptInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
