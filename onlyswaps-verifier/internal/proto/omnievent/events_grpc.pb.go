// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: omnievent/events.proto

package omnievent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OmniEventService_RegisterEvent_FullMethodName        = "/events.OmniEventService/RegisterEvent"
	OmniEventService_UnregisterEvent_FullMethodName      = "/events.OmniEventService/UnregisterEvent"
	OmniEventService_ListRegisteredEvents_FullMethodName = "/events.OmniEventService/ListRegisteredEvents"
	OmniEventService_StreamEvents_FullMethodName         = "/events.OmniEventService/StreamEvents"
	OmniEventService_GetHistoricalEvents_FullMethodName  = "/events.OmniEventService/GetHistoricalEvents"
	OmniEventService_GetLatestOccurrence_FullMethodName  = "/events.OmniEventService/GetLatestOccurrence"
)

// OmniEventServiceClient is the client API for OmniEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmniEventServiceClient interface {
	// Register a new event
	RegisterEvent(ctx context.Context, in *RegisterNewEventRequest, opts ...grpc.CallOption) (*RegisterNewEventResponse, error)
	// Unregister an event
	UnregisterEvent(ctx context.Context, in *UnregisterEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List registered events
	ListRegisteredEvents(ctx context.Context, in *ListRegisteredEventsRequest, opts ...grpc.CallOption) (*ListRegisteredEventsResponse, error)
	// Stream events as they occur
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (OmniEventService_StreamEventsClient, error)
	// Get historical events (batch request)
	GetHistoricalEvents(ctx context.Context, in *GetHistoricalEventsRequest, opts ...grpc.CallOption) (*GetHistoricalEventsResponse, error)
	// Get the most recent occurrence of any of the specified events
	GetLatestOccurrence(ctx context.Context, in *GetLatestOccurrenceRequest, opts ...grpc.CallOption) (*EventOccurrence, error)
}

type omniEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOmniEventServiceClient(cc grpc.ClientConnInterface) OmniEventServiceClient {
	return &omniEventServiceClient{cc}
}

func (c *omniEventServiceClient) RegisterEvent(ctx context.Context, in *RegisterNewEventRequest, opts ...grpc.CallOption) (*RegisterNewEventResponse, error) {
	out := new(RegisterNewEventResponse)
	err := c.cc.Invoke(ctx, OmniEventService_RegisterEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniEventServiceClient) UnregisterEvent(ctx context.Context, in *UnregisterEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OmniEventService_UnregisterEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniEventServiceClient) ListRegisteredEvents(ctx context.Context, in *ListRegisteredEventsRequest, opts ...grpc.CallOption) (*ListRegisteredEventsResponse, error) {
	out := new(ListRegisteredEventsResponse)
	err := c.cc.Invoke(ctx, OmniEventService_ListRegisteredEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniEventServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (OmniEventService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OmniEventService_ServiceDesc.Streams[0], OmniEventService_StreamEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &omniEventServiceStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OmniEventService_StreamEventsClient interface {
	Recv() (*EventOccurrence, error)
	grpc.ClientStream
}

type omniEventServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *omniEventServiceStreamEventsClient) Recv() (*EventOccurrence, error) {
	m := new(EventOccurrence)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *omniEventServiceClient) GetHistoricalEvents(ctx context.Context, in *GetHistoricalEventsRequest, opts ...grpc.CallOption) (*GetHistoricalEventsResponse, error) {
	out := new(GetHistoricalEventsResponse)
	err := c.cc.Invoke(ctx, OmniEventService_GetHistoricalEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniEventServiceClient) GetLatestOccurrence(ctx context.Context, in *GetLatestOccurrenceRequest, opts ...grpc.CallOption) (*EventOccurrence, error) {
	out := new(EventOccurrence)
	err := c.cc.Invoke(ctx, OmniEventService_GetLatestOccurrence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmniEventServiceServer is the server API for OmniEventService service.
// All implementations must embed UnimplementedOmniEventServiceServer
// for forward compatibility
type OmniEventServiceServer interface {
	// Register a new event
	RegisterEvent(context.Context, *RegisterNewEventRequest) (*RegisterNewEventResponse, error)
	// Unregister an event
	UnregisterEvent(context.Context, *UnregisterEventRequest) (*emptypb.Empty, error)
	// List registered events
	ListRegisteredEvents(context.Context, *ListRegisteredEventsRequest) (*ListRegisteredEventsResponse, error)
	// Stream events as they occur
	StreamEvents(*StreamEventsRequest, OmniEventService_StreamEventsServer) error
	// Get historical events (batch request)
	GetHistoricalEvents(context.Context, *GetHistoricalEventsRequest) (*GetHistoricalEventsResponse, error)
	// Get the most recent occurrence of any of the specified events
	GetLatestOccurrence(context.Context, *GetLatestOccurrenceRequest) (*EventOccurrence, error)
	mustEmbedUnimplementedOmniEventServiceServer()
}

// UnimplementedOmniEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOmniEventServiceServer struct {
}

func (UnimplementedOmniEventServiceServer) RegisterEvent(context.Context, *RegisterNewEventRequest) (*RegisterNewEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEvent not implemented")
}
func (UnimplementedOmniEventServiceServer) UnregisterEvent(context.Context, *UnregisterEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterEvent not implemented")
}
func (UnimplementedOmniEventServiceServer) ListRegisteredEvents(context.Context, *ListRegisteredEventsRequest) (*ListRegisteredEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredEvents not implemented")
}
func (UnimplementedOmniEventServiceServer) StreamEvents(*StreamEventsRequest, OmniEventService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedOmniEventServiceServer) GetHistoricalEvents(context.Context, *GetHistoricalEventsRequest) (*GetHistoricalEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalEvents not implemented")
}
func (UnimplementedOmniEventServiceServer) GetLatestOccurrence(context.Context, *GetLatestOccurrenceRequest) (*EventOccurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestOccurrence not implemented")
}
func (UnimplementedOmniEventServiceServer) mustEmbedUnimplementedOmniEventServiceServer() {}

// UnsafeOmniEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmniEventServiceServer will
// result in compilation errors.
type UnsafeOmniEventServiceServer interface {
	mustEmbedUnimplementedOmniEventServiceServer()
}

func RegisterOmniEventServiceServer(s grpc.ServiceRegistrar, srv OmniEventServiceServer) {
	s.RegisterService(&OmniEventService_ServiceDesc, srv)
}

func _OmniEventService_RegisterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNewEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniEventServiceServer).RegisterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniEventService_RegisterEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniEventServiceServer).RegisterEvent(ctx, req.(*RegisterNewEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniEventService_UnregisterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniEventServiceServer).UnregisterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniEventService_UnregisterEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniEventServiceServer).UnregisterEvent(ctx, req.(*UnregisterEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniEventService_ListRegisteredEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisteredEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniEventServiceServer).ListRegisteredEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniEventService_ListRegisteredEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniEventServiceServer).ListRegisteredEvents(ctx, req.(*ListRegisteredEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniEventService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OmniEventServiceServer).StreamEvents(m, &omniEventServiceStreamEventsServer{stream})
}

type OmniEventService_StreamEventsServer interface {
	Send(*EventOccurrence) error
	grpc.ServerStream
}

type omniEventServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *omniEventServiceStreamEventsServer) Send(m *EventOccurrence) error {
	return x.ServerStream.SendMsg(m)
}

func _OmniEventService_GetHistoricalEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniEventServiceServer).GetHistoricalEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniEventService_GetHistoricalEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniEventServiceServer).GetHistoricalEvents(ctx, req.(*GetHistoricalEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniEventService_GetLatestOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniEventServiceServer).GetLatestOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmniEventService_GetLatestOccurrence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniEventServiceServer).GetLatestOccurrence(ctx, req.(*GetLatestOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OmniEventService_ServiceDesc is the grpc.ServiceDesc for OmniEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmniEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.OmniEventService",
	HandlerType: (*OmniEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEvent",
			Handler:    _OmniEventService_RegisterEvent_Handler,
		},
		{
			MethodName: "UnregisterEvent",
			Handler:    _OmniEventService_UnregisterEvent_Handler,
		},
		{
			MethodName: "ListRegisteredEvents",
			Handler:    _OmniEventService_ListRegisteredEvents_Handler,
		},
		{
			MethodName: "GetHistoricalEvents",
			Handler:    _OmniEventService_GetHistoricalEvents_Handler,
		},
		{
			MethodName: "GetLatestOccurrence",
			Handler:    _OmniEventService_GetLatestOccurrence_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _OmniEventService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "omnievent/events.proto",
}
