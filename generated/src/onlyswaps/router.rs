///Module containing a contract's types and functions.
/**

```solidity
library IRouter {
    struct SwapRequestParameters { address sender; address recipient; address tokenIn; address tokenOut; uint256 amountOut; uint256 srcChainId; uint256 dstChainId; uint256 verificationFee; uint256 solverFee; uint256 nonce; bool executed; uint256 requestedAt; }
}
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod IRouter {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct SwapRequestParameters { address sender; address recipient; address tokenIn; address tokenOut; uint256 amountOut; uint256 srcChainId; uint256 dstChainId; uint256 verificationFee; uint256 solverFee; uint256 nonce; bool executed; uint256 requestedAt; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SwapRequestParameters {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub verificationFee: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub solverFee: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub executed: bool,
        #[allow(missing_docs)]
        pub requestedAt: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            bool,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapRequestParameters> for UnderlyingRustTuple<'_> {
            fn from(value: SwapRequestParameters) -> Self {
                (
                    value.sender,
                    value.recipient,
                    value.tokenIn,
                    value.tokenOut,
                    value.amountOut,
                    value.srcChainId,
                    value.dstChainId,
                    value.verificationFee,
                    value.solverFee,
                    value.nonce,
                    value.executed,
                    value.requestedAt,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapRequestParameters {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    recipient: tuple.1,
                    tokenIn: tuple.2,
                    tokenOut: tuple.3,
                    amountOut: tuple.4,
                    srcChainId: tuple.5,
                    dstChainId: tuple.6,
                    verificationFee: tuple.7,
                    solverFee: tuple.8,
                    nonce: tuple.9,
                    executed: tuple.10,
                    requestedAt: tuple.11,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapRequestParameters {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapRequestParameters {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountOut),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.srcChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.verificationFee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.solverFee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.executed,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestedAt),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapRequestParameters {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapRequestParameters {
            const NAME: &'static str = "SwapRequestParameters";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapRequestParameters(address sender,address recipient,address tokenIn,address tokenOut,uint256 amountOut,uint256 srcChainId,uint256 dstChainId,uint256 verificationFee,uint256 solverFee,uint256 nonce,bool executed,uint256 requestedAt)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.sender,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.recipient,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenOut,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amountOut)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.srcChainId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.dstChainId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.verificationFee,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.solverFee)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.nonce)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.executed,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.requestedAt)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapRequestParameters {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.sender,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recipient,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amountOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.srcChainId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.dstChainId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.verificationFee,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.solverFee,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.nonce)
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.executed,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.requestedAt,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.sender,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recipient,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amountOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.srcChainId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.dstChainId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.verificationFee,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.solverFee,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nonce,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.executed,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.requestedAt,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`IRouter`](self) contract instance.

See the [wrapper's documentation](`IRouterInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(address: alloy_sol_types::private::Address, provider: P) -> IRouterInstance<P, N> {
        IRouterInstance::<P, N>::new(address, provider)
    }
    /**A [`IRouter`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`IRouter`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct IRouterInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for IRouterInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("IRouterInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > IRouterInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`IRouter`](self) contract instance.

See the [wrapper's documentation](`IRouterInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> IRouterInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> IRouterInstance<P, N> {
            IRouterInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > IRouterInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > IRouterInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
/**

Generated by the following Solidity interface...
```solidity
library IRouter {
    struct SwapRequestParameters {
        address sender;
        address recipient;
        address tokenIn;
        address tokenOut;
        uint256 amountOut;
        uint256 srcChainId;
        uint256 dstChainId;
        uint256 verificationFee;
        uint256 solverFee;
        uint256 nonce;
        bool executed;
        uint256 requestedAt;
    }
}

interface Router {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error AddressEmptyCode(address target);
    error AlreadyFulfilled();
    error BLSSignatureVerificationFailed();
    error DestinationChainIdNotSupported(uint256 dstChainId);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error FailedCall();
    error FeeBpsExceedsThreshold(uint256 maxFeeBps);
    error FeeTooLow();
    error GrantRoleFailed();
    error InsufficientVerificationFeeBalance();
    error InvalidFeeBps();
    error InvalidInitialization();
    error InvalidTokenOrRecipient();
    error NewFeeTooLow(uint256 newFee, uint256 currentFee);
    error NoUpgradePending();
    error NotInitializing();
    error ReentrancyGuardReentrantCall();
    error SafeERC20FailedOperation(address token);
    error SameVersionUpgradeNotAllowed();
    error SourceChainIdMismatch(uint256 swapRequestParamsSrcChainId, uint256 contractChainId);
    error SourceChainIdShouldBeDifferentFromDestination(uint256 srcChainId, uint256 dstChainId);
    error SwapRequestCancellationAlreadyStaged();
    error SwapRequestCancellationNotStaged();
    error SwapRequestCancellationWindowNotPassed();
    error SwapRequestCancellationWindowTooShort();
    error SwapRequestParametersMismatch();
    error TokenMappingAlreadyExists();
    error TokenNotSupported();
    error TooLateToCancelUpgrade(uint256 upgradeTime);
    error UUPSUnauthorizedCallContext();
    error UUPSUnsupportedProxiableUUID(bytes32 slot);
    error UnauthorisedCaller();
    error UpgradeDelayTooShort();
    error UpgradeFailed();
    error UpgradeMustGoThroughExecuteUpgrade();
    error UpgradeTimeMustRespectDelay(uint256 earliestTime);
    error UpgradeTooEarly(uint256 upgradeTime);
    error ZeroAddress();
    error ZeroAmount();

    event BLSValidatorUpdated(address indexed blsValidator);
    event ContractUpgradeBLSValidatorUpdated(address indexed contractUpgradeBlsValidator);
    event DestinationChainIdBlocked(uint256 chainId);
    event DestinationChainIdPermitted(uint256 chainId);
    event Initialized(uint64 version);
    event MinimumContractUpgradeDelayUpdated(uint256 newDelay);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event SolverPayoutFulfilled(bytes32 indexed requestId);
    event SwapRequestCancellationStaged(bytes32 indexed requestId, address indexed user, uint256 initiatedAt);
    event SwapRequestCancellationWindowUpdated(uint256 newSwapRequestCancellationWindow);
    event SwapRequestFulfilled(bytes32 indexed requestId, uint256 indexed srcChainId, uint256 indexed dstChainId);
    event SwapRequestRefundClaimed(bytes32 indexed requestId, address indexed user, address indexed recipient, uint256 amount);
    event SwapRequestSolverFeeUpdated(bytes32 indexed requestId);
    event SwapRequested(bytes32 indexed requestId, uint256 indexed srcChainId, uint256 indexed dstChainId);
    event TokenMappingAdded(uint256 dstChainId, address dstToken, address srcToken);
    event TokenMappingRemoved(uint256 dstChainId, address dstToken, address srcToken);
    event UpgradeCancelled(address indexed cancelledImplementation);
    event UpgradeExecuted(address indexed newImplementation);
    event UpgradeScheduled(address indexed newImplementation, uint256 executeAfter);
    event Upgraded(address indexed implementation);
    event VerificationFeeBpsUpdated(uint256 newFeeBps);
    event VerificationFeeWithdrawn(address indexed token, address indexed recipient, uint256 amountOut);

    constructor();

    function ADMIN_ROLE() external view returns (bytes32);
    function BPS_DIVISOR() external view returns (uint256);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MAX_FEE_BPS() external view returns (uint256);
    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
    function allowedDstChainIds(uint256) external view returns (bool);
    function blockDestinationChainId(uint256 chainId) external;
    function blsValidatorUpdateParamsToBytes(string memory action, address blsValidator, uint256 nonce) external view returns (bytes memory, bytes memory);
    function buildSwapRequestParameters(address tokenIn, address tokenOut, uint256 amountOut, uint256 verificationFeeAmount, uint256 solverFeeAmount, uint256 dstChainId, address recipient, uint256 nonce) external view returns (IRouter.SwapRequestParameters memory swapRequestParams);
    function cancelSwapRequestAndRefund(bytes32 requestId, address refundRecipient) external;
    function cancelUpgrade(bytes memory signature) external;
    function contractUpgradeBlsValidator() external view returns (address);
    function contractUpgradeParamsToBytes(string memory action, address pendingImplementation, address newImplementation, bytes memory upgradeCalldata, uint256 upgradeTime, uint256 nonce) external view returns (bytes memory, bytes memory);
    function currentNonce() external view returns (uint256);
    function executeUpgrade() external;
    function getAllowedDstChainId(uint256 chainId) external view returns (bool);
    function getCancelledSwapRequests() external view returns (bytes32[] memory);
    function getChainID() external view returns (uint256);
    function getChainId() external view returns (uint256 chainId);
    function getContractUpgradeBlsValidator() external view returns (address);
    function getFulfilledSolverRefunds() external view returns (bytes32[] memory);
    function getFulfilledTransfers() external view returns (bytes32[] memory);
    function getMinimumContractUpgradeDelay() external view returns (uint256);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function getRoleMember(bytes32 role, uint256 index) external view returns (address);
    function getRoleMemberCount(bytes32 role) external view returns (uint256);
    function getRoleMembers(bytes32 role) external view returns (address[] memory);
    function getSwapRequestBlsValidator() external view returns (address);
    function getSwapRequestId(IRouter.SwapRequestParameters memory p) external view returns (bytes32);
    function getSwapRequestParameters(bytes32 requestId) external view returns (IRouter.SwapRequestParameters memory swapRequestParams);
    function getSwapRequestReceipt(bytes32 _requestId) external view returns (bytes32 requestId, uint256 srcChainId, uint256 dstChainId, address tokenIn, address tokenOut, bool fulfilled, address solver, address recipient, uint256 amountOut, uint256 fulfilledAt);
    function getTokenMapping(address srcToken, uint256 dstChainId) external view returns (address[] memory);
    function getTotalVerificationFeeBalance(address token) external view returns (uint256);
    function getUnfulfilledSolverRefunds() external view returns (bytes32[] memory);
    function getVerificationFeeAmount(uint256 amountToSwap) external view returns (uint256, uint256);
    function getVerificationFeeBps() external view returns (uint256);
    function getVersion() external pure returns (string memory);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function initialize(address _owner, address _swapRequestBlsValidator, address _contractUpgradeBlsValidator, uint256 _verificationFeeBps) external;
    function isDstTokenMapped(address srcToken, uint256 dstChainId, address dstToken) external view returns (bool);
    function minimumContractUpgradeDelay() external view returns (uint256);
    function minimumContractUpgradeDelayParamsToBytes(string memory action, uint256 _minimumContractUpgradeDelay, uint256 nonce) external view returns (bytes memory, bytes memory);
    function nonceToRequester(uint256) external view returns (address);
    function permitDestinationChainId(uint256 chainId) external;
    function proxiableUUID() external view returns (bytes32);
    function rebalanceSolver(address solver, bytes32 requestId, bytes memory signature) external;
    function relayTokens(address solverRefundAddress, bytes32 requestId, address sender, address recipient, address tokenIn, address tokenOut, uint256 amountOut, uint256 srcChainId, uint256 nonce) external;
    function removeTokenMapping(uint256 dstChainId, address dstToken, address srcToken) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function requestCrossChainSwap(address tokenIn, address tokenOut, uint256 amount, uint256 solverFee, uint256 dstChainId, address recipient) external returns (bytes32 requestId);
    function revokeRole(bytes32 role, address account) external;
    function scheduleUpgrade(address newImplementation, bytes memory upgradeCalldata, uint256 upgradeTime, bytes memory signature) external;
    function scheduledImplementation() external view returns (address);
    function scheduledTimestampForUpgrade() external view returns (uint256);
    function setCancellationWindow(uint256 newSwapRequestCancellationWindow, bytes memory signature) external;
    function setContractUpgradeBlsValidator(address _contractUpgradeBlsValidator, bytes memory signature) external;
    function setMinimumContractUpgradeDelay(uint256 _minimumContractUpgradeDelay, bytes memory signature) external;
    function setSwapRequestBlsValidator(address _swapRequestBlsValidator, bytes memory signature) external;
    function setTokenMapping(uint256 dstChainId, address dstToken, address srcToken) external;
    function setVerificationFeeBps(uint256 _verificationFeeBps) external;
    function stageSwapRequestCancellation(bytes32 requestId) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function swapRequestBlsValidator() external view returns (address);
    function swapRequestCancellationInitiatedAt(bytes32) external view returns (uint256);
    function swapRequestCancellationWindow() external view returns (uint256);
    function swapRequestParameters(bytes32) external view returns (address sender, address recipient, address tokenIn, address tokenOut, uint256 amountOut, uint256 srcChainId, uint256 dstChainId, uint256 verificationFee, uint256 solverFee, uint256 nonce, bool executed, uint256 requestedAt);
    function swapRequestParametersToBytes(bytes32 requestId, address solver) external view returns (bytes memory message, bytes memory messageAsG1Bytes);
    function swapRequestReceipts(bytes32) external view returns (bytes32 requestId, uint256 srcChainId, uint256 dstChainId, address tokenIn, address tokenOut, bool fulfilled, address solver, address recipient, uint256 amountOut, uint256 fulfilledAt);
    function totalVerificationFeeBalance(address) external view returns (uint256);
    function updateSolverFeesIfUnfulfilled(bytes32 requestId, uint256 newFee) external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
    function verificationFeeBps() external view returns (uint256);
    function withdrawVerificationFee(address token, address to) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "BPS_DIVISOR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MAX_FEE_BPS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "UPGRADE_INTERFACE_VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowedDstChainIds",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "blockDestinationChainId",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "blsValidatorUpdateParamsToBytes",
    "inputs": [
      {
        "name": "action",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "blsValidator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "buildSwapRequestParameters",
    "inputs": [
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "verificationFeeAmount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "solverFeeAmount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "swapRequestParams",
        "type": "tuple",
        "internalType": "struct IRouter.SwapRequestParameters",
        "components": [
          {
            "name": "sender",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "recipient",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountOut",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "srcChainId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "dstChainId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "verificationFee",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "solverFee",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nonce",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "executed",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "requestedAt",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "cancelSwapRequestAndRefund",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "refundRecipient",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "cancelUpgrade",
    "inputs": [
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "contractUpgradeBlsValidator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ISignatureScheme"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contractUpgradeParamsToBytes",
    "inputs": [
      {
        "name": "action",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "pendingImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "upgradeCalldata",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "upgradeTime",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "currentNonce",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "executeUpgrade",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllowedDstChainId",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCancelledSwapRequests",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getChainID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getContractUpgradeBlsValidator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getFulfilledSolverRefunds",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getFulfilledTransfers",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getMinimumContractUpgradeDelay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleMember",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleMemberCount",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleMembers",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSwapRequestBlsValidator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSwapRequestId",
    "inputs": [
      {
        "name": "p",
        "type": "tuple",
        "internalType": "struct IRouter.SwapRequestParameters",
        "components": [
          {
            "name": "sender",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "recipient",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountOut",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "srcChainId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "dstChainId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "verificationFee",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "solverFee",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nonce",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "executed",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "requestedAt",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSwapRequestParameters",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "swapRequestParams",
        "type": "tuple",
        "internalType": "struct IRouter.SwapRequestParameters",
        "components": [
          {
            "name": "sender",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "recipient",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "tokenOut",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountOut",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "srcChainId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "dstChainId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "verificationFee",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "solverFee",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nonce",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "executed",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "requestedAt",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSwapRequestReceipt",
    "inputs": [
      {
        "name": "_requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "srcChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "fulfilled",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "solver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "fulfilledAt",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTokenMapping",
    "inputs": [
      {
        "name": "srcToken",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTotalVerificationFeeBalance",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getUnfulfilledSolverRefunds",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVerificationFeeAmount",
    "inputs": [
      {
        "name": "amountToSwap",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVerificationFeeBps",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_swapRequestBlsValidator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_contractUpgradeBlsValidator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_verificationFeeBps",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isDstTokenMapped",
    "inputs": [
      {
        "name": "srcToken",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstToken",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "minimumContractUpgradeDelay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "minimumContractUpgradeDelayParamsToBytes",
    "inputs": [
      {
        "name": "action",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "_minimumContractUpgradeDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nonceToRequester",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permitDestinationChainId",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "proxiableUUID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "rebalanceSolver",
    "inputs": [
      {
        "name": "solver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "relayTokens",
    "inputs": [
      {
        "name": "solverRefundAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "srcChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeTokenMapping",
    "inputs": [
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstToken",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "srcToken",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "requestCrossChainSwap",
    "inputs": [
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "solverFee",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "scheduleUpgrade",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "upgradeCalldata",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "upgradeTime",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "scheduledImplementation",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "scheduledTimestampForUpgrade",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setCancellationWindow",
    "inputs": [
      {
        "name": "newSwapRequestCancellationWindow",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setContractUpgradeBlsValidator",
    "inputs": [
      {
        "name": "_contractUpgradeBlsValidator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMinimumContractUpgradeDelay",
    "inputs": [
      {
        "name": "_minimumContractUpgradeDelay",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSwapRequestBlsValidator",
    "inputs": [
      {
        "name": "_swapRequestBlsValidator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setTokenMapping",
    "inputs": [
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstToken",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "srcToken",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setVerificationFeeBps",
    "inputs": [
      {
        "name": "_verificationFeeBps",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "stageSwapRequestCancellation",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "swapRequestBlsValidator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ISignatureScheme"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "swapRequestCancellationInitiatedAt",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "swapRequestCancellationWindow",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "swapRequestParameters",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "srcChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "verificationFee",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "solverFee",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "executed",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "requestedAt",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "swapRequestParametersToBytes",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "solver",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "message",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "messageAsG1Bytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "swapRequestReceipts",
    "inputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "srcChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "fulfilled",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "solver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amountOut",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "fulfilledAt",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalVerificationFeeBalance",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateSolverFeesIfUnfulfilled",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "newFee",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeToAndCall",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "verificationFeeBps",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdrawVerificationFee",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "BLSValidatorUpdated",
    "inputs": [
      {
        "name": "blsValidator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ContractUpgradeBLSValidatorUpdated",
    "inputs": [
      {
        "name": "contractUpgradeBlsValidator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DestinationChainIdBlocked",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DestinationChainIdPermitted",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "MinimumContractUpgradeDelayUpdated",
    "inputs": [
      {
        "name": "newDelay",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SolverPayoutFulfilled",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SwapRequestCancellationStaged",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "initiatedAt",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SwapRequestCancellationWindowUpdated",
    "inputs": [
      {
        "name": "newSwapRequestCancellationWindow",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SwapRequestFulfilled",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "srcChainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SwapRequestRefundClaimed",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "recipient",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SwapRequestSolverFeeUpdated",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SwapRequested",
    "inputs": [
      {
        "name": "requestId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "srcChainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TokenMappingAdded",
    "inputs": [
      {
        "name": "dstChainId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "dstToken",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "srcToken",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TokenMappingRemoved",
    "inputs": [
      {
        "name": "dstChainId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "dstToken",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "srcToken",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UpgradeCancelled",
    "inputs": [
      {
        "name": "cancelledImplementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UpgradeExecuted",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UpgradeScheduled",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "executeAfter",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Upgraded",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "VerificationFeeBpsUpdated",
    "inputs": [
      {
        "name": "newFeeBps",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "VerificationFeeWithdrawn",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "recipient",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amountOut",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AddressEmptyCode",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "AlreadyFulfilled",
    "inputs": []
  },
  {
    "type": "error",
    "name": "BLSSignatureVerificationFailed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "DestinationChainIdNotSupported",
    "inputs": [
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidImplementation",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967NonPayable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FeeBpsExceedsThreshold",
    "inputs": [
      {
        "name": "maxFeeBps",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "FeeTooLow",
    "inputs": []
  },
  {
    "type": "error",
    "name": "GrantRoleFailed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientVerificationFeeBalance",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidFeeBps",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidTokenOrRecipient",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NewFeeTooLow",
    "inputs": [
      {
        "name": "newFee",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentFee",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NoUpgradePending",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeERC20FailedOperation",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "SameVersionUpgradeNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SourceChainIdMismatch",
    "inputs": [
      {
        "name": "swapRequestParamsSrcChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "contractChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "SourceChainIdShouldBeDifferentFromDestination",
    "inputs": [
      {
        "name": "srcChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dstChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "SwapRequestCancellationAlreadyStaged",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SwapRequestCancellationNotStaged",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SwapRequestCancellationWindowNotPassed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SwapRequestCancellationWindowTooShort",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SwapRequestParametersMismatch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TokenMappingAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TokenNotSupported",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TooLateToCancelUpgrade",
    "inputs": [
      {
        "name": "upgradeTime",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "UUPSUnauthorizedCallContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UUPSUnsupportedProxiableUUID",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnauthorisedCaller",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UpgradeDelayTooShort",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UpgradeFailed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UpgradeMustGoThroughExecuteUpgrade",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UpgradeTimeMustRespectDelay",
    "inputs": [
      {
        "name": "earliestTime",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "UpgradeTooEarly",
    "inputs": [
      {
        "name": "upgradeTime",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAmount",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Router {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405230608052348015610013575f5ffd5b5060015f55610020610025565b6100d7565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100755760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d45780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516157a66100fd5f395f81816135bd015281816135e601526137c701526157a65ff3fe6080604052600436106104b7575f3560e01c80639193059c1161026b578063b444964c11610156578063daadfec3116100d1578063eb20fae211610087578063f16dea821161006d578063f16dea8214610fde578063f18637131461106f578063f84ae3a91461108e575f5ffd5b8063eb20fae214610faa578063f04cd27714610fbf575f5ffd5b8063df919813116100b7578063df91981314610e75578063e7b7ee9614610e94578063eb091ac614610f7c575f5ffd5b8063daadfec314610e37578063db65070d14610e56575f5ffd5b8063cf97ad3011610126578063d547741f1161010c578063d547741f14610dd8578063d55be8c614610df7578063daa4c66b14610e0c575f5ffd5b8063cf97ad3014610da4578063d320385914610db9575f5ffd5b8063b444964c14610d2a578063ca15c87314610d47578063ce12358014610d66578063cf756fdf14610d85575f5ffd5b8063a4c5a27a116101e6578063aa15e029116101b6578063adb610a31161019c578063adb610a314610cd7578063b073748c14610cec578063b21eac9e14610d0b575f5ffd5b8063aa15e02914610c7b578063ad3cb1cc14610c8f575f5ffd5b8063a4c5a27a14610c0b578063a9c9f21514610c28578063a9e3652014610c3d578063a9ee0fc214610c5c575f5ffd5b806399d6120e1161023b578063a24d346111610221578063a24d346114610bb9578063a3246ad314610bd8578063a36d15ec14610bf7575f5ffd5b806399d6120e14610b72578063a217fddf14610ba6575f5ffd5b80639193059c14610ab257806391d1485414610ad15780639695ec2114610b3457806398772ea214610b53575f5ffd5b80633d0aed50116103a55780635ed8b9d3116103205780637a1e1a05116102d65780637e896214116102bc5780637e89621414610a6b5780638886e50614610a7f5780639010d07c14610a93575f5ffd5b80637a1e1a0514610a185780637ae5162214610a37575f5ffd5b80636e3207a6116103065780636e3207a61461098657806375b238fc146109b157806377ca1d72146109e4575f5ffd5b80635ed8b9d3146109465780636370d65814610967575f5ffd5b80634f1ef286116103755780635153a4c31161035b5780635153a4c31461083857806352d1902d14610932578063564b81ef146106e2575f5ffd5b80634f1ef28614610806578063504da5a914610819575f5ffd5b80633d0aed501461077d57806344d1da8c1461079c57806348749d17146107bb5780634b918119146107e7575f5ffd5b806319d257bf116104355780633408e470116104055780633475bf8f116103eb5780633475bf8f1461071357806336568abe1461073f5780633ade90e91461075e575f5ffd5b80633408e470146106e257806334473af1146106f4575f5ffd5b806319d257bf14610638578063248a9ca3146106575780632a2d17bc146106a45780632f2ff15d146106c3575f5ffd5b80630d8e6e2c1161048a578063143490e111610470578063143490e1146105d757806315b17da4146105ec578063191fe1ed14610623575f5ffd5b80630d8e6e2c1461055c57806310ef2f5d146105aa575f5ffd5b806301ffc9a7146104bb578063027b7047146104ef57806303f37d3e1461050d57806307efe9301461052e575b5f5ffd5b3480156104c6575f5ffd5b506104da6104d53660046148a4565b6110a2565b60405190151581526020015b60405180910390f35b3480156104fa575f5ffd5b506005545b6040519081526020016104e6565b348015610518575f5ffd5b5061052c6105273660046148fe565b6110fd565b005b348015610539575f5ffd5b506104da610548366004614937565b5f9081526013602052604090205460ff1690565b348015610567575f5ffd5b5060408051808201909152600581527f312e302e3000000000000000000000000000000000000000000000000000000060208201525b6040516104e6919061497c565b3480156105b5575f5ffd5b506105c96105c4366004614a78565b611224565b6040516104e6929190614acc565b3480156105e2575f5ffd5b506104ff60055481565b3480156105f7575f5ffd5b5060065461060b906001600160a01b031681565b6040516001600160a01b0390911681526020016104e6565b34801561062e575f5ffd5b506104ff61271081565b348015610643575f5ffd5b5061052c610652366004614937565b6112d3565b348015610662575f5ffd5b506104ff610671366004614937565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b3480156106af575f5ffd5b5061052c6106be366004614b35565b6113fe565b3480156106ce575f5ffd5b5061052c6106dd366004614b7d565b611569565b3480156106ed575f5ffd5b50466104ff565b3480156106ff575f5ffd5b5061052c61070e366004614ba7565b6115b2565b34801561071e575f5ffd5b5061073261072d366004614937565b6115c0565b6040516104e69190614be6565b34801561074a575f5ffd5b5061052c610759366004614b7d565b6116ec565b348015610769575f5ffd5b506104da610778366004614cae565b61173d565b348015610788575f5ffd5b5061052c610797366004614cde565b611773565b3480156107a7575f5ffd5b5061052c6107b6366004614937565b611854565b3480156107c6575f5ffd5b506107da6107d5366004614d06565b6118d2565b6040516104e69190614d2e565b3480156107f2575f5ffd5b5061052c610801366004614d79565b611900565b61052c610814366004614dcf565b611ab0565b348015610824575f5ffd5b506105c9610833366004614e10565b611acb565b348015610843575f5ffd5b506108c5610852366004614937565b60126020525f9081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b909b01546001600160a01b039a8b169b998b169a98891699989097169795969495939492939192909160ff16908c565b604080516001600160a01b039d8e1681529b8d1660208d0152998c16998b0199909952999096166060890152608088019490945260a087019290925260c086015260e0850152610100840152610120830152911515610140820152610160810191909152610180016104e6565b34801561093d575f5ffd5b506104ff611b83565b348015610951575f5ffd5b5061095a611bb1565b6040516104e69190614ea6565b348015610972575f5ffd5b5061052c610981366004614937565b611bc2565b348015610991575f5ffd5b506104ff6109a0366004614edd565b60156020525f908152604090205481565b3480156109bc575f5ffd5b506104ff7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156109ef575f5ffd5b5061060b6109fe366004614937565b60166020525f90815260409020546001600160a01b031681565b348015610a23575f5ffd5b5061052c610a32366004614ef6565b611c32565b348015610a42575f5ffd5b50610a56610a51366004614937565b611d48565b604080519283526020830191909152016104e6565b348015610a76575f5ffd5b5061052c611d7d565b348015610a8a575f5ffd5b5061095a611d87565b348015610a9e575f5ffd5b5061060b610aad366004614ef6565b611d93565b348015610abd575f5ffd5b5060025461060b906001600160a01b031681565b348015610adc575f5ffd5b506104da610aeb366004614b7d565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b348015610b3f575f5ffd5b5061052c610b4e3660046148fe565b611dd3565b348015610b5e575f5ffd5b5061052c610b6d366004614b35565b611f09565b348015610b7d575f5ffd5b506104ff610b8c366004614edd565b6001600160a01b03165f9081526015602052604090205490565b348015610bb1575f5ffd5b506104ff5f81565b348015610bc4575f5ffd5b506104ff610bd3366004614f16565b611f14565b348015610be3575f5ffd5b506107da610bf2366004614937565b61210e565b348015610c02575f5ffd5b5061095a61214a565b348015610c16575f5ffd5b506006546001600160a01b031661060b565b348015610c33575f5ffd5b506104ff60045481565b348015610c48575f5ffd5b5061052c610c57366004614f71565b612156565b348015610c67575f5ffd5b50610732610c76366004614ffa565b612285565b348015610c86575f5ffd5b506007546104ff565b348015610c9a575f5ffd5b5061059d6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b348015610ce2575f5ffd5b506104ff60015481565b348015610cf7575f5ffd5b5061052c610d06366004614937565b61238f565b348015610d16575f5ffd5b5061052c610d25366004614b7d565b612467565b348015610d35575f5ffd5b506009546001600160a01b031661060b565b348015610d52575f5ffd5b506104ff610d61366004614937565b6126d5565b348015610d71575f5ffd5b506105c9610d80366004614b7d565b61270c565b348015610d90575f5ffd5b5061052c610d9f36600461506b565b61285e565b348015610daf575f5ffd5b506104ff60075481565b348015610dc4575f5ffd5b506105c9610dd33660046150b3565b612ae7565b348015610de3575f5ffd5b5061052c610df2366004614b7d565b612b04565b348015610e02575f5ffd5b506104ff61138881565b348015610e17575f5ffd5b506104ff610e26366004614937565b60186020525f908152604090205481565b348015610e42575f5ffd5b506104ff610e51366004615115565b612b47565b348015610e61575f5ffd5b5060095461060b906001600160a01b031681565b348015610e80575f5ffd5b5061052c610e8f3660046151d3565b612bd5565b348015610e9f575f5ffd5b50610f24610eae366004614937565b60176020525f90815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801549697959694956001600160a01b0394851695858516957401000000000000000000000000000000000000000090950460ff169493841693909216918a565b604080519a8b5260208b0199909952978901969096526001600160a01b039485166060890152928416608088015290151560a0870152821660c08601521660e0840152610100830152610120820152610140016104e6565b348015610f87575f5ffd5b506104da610f96366004614937565b60136020525f908152604090205460ff1681565b348015610fb5575f5ffd5b506104ff60085481565b348015610fca575f5ffd5b5061052c610fd9366004615209565b612d1a565b348015610fe9575f5ffd5b50610f24610ff8366004614937565b5f908152601760205260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801549698959794966001600160a01b0394851696858516967401000000000000000000000000000000000000000090950460ff169593841694939092169291565b34801561107a575f5ffd5b5061052c6110893660046151d3565b613105565b348015611099575f5ffd5b5061095a613110565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806110f757506110f78261311c565b92915050565b6111267fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f83815260136020526040902054839060ff1661116257604051633e308bc760e11b815260040161115991815260200190565b60405180910390fd5b5061116e81848461173d565b6111a4576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381165f90815260146020908152604080832086845290915290206111d090836131bc565b50604080518481526001600160a01b0380851660208301528316918101919091527fa68c84bf085871be353dffa2cf1d898b864f4bfec8d7963268277b65609fc88e906060015b60405180910390a1505050565b6060805f8530868646604051602001611241959493929190615291565b60408051601f198184030181529082905260065463eae1e15b60e01b83529092505f916001600160a01b039091169063eae1e15b9061128490859060040161497c565b5f60405180830381865afa15801561129e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526112c59190810190615306565b919791965090945050505050565b6112db6131d0565b5f81815260126020526040902080546001600160a01b0316331461131257604051630166d47f60e11b815260040160405180910390fd5b80546001600160a01b0316331461133c57604051630166d47f60e11b815260040160405180910390fd5b600a81015460ff161561136257604051634a4117f960e01b815260040160405180910390fd5b5f82815260186020526040902054156113a7576040517f08c62bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281526018602090815260409182902042908190559151918252339184917f2d21c8505b48b08cf178a20d2a670179e26cfbb49ffcff651632395215b6afb8910160405180910390a3506113fb60015f55565b50565b6201518083101561143b576040517fe119bcf100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6040518060400160405280601a81526020017f6368616e67652d63616e63656c6c6174696f6e2d77696e646f7700000000000081525090505f60015f81546114839061535f565b918290555090505f611496838784612ae7565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f59122906114cc90849089908990600401615377565b602060405180830381865afa1580156114e7573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061150b91906153bb565b61152857604051636925da7560e11b815260040160405180910390fd5b60088690556040518681527f4d8212c5562fd1dd6ba92403efc18ca21cc3f3ac0069ff4395650bd2a4613a52906020015b60405180910390a1505050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546115a2816131b2565b6115ac8383613211565b50505050565b6115bc8282613266565b5050565b61163e6040518061018001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f81525090565b505f9081526012602090815260409182902082516101808101845281546001600160a01b039081168252600183015481169382019390935260028201548316938101939093526003810154909116606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a81015460ff161515610140830152600b015461016082015290565b6001600160a01b038116331461172e576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61173882826134af565b505050565b6001600160a01b0383165f908152601460209081526040808320858452909152812061176990836134fb565b90505b9392505050565b61179c7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b6117a46131d0565b6001600160a01b0382165f90815260156020526040902054806117da57604051631f2a200560e01b815260040160405180910390fd5b6001600160a01b0383165f818152601560205260408120556117fd90838361351c565b816001600160a01b0316836001600160a01b03167f7e9246bb8df4f64094b38fb719d53d4aca12a45a519e1459fd099fa8c17dd3b08360405161184291815260200190565b60405180910390a3506115bc60015f55565b61187d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f8181526013602052604090819020805460ff19166001179055517f047b2668ff544a8bbf30bd7ba3e75486baa01a04badf5386b6c3bc9a7da4d663906118c79083815260200190565b60405180910390a150565b6001600160a01b0382165f908152601460209081526040808320848452909152902060609061176c90613590565b6119086131d0565b5f838152601260205260409020600a81015460ff161561193b57604051634a4117f960e01b815260040160405180910390fd5b600581015446818114611983576040517f744a148100000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401611159565b50505f611990858761270c565b6009546040516318fac89160e11b81529193506001600160a01b031691506331f59122906119c690849088908890600401615377565b602060405180830381865afa1580156119e1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0591906153bb565b611a2257604051636925da7560e11b815260040160405180910390fd5b611a2d600e8661359c565b50611a39600c866135a7565b50600a8201805460ff19166001179055600882015460048301545f91611a5e916153d6565b6002840154909150611a7a906001600160a01b0316888361351c565b60405186907fa8ee081f5df03ba00255280c781ed6a1a67c970250e3686f958c19accb08d480905f90a25050506115ac60015f55565b611ab86135b2565b611ac182613682565b6115bc82826136bb565b6060805f8830898989898946604051602001611aee9897969594939291906153e9565b60408051601f198184030181529082905260065463eae1e15b60e01b83529092505f916001600160a01b039091169063eae1e15b90611b3190859060040161497c565b5f60405180830381865afa158015611b4b573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611b729190810190615306565b919a91995090975050505050505050565b5f611b8c6137bc565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6060611bbd6010613590565b905090565b611beb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f8181526013602052604090819020805460ff19169055517ff07f42691c978b524369cf2893a7ca31ff408e49e086286e9cae920ddf94c119906118c79083815260200190565b611c3a6131d0565b5f828152601260205260409020600a81015460ff1615611c6d57604051634a4117f960e01b815260040160405180910390fd5b80546001600160a01b03163314611c9757604051630166d47f60e11b815260040160405180910390fd5b60088101548290808211611ce0576040517f1b97bd2a00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401611159565b5050611d0d3330836008015485611cf7919061545d565b60028501546001600160a01b031692919061381e565b6008810182905560405183907f2a33225c18747939dcf3b2bd3183bd352a2618e333ae356ad7352e8045719093905f90a2506115bc60015f55565b5f5f5f61271060075485611d5c9190615470565b611d669190615487565b905080611d73818661545d565b9250925050915091565b611d85613857565b565b6060611bbd600c613590565b5f8281527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260408220611dcb9084613aff565b949350505050565b611dfc7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f83815260136020526040902054839060ff16611e2f57604051633e308bc760e11b815260040161115991815260200190565b506001600160a01b0381165f9081526014602090815260408083208684529091529020611e5c90836134fb565b15611e93576040517f800ef11e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381165f9081526014602090815260408083208684529091529020611ebf9083613b0a565b50604080518481526001600160a01b0380851660208301528316918101919091527ef6b276aebfc163c3646a63a0286f845fdd2df56be91b61b62044067ce849a490606001611217565b611738838383613b1e565b5f611f1d6131d0565b5f8511611f3d57604051631f2a200560e01b815260040160405180910390fd5b6001600160a01b038216611f645760405163d92e233d60e01b815260040160405180910390fd5b5f83815260136020526040902054839060ff16611f9757604051633e308bc760e11b815260040161115991815260200190565b50611fa387848861173d565b611fd9576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f611fe487611d48565b915091505f8611612021576040517f732f941300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0389165f90815260156020526040812080548492906120489084906153d6565b925050819055505f60015f815461205e9061535f565b91829055505f81815260166020526040812080546001600160a01b031916331790559091506120938b8b85878c8c8c89612285565b905061209e81612b47565b94506120aa8582613c7d565b6120cb33306120b98b8d6153d6565b6001600160a01b038f1692919061381e565b864660405187907fe2f0160fbe779abb246276d49dac0cb97c86df7cb72a510bb9cf21486f5c82af905f90a45050505061210460015f55565b9695505050505050565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260409091206060919061176c90613590565b6060611bbd600e613590565b60408051808201909152600581527f312e302e30000000000000000000000000000000000000000000000000000000602082015260405160200161219a91906154bd565b60405160208183030381529060405280519060200120866001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156121eb573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526122129190810190615306565b60405160200161222291906154bd565b604051602081830303815290604052805190602001200361226f576040517f157224fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61227d868686868686613d5a565b505050505050565b6123036040518061018001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f81525090565b604051806101800160405280336001600160a01b03168152602001846001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b031681526020018881526020016123584690565b81526020018581526020018781526020018681526020018381526020015f1515815260200142815250905098975050505050505050565b6123b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b611388808211156123f8576040517f48e4389e00000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b505f8111612432576040517f8bff87cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60078190556040518181527f853dd170f8306bb1eeb26a45f33d38947149fd8cffed21be04553a55a45a7b6e906020016118c7565b61246f6131d0565b5f82815260126020526040902080546001600160a01b031633146124a657604051630166d47f60e11b815260040160405180910390fd5b600a81015460ff16156124cc57604051634a4117f960e01b815260040160405180910390fd5b5f83815260186020526040902054612510576040517f160d218e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008545f84815260186020526040812054909161252c916153d6565b905080421015612568576040517f2234189200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831661258f5760405163d92e233d60e01b815260040160405180910390fd5b600782015460028301546001600160a01b03165f9081526015602052604090205410156125e8576040517fd0fcc85100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600782015460028301546001600160a01b03165f908152601560205260408120805490919061261890849061545d565b9091555050600a8201805460ff1916600117905561263760108561359c565b50612643600c856135a7565b505f82600801548360070154846004015461265e91906153d6565b61266891906153d6565b6002840154909150612684906001600160a01b0316858361351c565b82546040518281526001600160a01b0386811692169087907fbd3be89f6ca546f02b67ddd193d4f0e64f580f3c776e942e77a45093bd16da0c9060200160405180910390a45050506115bc60015f55565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060208190526040822061176c90613fce565b6060806001600160a01b0383166127365760405163d92e233d60e01b815260040160405180910390fd5b5f612740856115c0565b905083815f015182602001518360400151846060015185608001518660a001518760c001518861012001516040516020016127d4999897969594939291906001600160a01b03998a16815297891660208901529588166040880152938716606087015291909516608085015260a084019490945260c083019390935260e08201929092526101008101919091526101200190565b60408051601f198184030181529082905260095463eae1e15b60e01b83529094506001600160a01b03169063eae1e15b9061281390869060040161497c565b5f60405180830381865afa15801561282d573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526128549190810190615306565b9150509250929050565b5f612867613fd7565b805490915060ff68010000000000000000820416159067ffffffffffffffff165f811580156128935750825b90505f8267ffffffffffffffff1660011480156128af5750303b155b9050811580156128bd575080155b156128f4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561293f57845468ff00000000000000001916680100000000000000001785555b612947613fff565b61294f613fff565b61295c876202a300614007565b5f8611801561296d57506113888611155b6129a3576040517f8bff87cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0388166129ca5760405163d92e233d60e01b815260040160405180910390fd5b6129f47fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758a613211565b612a2a576040517f589efb5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612a345f8a613211565b612a6a576040517f589efb5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007869055600980546001600160a01b0319166001600160a01b038a16179055620151806008558315612adc57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6060805f85308686466040516020016112419594939291906154c8565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154612b3d816131b2565b6115ac83836134af565b5f815f01518260200151836040015184606001518560800151612b674690565b60c080890151610120808b0151604080516001600160a01b039b8c166020820152998b16908a0152968916606089015297909416608087015260a08601929092529084015260e083015261010082015201604051602081830303815290604052805190602001209050919050565b6001600160a01b038316612bfc5760405163d92e233d60e01b815260040160405180910390fd5b5f6040518060600160405280602181526020016157856021913990505f60015f8154612c279061535f565b918290555090505f612c3a838784611224565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f5912290612c7090849089908990600401615377565b602060405180830381865afa158015612c8b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612caf91906153bb565b612ccc57604051636925da7560e11b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0388169081179091556040517fc37fcad33674251baba1cbc16b2e8e3883ff25e6105973bc7a7f9bd7fafc2199905f90a2505050505050565b612d226131d0565b5f8881526017602052604090206004015474010000000000000000000000000000000000000000900460ff1615612d6c57604051634a4117f960e01b815260040160405180910390fd5b6001600160a01b03851615801590612d8c57506001600160a01b03841615155b8015612da057506001600160a01b03871615155b8015612db457506001600160a01b03861615155b612dea576040517f295ba29000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038916612e115760405163d92e233d60e01b815260040160405180910390fd5b5f8311612e3157604051631f2a200560e01b815260040160405180910390fd5b8146818103612e75576040517f9c8d8d0900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401611159565b5050868686868686612e844690565b604080516001600160a01b03988916602082015296881690870152938616606086015294909116608084015260a083015260c082019290925260e0810191909152610100810182905261012001604051602081830303815290604052805190602001208814612f1f576040517fc4fec7e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612f2a600a8961359c565b50612f406001600160a01b03851633888661381e565b604051806101400160405280898152602001838152602001612f5f4690565b8152602001866001600160a01b03168152602001856001600160a01b031681526020016001151581526020018a6001600160a01b03168152602001876001600160a01b031681526020018481526020014281525060175f8a81526020019081526020015f205f820151815f015560208201518160010155604082015181600201556060820151816003015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816006015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550610100820151816007015561012082015181600801559050506130d04690565b60405183908a907f5819a5ec71a56682e3e8a46c40394c82de95e50a8d4aac7c7e2039d83feec174905f90a4612adc60015f55565b611738838383614099565b6060611bbd600a613590565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806110f757507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146110f7565b6113fb81336141de565b5f61176c836001600160a01b03841661426a565b60025f540361320b576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f55565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320008161323e858561434d565b90508015611dcb575f85815260208390526040902061325d9085613b0a565b50949350505050565b6004544281116132a5576040517fb19fe45800000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b505f6040518060400160405280600681526020017f63616e63656c000000000000000000000000000000000000000000000000000081525090505f60015f81546132ee9061535f565b9182905550600254600380549293505f926133a29286926001600160a01b039091169182919061331d90615507565b80601f016020809104026020016040519081016040528092919081815260200182805461334990615507565b80156133945780601f1061336b57610100808354040283529160200191613394565b820191905f5260205f20905b81548152906001019060200180831161337757829003601f168201915b505050505060045487611acb565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f59122906133d890849089908990600401615377565b602060405180830381865afa1580156133f3573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061341791906153bb565b61343457604051636925da7560e11b815260040160405180910390fd5b600280546001600160a01b031981169091555f600481905560408051602081019091529081526001600160a01b0390911690600390613473908261558a565b506040516001600160a01b038216907f3198dc80249fcfedbd0d06e1ff49a7695a51b006592328ce0b127cdeab77e936905f90a2505050505050565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816134dc8585614410565b90508015611dcb575f85815260208390526040902061325d90856131bc565b6001600160a01b0381165f908152600183016020526040812054151561176c565b6040516001600160a01b0383811660248301526044820183905261173891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506144b4565b60605f61176c83614539565b5f61176c8383614592565b5f61176c838361426a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061364b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661363f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b15611d85576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3330146113fb576040517f5cb4a60600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613715575060408051601f3d908101601f1916820190925261371291810190615645565b60015b613756576040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401611159565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146137b2576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401611159565b61173883836145de565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d85576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526115ac9186918216906323b872dd90608401613549565b6002546001600160a01b0316613899576040517f52c650f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454428111156138d9576040517f61813b8000000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b50600254600380546001600160a01b03909216915f91906138f990615507565b80601f016020809104026020016040519081016040528092919081815260200182805461392590615507565b80156139705780601f1061394757610100808354040283529160200191613970565b820191905f5260205f20905b81548152906001019060200180831161395357829003601f168201915b5050600280546001600160a01b031916905550505f600481905560408051602081019091529081529192506003916139a991508261558a565b505f5f306001600160a01b0316634f1ef28660e01b85856040516024016139d192919061565c565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613a3c91906154bd565b5f604051808303815f865af19150503d805f8114613a75576040519150601f19603f3d011682016040523d82523d5f602084013e613a7a565b606091505b509150915081613ac657805115613a945780518060208301fd5b6040517f55299b4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038516907ffd5a9ae7c73c11fde86dd61704e937a04c99e7eef668050f685aabc5d8a6b2e4905f90a250505050565b5f61176c8383614633565b5f61176c836001600160a01b038416614592565b6202a300831015613b5b576040517f65e1b9dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6040518060400160405280601481526020017f6368616e67652d757067726164652d64656c617900000000000000000000000081525090505f60015f8154613ba39061535f565b918290555090505f613bb6838784612ae7565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f5912290613bec90849089908990600401615377565b602060405180830381865afa158015613c07573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c2b91906153bb565b613c4857604051636925da7560e11b815260040160405180910390fd5b60058690556040518681527fe28f4f0d71292e4c2c0d6449ff0ddc8312fb9eeb604ca560c4dbe120fdf107ce90602001611559565b5f82815260126020908152604091829020835181546001600160a01b03199081166001600160a01b03928316178355928501516001830180548516918316919091179055928401516002820180548416918516919091179055606084015160038201805490931693169290921790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a8201805460ff1916911515919091179055610160820151600b90910155611738600c8361359c565b6001600160a01b038616613d815760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b03808816911603613dc8576040517f157224fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554613dd590426153d6565b83101560055490613e15576040517f0cd4e2d600000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b505f6040518060400160405280600881526020017f7363686564756c6500000000000000000000000000000000000000000000000081525090505f60015f8154613e5e9061535f565b91905081905590505f613ec08360025f9054906101000a90046001600160a01b03168b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508d9250899150611acb9050565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f5912290613ef690849089908990600401615377565b602060405180830381865afa158015613f11573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613f3591906153bb565b613f5257604051636925da7560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b038b1617905560048690556003613f7f888a8361567d565b50886001600160a01b03167fe1009627653eb47f7d0f3b4435749f7984a803c21f84a076cc4dcb0412cf066f87604051613fbb91815260200190565b60405180910390a2505050505050505050565b5f6110f7825490565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006110f7565b611d85614659565b61400f614659565b6001600160a01b0382166140365760405163d92e233d60e01b815260040160405180910390fd5b6202a300811015614073576040517f65e1b9dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b039390931692909217909155600555565b6001600160a01b0383166140c05760405163d92e233d60e01b815260040160405180910390fd5b5f6040518060600160405280602581526020016157606025913990505f60015f81546140eb9061535f565b918290555090505f6140fe838784611224565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f591229061413490849089908990600401615377565b602060405180830381865afa15801561414f573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061417391906153bb565b61419057604051636925da7560e11b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0388169081179091556040517f78a7faffd49667f6d2bc16fa2c528710c09fc0aa73325a3f28e161f8ae3ef4a1905f90a2505050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff166115bc576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401611159565b5f8181526001830160205260408120548015614344575f61428c60018361545d565b85549091505f9061429f9060019061545d565b90508082146142fe575f865f0182815481106142bd576142bd615737565b905f5260205f200154905080875f0184815481106142dd576142dd615737565b5f918252602080832090910192909255918252600188019052604090208390555b855486908061430f5761430f61574b565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506110f7565b5f9150506110f7565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16614344575f848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556143c63390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506110f7565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615614344575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506110f7565b5f5f60205f8451602086015f885af1806144d3576040513d5f823e3d81fd5b50505f513d915081156144ea5780600114156144f7565b6001600160a01b0384163b155b156115ac576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611159565b6060815f0180548060200260200160405190810160405280929190818152602001828054801561458657602002820191905f5260205f20905b815481526020019060010190808311614572575b50505050509050919050565b5f8181526001830160205260408120546145d757508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556110f7565b505f6110f7565b6145e782614697565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561462b576117388282614726565b6115bc614798565b5f825f01828154811061464857614648615737565b905f5260205f200154905092915050565b6146616147d0565b611d85576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160a01b03163b5f036146e5576040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401611159565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b03168460405161474291906154bd565b5f60405180830381855af49150503d805f811461477a576040519150601f19603f3d011682016040523d82523d5f602084013e61477f565b606091505b509150915061478f8583836147ee565b95945050505050565b3415611d85576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6147d9613fd7565b5468010000000000000000900460ff16919050565b606082614803576147fe82614863565b61176c565b815115801561481a57506001600160a01b0384163b155b1561485c576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611159565b508061176c565b80511561487257805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f602082840312156148b4575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461176c575f5ffd5b80356001600160a01b03811681146148f9575f5ffd5b919050565b5f5f5f60608486031215614910575f5ffd5b83359250614920602085016148e3565b915061492e604085016148e3565b90509250925092565b5f60208284031215614947575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61176c602083018461494e565b634e487b7160e01b5f52604160045260245ffd5b604051610180810167ffffffffffffffff811182821017156149c6576149c661498e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156149f5576149f561498e565b604052919050565b5f67ffffffffffffffff821115614a1657614a1661498e565b50601f01601f191660200190565b5f82601f830112614a33575f5ffd5b8135602083015f614a4b614a46846149fd565b6149cc565b9050828152858383011115614a5e575f5ffd5b828260208301375f92810160200192909252509392505050565b5f5f5f60608486031215614a8a575f5ffd5b833567ffffffffffffffff811115614aa0575f5ffd5b614aac86828701614a24565b935050614abb602085016148e3565b929592945050506040919091013590565b604081525f614ade604083018561494e565b828103602084015261478f818561494e565b5f5f83601f840112614b00575f5ffd5b50813567ffffffffffffffff811115614b17575f5ffd5b602083019150836020828501011115614b2e575f5ffd5b9250929050565b5f5f5f60408486031215614b47575f5ffd5b83359250602084013567ffffffffffffffff811115614b64575f5ffd5b614b7086828701614af0565b9497909650939450505050565b5f5f60408385031215614b8e575f5ffd5b82359150614b9e602084016148e3565b90509250929050565b5f5f60208385031215614bb8575f5ffd5b823567ffffffffffffffff811115614bce575f5ffd5b614bda85828601614af0565b90969095509350505050565b81516001600160a01b0316815261018081016020830151614c1260208401826001600160a01b03169052565b506040830151614c2d60408401826001600160a01b03169052565b506060830151614c4860608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100830151610100830152610120830151610120830152610140830151614c9e61014084018215159052565b5061016092830151919092015290565b5f5f5f60608486031215614cc0575f5ffd5b614cc9846148e3565b92506020840135915061492e604085016148e3565b5f5f60408385031215614cef575f5ffd5b614cf8836148e3565b9150614b9e602084016148e3565b5f5f60408385031215614d17575f5ffd5b614d20836148e3565b946020939093013593505050565b602080825282518282018190525f918401906040840190835b81811015614d6e5783516001600160a01b0316835260209384019390920191600101614d47565b509095945050505050565b5f5f5f5f60608587031215614d8c575f5ffd5b614d95856148e3565b935060208501359250604085013567ffffffffffffffff811115614db7575f5ffd5b614dc387828801614af0565b95989497509550505050565b5f5f60408385031215614de0575f5ffd5b614de9836148e3565b9150602083013567ffffffffffffffff811115614e04575f5ffd5b61285485828601614a24565b5f5f5f5f5f5f60c08789031215614e25575f5ffd5b863567ffffffffffffffff811115614e3b575f5ffd5b614e4789828a01614a24565b965050614e56602088016148e3565b9450614e64604088016148e3565b9350606087013567ffffffffffffffff811115614e7f575f5ffd5b614e8b89828a01614a24565b9699959850939660808101359560a090910135945092505050565b602080825282518282018190525f918401906040840190835b81811015614d6e578351835260209384019390920191600101614ebf565b5f60208284031215614eed575f5ffd5b61176c826148e3565b5f5f60408385031215614f07575f5ffd5b50508035926020909101359150565b5f5f5f5f5f5f60c08789031215614f2b575f5ffd5b614f34876148e3565b9550614f42602088016148e3565b9450604087013593506060870135925060808701359150614f6560a088016148e3565b90509295509295509295565b5f5f5f5f5f5f60808789031215614f86575f5ffd5b614f8f876148e3565b9550602087013567ffffffffffffffff811115614faa575f5ffd5b614fb689828a01614af0565b90965094505060408701359250606087013567ffffffffffffffff811115614fdc575f5ffd5b614fe889828a01614af0565b979a9699509497509295939492505050565b5f5f5f5f5f5f5f5f610100898b031215615012575f5ffd5b61501b896148e3565b975061502960208a016148e3565b965060408901359550606089013594506080890135935060a0890135925061505360c08a016148e3565b979a969950949793969295919450919260e001359150565b5f5f5f5f6080858703121561507e575f5ffd5b615087856148e3565b9350615095602086016148e3565b92506150a3604086016148e3565b9396929550929360600135925050565b5f5f5f606084860312156150c5575f5ffd5b833567ffffffffffffffff8111156150db575f5ffd5b6150e786828701614a24565b9660208601359650604090950135949350505050565b80151581146113fb575f5ffd5b80356148f9816150fd565b5f610180828403128015615127575f5ffd5b506151306149a2565b615139836148e3565b8152615147602084016148e3565b6020820152615158604084016148e3565b6040820152615169606084016148e3565b60608201526080838101359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526151b9610140840161510a565b610140820152610160928301359281019290925250919050565b5f5f5f604084860312156151e5575f5ffd5b6151ee846148e3565b9250602084013567ffffffffffffffff811115614b64575f5ffd5b5f5f5f5f5f5f5f5f5f6101208a8c031215615222575f5ffd5b61522b8a6148e3565b985060208a0135975061524060408b016148e3565b965061524e60608b016148e3565b955061525c60808b016148e3565b945061526a60a08b016148e3565b989b979a5095989497939693955050505060c08201359160e0810135916101009091013590565b60a081525f6152a360a083018861494e565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b5f6152dd614a46846149fd565b90508281528383830111156152f0575f5ffd5b8282602083015e5f602084830101529392505050565b5f60208284031215615316575f5ffd5b815167ffffffffffffffff81111561532c575f5ffd5b8201601f8101841361533c575f5ffd5b611dcb848251602084016152d0565b634e487b7160e01b5f52601160045260245ffd5b5f600182016153705761537061534b565b5060010190565b604081525f615389604083018661494e565b8281036020840152838152838560208301375f602085830101526020601f19601f860116820101915050949350505050565b5f602082840312156153cb575f5ffd5b815161176c816150fd565b808201808211156110f7576110f761534b565b61010081525f6153fd61010083018b61494e565b6001600160a01b038a1660208401526001600160a01b03891660408401526001600160a01b0388166060840152828103608084015261543c818861494e565b60a0840196909652505060c081019290925260e09091015295945050505050565b818103818111156110f7576110f761534b565b80820281158282048414176110f7576110f761534b565b5f826154a157634e487b7160e01b5f52601260045260245ffd5b500490565b5f81518060208401855e5f93019283525090919050565b5f61176c82846154a6565b60a081525f6154da60a083018861494e565b90506001600160a01b03861660208301528460408301528360608301528260808301529695505050505050565b600181811c9082168061551b57607f821691505b60208210810361553957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561173857805f5260205f20601f840160051c810160208510156155645750805b601f840160051c820191505b81811015615583575f8155600101615570565b5050505050565b815167ffffffffffffffff8111156155a4576155a461498e565b6155b8816155b28454615507565b8461553f565b6020601f8211600181146155ea575f83156155d35750848201515b5f19600385901b1c1916600184901b178455615583565b5f84815260208120601f198516915b8281101561561957878501518255602094850194600190920191016155f9565b508482101561563657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f60208284031215615655575f5ffd5b5051919050565b6001600160a01b0383168152604060208201525f611769604083018461494e565b67ffffffffffffffff8311156156955761569561498e565b6156a9836156a38354615507565b8361553f565b5f601f8411600181146156da575f85156156c35750838201355b5f19600387901b1c1916600186901b178355615583565b5f83815260208120601f198716915b8281101561570957868501358255602094850194600190920191016156e9565b5086821015615725575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffdfe6368616e67652d636f6e74726163742d757067726164652d626c732d76616c696461746f726368616e67652d737761702d726571756573742d626c732d76616c696461746f72
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0`\x80R4\x80\x15a\0\x13W__\xFD[P`\x01_Ua\0 a\0%V[a\0\xD7V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x80Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x15a\0uW`@Qc\xF9.\xE8\xA9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01`\x01`@\x1B\x03\x90\x81\x16\x14a\0\xD4W\x80T`\x01`\x01`@\x1B\x03\x19\x16`\x01`\x01`@\x1B\x03\x90\x81\x17\x82U`@Q\x90\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x01`@Q\x80\x91\x03\x90\xA1[PV[`\x80QaW\xA6a\0\xFD_9_\x81\x81a5\xBD\x01R\x81\x81a5\xE6\x01Ra7\xC7\x01RaW\xA6_\xF3\xFE`\x80`@R`\x046\x10a\x04\xB7W_5`\xE0\x1C\x80c\x91\x93\x05\x9C\x11a\x02kW\x80c\xB4D\x96L\x11a\x01VW\x80c\xDA\xAD\xFE\xC3\x11a\0\xD1W\x80c\xEB \xFA\xE2\x11a\0\x87W\x80c\xF1m\xEA\x82\x11a\0mW\x80c\xF1m\xEA\x82\x14a\x0F\xDEW\x80c\xF1\x867\x13\x14a\x10oW\x80c\xF8J\xE3\xA9\x14a\x10\x8EW__\xFD[\x80c\xEB \xFA\xE2\x14a\x0F\xAAW\x80c\xF0L\xD2w\x14a\x0F\xBFW__\xFD[\x80c\xDF\x91\x98\x13\x11a\0\xB7W\x80c\xDF\x91\x98\x13\x14a\x0EuW\x80c\xE7\xB7\xEE\x96\x14a\x0E\x94W\x80c\xEB\t\x1A\xC6\x14a\x0F|W__\xFD[\x80c\xDA\xAD\xFE\xC3\x14a\x0E7W\x80c\xDBe\x07\r\x14a\x0EVW__\xFD[\x80c\xCF\x97\xAD0\x11a\x01&W\x80c\xD5Gt\x1F\x11a\x01\x0CW\x80c\xD5Gt\x1F\x14a\r\xD8W\x80c\xD5[\xE8\xC6\x14a\r\xF7W\x80c\xDA\xA4\xC6k\x14a\x0E\x0CW__\xFD[\x80c\xCF\x97\xAD0\x14a\r\xA4W\x80c\xD3 8Y\x14a\r\xB9W__\xFD[\x80c\xB4D\x96L\x14a\r*W\x80c\xCA\x15\xC8s\x14a\rGW\x80c\xCE\x125\x80\x14a\rfW\x80c\xCFuo\xDF\x14a\r\x85W__\xFD[\x80c\xA4\xC5\xA2z\x11a\x01\xE6W\x80c\xAA\x15\xE0)\x11a\x01\xB6W\x80c\xAD\xB6\x10\xA3\x11a\x01\x9CW\x80c\xAD\xB6\x10\xA3\x14a\x0C\xD7W\x80c\xB0st\x8C\x14a\x0C\xECW\x80c\xB2\x1E\xAC\x9E\x14a\r\x0BW__\xFD[\x80c\xAA\x15\xE0)\x14a\x0C{W\x80c\xAD<\xB1\xCC\x14a\x0C\x8FW__\xFD[\x80c\xA4\xC5\xA2z\x14a\x0C\x0BW\x80c\xA9\xC9\xF2\x15\x14a\x0C(W\x80c\xA9\xE3e \x14a\x0C=W\x80c\xA9\xEE\x0F\xC2\x14a\x0C\\W__\xFD[\x80c\x99\xD6\x12\x0E\x11a\x02;W\x80c\xA2M4a\x11a\x02!W\x80c\xA2M4a\x14a\x0B\xB9W\x80c\xA3$j\xD3\x14a\x0B\xD8W\x80c\xA3m\x15\xEC\x14a\x0B\xF7W__\xFD[\x80c\x99\xD6\x12\x0E\x14a\x0BrW\x80c\xA2\x17\xFD\xDF\x14a\x0B\xA6W__\xFD[\x80c\x91\x93\x05\x9C\x14a\n\xB2W\x80c\x91\xD1HT\x14a\n\xD1W\x80c\x96\x95\xEC!\x14a\x0B4W\x80c\x98w.\xA2\x14a\x0BSW__\xFD[\x80c=\n\xEDP\x11a\x03\xA5W\x80c^\xD8\xB9\xD3\x11a\x03 W\x80cz\x1E\x1A\x05\x11a\x02\xD6W\x80c~\x89b\x14\x11a\x02\xBCW\x80c~\x89b\x14\x14a\nkW\x80c\x88\x86\xE5\x06\x14a\n\x7FW\x80c\x90\x10\xD0|\x14a\n\x93W__\xFD[\x80cz\x1E\x1A\x05\x14a\n\x18W\x80cz\xE5\x16\"\x14a\n7W__\xFD[\x80cn2\x07\xA6\x11a\x03\x06W\x80cn2\x07\xA6\x14a\t\x86W\x80cu\xB28\xFC\x14a\t\xB1W\x80cw\xCA\x1Dr\x14a\t\xE4W__\xFD[\x80c^\xD8\xB9\xD3\x14a\tFW\x80ccp\xD6X\x14a\tgW__\xFD[\x80cO\x1E\xF2\x86\x11a\x03uW\x80cQS\xA4\xC3\x11a\x03[W\x80cQS\xA4\xC3\x14a\x088W\x80cR\xD1\x90-\x14a\t2W\x80cVK\x81\xEF\x14a\x06\xE2W__\xFD[\x80cO\x1E\xF2\x86\x14a\x08\x06W\x80cPM\xA5\xA9\x14a\x08\x19W__\xFD[\x80c=\n\xEDP\x14a\x07}W\x80cD\xD1\xDA\x8C\x14a\x07\x9CW\x80cHt\x9D\x17\x14a\x07\xBBW\x80cK\x91\x81\x19\x14a\x07\xE7W__\xFD[\x80c\x19\xD2W\xBF\x11a\x045W\x80c4\x08\xE4p\x11a\x04\x05W\x80c4u\xBF\x8F\x11a\x03\xEBW\x80c4u\xBF\x8F\x14a\x07\x13W\x80c6V\x8A\xBE\x14a\x07?W\x80c:\xDE\x90\xE9\x14a\x07^W__\xFD[\x80c4\x08\xE4p\x14a\x06\xE2W\x80c4G:\xF1\x14a\x06\xF4W__\xFD[\x80c\x19\xD2W\xBF\x14a\x068W\x80c$\x8A\x9C\xA3\x14a\x06WW\x80c*-\x17\xBC\x14a\x06\xA4W\x80c//\xF1]\x14a\x06\xC3W__\xFD[\x80c\r\x8En,\x11a\x04\x8AW\x80c\x144\x90\xE1\x11a\x04pW\x80c\x144\x90\xE1\x14a\x05\xD7W\x80c\x15\xB1}\xA4\x14a\x05\xECW\x80c\x19\x1F\xE1\xED\x14a\x06#W__\xFD[\x80c\r\x8En,\x14a\x05\\W\x80c\x10\xEF/]\x14a\x05\xAAW__\xFD[\x80c\x01\xFF\xC9\xA7\x14a\x04\xBBW\x80c\x02{pG\x14a\x04\xEFW\x80c\x03\xF3}>\x14a\x05\rW\x80c\x07\xEF\xE90\x14a\x05.W[__\xFD[4\x80\x15a\x04\xC6W__\xFD[Pa\x04\xDAa\x04\xD56`\x04aH\xA4V[a\x10\xA2V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xFAW__\xFD[P`\x05T[`@Q\x90\x81R` \x01a\x04\xE6V[4\x80\x15a\x05\x18W__\xFD[Pa\x05,a\x05'6`\x04aH\xFEV[a\x10\xFDV[\0[4\x80\x15a\x059W__\xFD[Pa\x04\xDAa\x05H6`\x04aI7V[_\x90\x81R`\x13` R`@\x90 T`\xFF\x16\x90V[4\x80\x15a\x05gW__\xFD[P`@\x80Q\x80\x82\x01\x90\x91R`\x05\x81R\x7F1.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R[`@Qa\x04\xE6\x91\x90aI|V[4\x80\x15a\x05\xB5W__\xFD[Pa\x05\xC9a\x05\xC46`\x04aJxV[a\x12$V[`@Qa\x04\xE6\x92\x91\x90aJ\xCCV[4\x80\x15a\x05\xE2W__\xFD[Pa\x04\xFF`\x05T\x81V[4\x80\x15a\x05\xF7W__\xFD[P`\x06Ta\x06\x0B\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x04\xE6V[4\x80\x15a\x06.W__\xFD[Pa\x04\xFFa'\x10\x81V[4\x80\x15a\x06CW__\xFD[Pa\x05,a\x06R6`\x04aI7V[a\x12\xD3V[4\x80\x15a\x06bW__\xFD[Pa\x04\xFFa\x06q6`\x04aI7V[_\x90\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`@\x90 `\x01\x01T\x90V[4\x80\x15a\x06\xAFW__\xFD[Pa\x05,a\x06\xBE6`\x04aK5V[a\x13\xFEV[4\x80\x15a\x06\xCEW__\xFD[Pa\x05,a\x06\xDD6`\x04aK}V[a\x15iV[4\x80\x15a\x06\xEDW__\xFD[PFa\x04\xFFV[4\x80\x15a\x06\xFFW__\xFD[Pa\x05,a\x07\x0E6`\x04aK\xA7V[a\x15\xB2V[4\x80\x15a\x07\x1EW__\xFD[Pa\x072a\x07-6`\x04aI7V[a\x15\xC0V[`@Qa\x04\xE6\x91\x90aK\xE6V[4\x80\x15a\x07JW__\xFD[Pa\x05,a\x07Y6`\x04aK}V[a\x16\xECV[4\x80\x15a\x07iW__\xFD[Pa\x04\xDAa\x07x6`\x04aL\xAEV[a\x17=V[4\x80\x15a\x07\x88W__\xFD[Pa\x05,a\x07\x976`\x04aL\xDEV[a\x17sV[4\x80\x15a\x07\xA7W__\xFD[Pa\x05,a\x07\xB66`\x04aI7V[a\x18TV[4\x80\x15a\x07\xC6W__\xFD[Pa\x07\xDAa\x07\xD56`\x04aM\x06V[a\x18\xD2V[`@Qa\x04\xE6\x91\x90aM.V[4\x80\x15a\x07\xF2W__\xFD[Pa\x05,a\x08\x016`\x04aMyV[a\x19\0V[a\x05,a\x08\x146`\x04aM\xCFV[a\x1A\xB0V[4\x80\x15a\x08$W__\xFD[Pa\x05\xC9a\x0836`\x04aN\x10V[a\x1A\xCBV[4\x80\x15a\x08CW__\xFD[Pa\x08\xC5a\x08R6`\x04aI7V[`\x12` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x84\x01T`\x04\x85\x01T`\x05\x86\x01T`\x06\x87\x01T`\x07\x88\x01T`\x08\x89\x01T`\t\x8A\x01T`\n\x8B\x01T`\x0B\x90\x9B\x01T`\x01`\x01`\xA0\x1B\x03\x9A\x8B\x16\x9B\x99\x8B\x16\x9A\x98\x89\x16\x99\x98\x90\x97\x16\x97\x95\x96\x94\x95\x93\x94\x92\x93\x91\x92\x90\x91`\xFF\x16\x90\x8CV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x9D\x8E\x16\x81R\x9B\x8D\x16` \x8D\x01R\x99\x8C\x16\x99\x8B\x01\x99\x90\x99R\x99\x90\x96\x16``\x89\x01R`\x80\x88\x01\x94\x90\x94R`\xA0\x87\x01\x92\x90\x92R`\xC0\x86\x01R`\xE0\x85\x01Ra\x01\0\x84\x01Ra\x01 \x83\x01R\x91\x15\x15a\x01@\x82\x01Ra\x01`\x81\x01\x91\x90\x91Ra\x01\x80\x01a\x04\xE6V[4\x80\x15a\t=W__\xFD[Pa\x04\xFFa\x1B\x83V[4\x80\x15a\tQW__\xFD[Pa\tZa\x1B\xB1V[`@Qa\x04\xE6\x91\x90aN\xA6V[4\x80\x15a\trW__\xFD[Pa\x05,a\t\x816`\x04aI7V[a\x1B\xC2V[4\x80\x15a\t\x91W__\xFD[Pa\x04\xFFa\t\xA06`\x04aN\xDDV[`\x15` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\t\xBCW__\xFD[Pa\x04\xFF\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17u\x81V[4\x80\x15a\t\xEFW__\xFD[Pa\x06\x0Ba\t\xFE6`\x04aI7V[`\x16` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\n#W__\xFD[Pa\x05,a\n26`\x04aN\xF6V[a\x1C2V[4\x80\x15a\nBW__\xFD[Pa\nVa\nQ6`\x04aI7V[a\x1DHV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x04\xE6V[4\x80\x15a\nvW__\xFD[Pa\x05,a\x1D}V[4\x80\x15a\n\x8AW__\xFD[Pa\tZa\x1D\x87V[4\x80\x15a\n\x9EW__\xFD[Pa\x06\x0Ba\n\xAD6`\x04aN\xF6V[a\x1D\x93V[4\x80\x15a\n\xBDW__\xFD[P`\x02Ta\x06\x0B\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\n\xDCW__\xFD[Pa\x04\xDAa\n\xEB6`\x04aK}V[_\x91\x82R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x90\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16\x84R\x91\x90R\x90 T`\xFF\x16\x90V[4\x80\x15a\x0B?W__\xFD[Pa\x05,a\x0BN6`\x04aH\xFEV[a\x1D\xD3V[4\x80\x15a\x0B^W__\xFD[Pa\x05,a\x0Bm6`\x04aK5V[a\x1F\tV[4\x80\x15a\x0B}W__\xFD[Pa\x04\xFFa\x0B\x8C6`\x04aN\xDDV[`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x15` R`@\x90 T\x90V[4\x80\x15a\x0B\xB1W__\xFD[Pa\x04\xFF_\x81V[4\x80\x15a\x0B\xC4W__\xFD[Pa\x04\xFFa\x0B\xD36`\x04aO\x16V[a\x1F\x14V[4\x80\x15a\x0B\xE3W__\xFD[Pa\x07\xDAa\x0B\xF26`\x04aI7V[a!\x0EV[4\x80\x15a\x0C\x02W__\xFD[Pa\tZa!JV[4\x80\x15a\x0C\x16W__\xFD[P`\x06T`\x01`\x01`\xA0\x1B\x03\x16a\x06\x0BV[4\x80\x15a\x0C3W__\xFD[Pa\x04\xFF`\x04T\x81V[4\x80\x15a\x0CHW__\xFD[Pa\x05,a\x0CW6`\x04aOqV[a!VV[4\x80\x15a\x0CgW__\xFD[Pa\x072a\x0Cv6`\x04aO\xFAV[a\"\x85V[4\x80\x15a\x0C\x86W__\xFD[P`\x07Ta\x04\xFFV[4\x80\x15a\x0C\x9AW__\xFD[Pa\x05\x9D`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[4\x80\x15a\x0C\xE2W__\xFD[Pa\x04\xFF`\x01T\x81V[4\x80\x15a\x0C\xF7W__\xFD[Pa\x05,a\r\x066`\x04aI7V[a#\x8FV[4\x80\x15a\r\x16W__\xFD[Pa\x05,a\r%6`\x04aK}V[a$gV[4\x80\x15a\r5W__\xFD[P`\tT`\x01`\x01`\xA0\x1B\x03\x16a\x06\x0BV[4\x80\x15a\rRW__\xFD[Pa\x04\xFFa\ra6`\x04aI7V[a&\xD5V[4\x80\x15a\rqW__\xFD[Pa\x05\xC9a\r\x806`\x04aK}V[a'\x0CV[4\x80\x15a\r\x90W__\xFD[Pa\x05,a\r\x9F6`\x04aPkV[a(^V[4\x80\x15a\r\xAFW__\xFD[Pa\x04\xFF`\x07T\x81V[4\x80\x15a\r\xC4W__\xFD[Pa\x05\xC9a\r\xD36`\x04aP\xB3V[a*\xE7V[4\x80\x15a\r\xE3W__\xFD[Pa\x05,a\r\xF26`\x04aK}V[a+\x04V[4\x80\x15a\x0E\x02W__\xFD[Pa\x04\xFFa\x13\x88\x81V[4\x80\x15a\x0E\x17W__\xFD[Pa\x04\xFFa\x0E&6`\x04aI7V[`\x18` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x0EBW__\xFD[Pa\x04\xFFa\x0EQ6`\x04aQ\x15V[a+GV[4\x80\x15a\x0EaW__\xFD[P`\tTa\x06\x0B\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x0E\x80W__\xFD[Pa\x05,a\x0E\x8F6`\x04aQ\xD3V[a+\xD5V[4\x80\x15a\x0E\x9FW__\xFD[Pa\x0F$a\x0E\xAE6`\x04aI7V[`\x17` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x84\x01T`\x04\x85\x01T`\x05\x86\x01T`\x06\x87\x01T`\x07\x88\x01T`\x08\x90\x98\x01T\x96\x97\x95\x96\x94\x95`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x95\x85\x85\x16\x95t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x95\x04`\xFF\x16\x94\x93\x84\x16\x93\x90\x92\x16\x91\x8AV[`@\x80Q\x9A\x8BR` \x8B\x01\x99\x90\x99R\x97\x89\x01\x96\x90\x96R`\x01`\x01`\xA0\x1B\x03\x94\x85\x16``\x89\x01R\x92\x84\x16`\x80\x88\x01R\x90\x15\x15`\xA0\x87\x01R\x82\x16`\xC0\x86\x01R\x16`\xE0\x84\x01Ra\x01\0\x83\x01Ra\x01 \x82\x01Ra\x01@\x01a\x04\xE6V[4\x80\x15a\x0F\x87W__\xFD[Pa\x04\xDAa\x0F\x966`\x04aI7V[`\x13` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[4\x80\x15a\x0F\xB5W__\xFD[Pa\x04\xFF`\x08T\x81V[4\x80\x15a\x0F\xCAW__\xFD[Pa\x05,a\x0F\xD96`\x04aR\tV[a-\x1AV[4\x80\x15a\x0F\xE9W__\xFD[Pa\x0F$a\x0F\xF86`\x04aI7V[_\x90\x81R`\x17` R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x84\x01T`\x04\x85\x01T`\x05\x86\x01T`\x06\x87\x01T`\x07\x88\x01T`\x08\x90\x98\x01T\x96\x98\x95\x97\x94\x96`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x96\x85\x85\x16\x96t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x95\x04`\xFF\x16\x95\x93\x84\x16\x94\x93\x90\x92\x16\x92\x91V[4\x80\x15a\x10zW__\xFD[Pa\x05,a\x10\x896`\x04aQ\xD3V[a1\x05V[4\x80\x15a\x10\x99W__\xFD[Pa\tZa1\x10V[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x7FZ\x05\x18\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\x80a\x10\xF7WPa\x10\xF7\x82a1\x1CV[\x92\x91PPV[a\x11&\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x83\x81R`\x13` R`@\x90 T\x83\x90`\xFF\x16a\x11bW`@Qc>0\x8B\xC7`\xE1\x1B\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xFD[Pa\x11n\x81\x84\x84a\x17=V[a\x11\xA4W`@Q\x7F=\xD1\xB3\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x90 a\x11\xD0\x90\x83a1\xBCV[P`@\x80Q\x84\x81R`\x01`\x01`\xA0\x1B\x03\x80\x85\x16` \x83\x01R\x83\x16\x91\x81\x01\x91\x90\x91R\x7F\xA6\x8C\x84\xBF\x08Xq\xBE5=\xFF\xA2\xCF\x1D\x89\x8B\x86OK\xFE\xC8\xD7\x962h'{e`\x9F\xC8\x8E\x90``\x01[`@Q\x80\x91\x03\x90\xA1PPPV[``\x80_\x850\x86\x86F`@Q` \x01a\x12A\x95\x94\x93\x92\x91\x90aR\x91V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R`\x06Tc\xEA\xE1\xE1[`\xE0\x1B\x83R\x90\x92P_\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xEA\xE1\xE1[\x90a\x12\x84\x90\x85\x90`\x04\x01aI|V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12\x9EW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x12\xC5\x91\x90\x81\x01\x90aS\x06V[\x91\x97\x91\x96P\x90\x94PPPPPV[a\x12\xDBa1\xD0V[_\x81\x81R`\x12` R`@\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x13\x12W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x13<W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\n\x81\x01T`\xFF\x16\x15a\x13bW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x81R`\x18` R`@\x90 T\x15a\x13\xA7W`@Q\x7F\x08\xC6+\xAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x81R`\x18` \x90\x81R`@\x91\x82\x90 B\x90\x81\x90U\x91Q\x91\x82R3\x91\x84\x91\x7F-!\xC8P[H\xB0\x8C\xF1x\xA2\r*g\x01y\xE2l\xFB\xB4\x9F\xFC\xFFe\x1629R\x15\xB6\xAF\xB8\x91\x01`@Q\x80\x91\x03\x90\xA3Pa\x13\xFB`\x01_UV[PV[b\x01Q\x80\x83\x10\x15a\x14;W`@Q\x7F\xE1\x19\xBC\xF1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7Fchange-cancellation-window\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta\x14\x83\x90aS_V[\x91\x82\x90UP\x90P_a\x14\x96\x83\x87\x84a*\xE7V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a\x14\xCC\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14\xE7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x15\x0B\x91\x90aS\xBBV[a\x15(W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x08\x86\x90U`@Q\x86\x81R\x7FM\x82\x12\xC5V/\xD1\xDDk\xA9$\x03\xEF\xC1\x8C\xA2\x1C\xC3\xF3\xAC\0i\xFFC\x95e\x0B\xD2\xA4a:R\x90` \x01[`@Q\x80\x91\x03\x90\xA1PPPPPPV[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`@\x90 `\x01\x01Ta\x15\xA2\x81a1\xB2V[a\x15\xAC\x83\x83a2\x11V[PPPPV[a\x15\xBC\x82\x82a2fV[PPV[a\x16>`@Q\x80a\x01\x80\x01`@R\x80_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x15\x15\x81R` \x01_\x81RP\x90V[P_\x90\x81R`\x12` \x90\x81R`@\x91\x82\x90 \x82Qa\x01\x80\x81\x01\x84R\x81T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R`\x01\x83\x01T\x81\x16\x93\x82\x01\x93\x90\x93R`\x02\x82\x01T\x83\x16\x93\x81\x01\x93\x90\x93R`\x03\x81\x01T\x90\x91\x16``\x83\x01R`\x04\x81\x01T`\x80\x83\x01R`\x05\x81\x01T`\xA0\x83\x01R`\x06\x81\x01T`\xC0\x83\x01R`\x07\x81\x01T`\xE0\x83\x01R`\x08\x81\x01Ta\x01\0\x83\x01R`\t\x81\x01Ta\x01 \x83\x01R`\n\x81\x01T`\xFF\x16\x15\x15a\x01@\x83\x01R`\x0B\x01Ta\x01`\x82\x01R\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x163\x14a\x17.W`@Q\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x178\x82\x82a4\xAFV[PPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 a\x17i\x90\x83a4\xFBV[\x90P[\x93\x92PPPV[a\x17\x9C\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[a\x17\xA4a1\xD0V[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x15` R`@\x90 T\x80a\x17\xDAW`@Qc\x1F* \x05`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x81\x81R`\x15` R`@\x81 Ua\x17\xFD\x90\x83\x83a5\x1CV[\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x7F~\x92F\xBB\x8D\xF4\xF6@\x94\xB3\x8F\xB7\x19\xD5=J\xCA\x12\xA4ZQ\x9E\x14Y\xFD\t\x9F\xA8\xC1}\xD3\xB0\x83`@Qa\x18B\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA3Pa\x15\xBC`\x01_UV[a\x18}\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x81\x81R`\x13` R`@\x90\x81\x90 \x80T`\xFF\x19\x16`\x01\x17\x90UQ\x7F\x04{&h\xFFTJ\x8B\xBF0\xBD{\xA3\xE7T\x86\xBA\xA0\x1A\x04\xBA\xDFS\x86\xB6\xC3\xBC\x9A}\xA4\xD6c\x90a\x18\xC7\x90\x83\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA1PV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x84\x84R\x90\x91R\x90 ``\x90a\x17l\x90a5\x90V[a\x19\x08a1\xD0V[_\x83\x81R`\x12` R`@\x90 `\n\x81\x01T`\xFF\x16\x15a\x19;W`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05\x81\x01TF\x81\x81\x14a\x19\x83W`@Q\x7FtJ\x14\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x11YV[PP_a\x19\x90\x85\x87a'\x0CV[`\tT`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a\x19\xC6\x90\x84\x90\x88\x90\x88\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x19\xE1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1A\x05\x91\x90aS\xBBV[a\x1A\"W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x1A-`\x0E\x86a5\x9CV[Pa\x1A9`\x0C\x86a5\xA7V[P`\n\x82\x01\x80T`\xFF\x19\x16`\x01\x17\x90U`\x08\x82\x01T`\x04\x83\x01T_\x91a\x1A^\x91aS\xD6V[`\x02\x84\x01T\x90\x91Pa\x1Az\x90`\x01`\x01`\xA0\x1B\x03\x16\x88\x83a5\x1CV[`@Q\x86\x90\x7F\xA8\xEE\x08\x1F]\xF0;\xA0\x02U(\x0Cx\x1E\xD6\xA1\xA6|\x97\x02P\xE3ho\x95\x8C\x19\xAC\xCB\x08\xD4\x80\x90_\x90\xA2PPPa\x15\xAC`\x01_UV[a\x1A\xB8a5\xB2V[a\x1A\xC1\x82a6\x82V[a\x15\xBC\x82\x82a6\xBBV[``\x80_\x880\x89\x89\x89\x89\x89F`@Q` \x01a\x1A\xEE\x98\x97\x96\x95\x94\x93\x92\x91\x90aS\xE9V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R`\x06Tc\xEA\xE1\xE1[`\xE0\x1B\x83R\x90\x92P_\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xEA\xE1\xE1[\x90a\x1B1\x90\x85\x90`\x04\x01aI|V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1BKW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x1Br\x91\x90\x81\x01\x90aS\x06V[\x91\x9A\x91\x99P\x90\x97PPPPPPPPV[_a\x1B\x8Ca7\xBCV[P\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\x90V[``a\x1B\xBD`\x10a5\x90V[\x90P\x90V[a\x1B\xEB\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x81\x81R`\x13` R`@\x90\x81\x90 \x80T`\xFF\x19\x16\x90UQ\x7F\xF0\x7FBi\x1C\x97\x8BRCi\xCF(\x93\xA7\xCA1\xFF@\x8EI\xE0\x86(n\x9C\xAE\x92\r\xDF\x94\xC1\x19\x90a\x18\xC7\x90\x83\x81R` \x01\x90V[a\x1C:a1\xD0V[_\x82\x81R`\x12` R`@\x90 `\n\x81\x01T`\xFF\x16\x15a\x1CmW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x1C\x97W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x08\x81\x01T\x82\x90\x80\x82\x11a\x1C\xE0W`@Q\x7F\x1B\x97\xBD*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x11YV[PPa\x1D\r30\x83`\x08\x01T\x85a\x1C\xF7\x91\x90aT]V[`\x02\x85\x01T`\x01`\x01`\xA0\x1B\x03\x16\x92\x91\x90a8\x1EV[`\x08\x81\x01\x82\x90U`@Q\x83\x90\x7F*3\"\\\x18ty9\xDC\xF3\xB2\xBD1\x83\xBD5*&\x18\xE33\xAE5j\xD75.\x80Eq\x90\x93\x90_\x90\xA2Pa\x15\xBC`\x01_UV[___a'\x10`\x07T\x85a\x1D\\\x91\x90aTpV[a\x1Df\x91\x90aT\x87V[\x90P\x80a\x1Ds\x81\x86aT]V[\x92P\x92PP\x91P\x91V[a\x1D\x85a8WV[V[``a\x1B\xBD`\x0Ca5\x90V[_\x82\x81R\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0` \x81\x90R`@\x82 a\x1D\xCB\x90\x84a:\xFFV[\x94\x93PPPPV[a\x1D\xFC\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x83\x81R`\x13` R`@\x90 T\x83\x90`\xFF\x16a\x1E/W`@Qc>0\x8B\xC7`\xE1\x1B\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x90 a\x1E\\\x90\x83a4\xFBV[\x15a\x1E\x93W`@Q\x7F\x80\x0E\xF1\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x90 a\x1E\xBF\x90\x83a;\nV[P`@\x80Q\x84\x81R`\x01`\x01`\xA0\x1B\x03\x80\x85\x16` \x83\x01R\x83\x16\x91\x81\x01\x91\x90\x91R~\xF6\xB2v\xAE\xBF\xC1c\xC3djc\xA0(o\x84_\xDD-\xF5k\xE9\x1Ba\xB6 D\x06|\xE8I\xA4\x90``\x01a\x12\x17V[a\x178\x83\x83\x83a;\x1EV[_a\x1F\x1Da1\xD0V[_\x85\x11a\x1F=W`@Qc\x1F* \x05`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x1FdW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x81R`\x13` R`@\x90 T\x83\x90`\xFF\x16a\x1F\x97W`@Qc>0\x8B\xC7`\xE1\x1B\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[Pa\x1F\xA3\x87\x84\x88a\x17=V[a\x1F\xD9W`@Q\x7F=\xD1\xB3\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[__a\x1F\xE4\x87a\x1DHV[\x91P\x91P_\x86\x11a !W`@Q\x7Fs/\x94\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x89\x16_\x90\x81R`\x15` R`@\x81 \x80T\x84\x92\x90a H\x90\x84\x90aS\xD6V[\x92PP\x81\x90UP_`\x01_\x81Ta ^\x90aS_V[\x91\x82\x90UP_\x81\x81R`\x16` R`@\x81 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90U\x90\x91Pa \x93\x8B\x8B\x85\x87\x8C\x8C\x8C\x89a\"\x85V[\x90Pa \x9E\x81a+GV[\x94Pa \xAA\x85\x82a<}V[a \xCB30a \xB9\x8B\x8DaS\xD6V[`\x01`\x01`\xA0\x1B\x03\x8F\x16\x92\x91\x90a8\x1EV[\x86F`@Q\x87\x90\x7F\xE2\xF0\x16\x0F\xBEw\x9A\xBB$bv\xD4\x9D\xAC\x0C\xB9|\x86\xDF|\xB7*Q\x0B\xB9\xCF!Ho\\\x82\xAF\x90_\x90\xA4PPPPa!\x04`\x01_UV[\x96\x95PPPPPPV[_\x81\x81R\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0` \x81\x90R`@\x90\x91 ``\x91\x90a\x17l\x90a5\x90V[``a\x1B\xBD`\x0Ea5\x90V[`@\x80Q\x80\x82\x01\x90\x91R`\x05\x81R\x7F1.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q` \x01a!\x9A\x91\x90aT\xBDV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x86`\x01`\x01`\xA0\x1B\x03\x16c\r\x8En,`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\xEBW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\"\x12\x91\x90\x81\x01\x90aS\x06V[`@Q` \x01a\"\"\x91\x90aT\xBDV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x03a\"oW`@Q\x7F\x15r$\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\"}\x86\x86\x86\x86\x86\x86a=ZV[PPPPPPV[a#\x03`@Q\x80a\x01\x80\x01`@R\x80_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x15\x15\x81R` \x01_\x81RP\x90V[`@Q\x80a\x01\x80\x01`@R\x803`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x89`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x88\x81R` \x01a#XF\x90V[\x81R` \x01\x85\x81R` \x01\x87\x81R` \x01\x86\x81R` \x01\x83\x81R` \x01_\x15\x15\x81R` \x01B\x81RP\x90P\x98\x97PPPPPPPPV[a#\xB8\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[a\x13\x88\x80\x82\x11\x15a#\xF8W`@Q\x7FH\xE48\x9E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P_\x81\x11a$2W`@Q\x7F\x8B\xFF\x87\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x81\x90U`@Q\x81\x81R\x7F\x85=\xD1p\xF80k\xB1\xEE\xB2jE\xF3=8\x94qI\xFD\x8C\xFF\xED!\xBE\x04U:U\xA4Z{n\x90` \x01a\x18\xC7V[a$oa1\xD0V[_\x82\x81R`\x12` R`@\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a$\xA6W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\n\x81\x01T`\xFF\x16\x15a$\xCCW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x81R`\x18` R`@\x90 Ta%\x10W`@Q\x7F\x16\r!\x8E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x08T_\x84\x81R`\x18` R`@\x81 T\x90\x91a%,\x91aS\xD6V[\x90P\x80B\x10\x15a%hW`@Q\x7F\"4\x18\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x83\x16a%\x8FW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x82\x01T`\x02\x83\x01T`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x15` R`@\x90 T\x10\x15a%\xE8W`@Q\x7F\xD0\xFC\xC8Q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x82\x01T`\x02\x83\x01T`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x15` R`@\x81 \x80T\x90\x91\x90a&\x18\x90\x84\x90aT]V[\x90\x91UPP`\n\x82\x01\x80T`\xFF\x19\x16`\x01\x17\x90Ua&7`\x10\x85a5\x9CV[Pa&C`\x0C\x85a5\xA7V[P_\x82`\x08\x01T\x83`\x07\x01T\x84`\x04\x01Ta&^\x91\x90aS\xD6V[a&h\x91\x90aS\xD6V[`\x02\x84\x01T\x90\x91Pa&\x84\x90`\x01`\x01`\xA0\x1B\x03\x16\x85\x83a5\x1CV[\x82T`@Q\x82\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x92\x16\x90\x87\x90\x7F\xBD;\xE8\x9Fl\xA5F\xF0+g\xDD\xD1\x93\xD4\xF0\xE6OX\x0F<wn\x94.w\xA4P\x93\xBD\x16\xDA\x0C\x90` \x01`@Q\x80\x91\x03\x90\xA4PPPa\x15\xBC`\x01_UV[_\x81\x81R\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0` \x81\x90R`@\x82 a\x17l\x90a?\xCEV[``\x80`\x01`\x01`\xA0\x1B\x03\x83\x16a'6W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'@\x85a\x15\xC0V[\x90P\x83\x81_\x01Q\x82` \x01Q\x83`@\x01Q\x84``\x01Q\x85`\x80\x01Q\x86`\xA0\x01Q\x87`\xC0\x01Q\x88a\x01 \x01Q`@Q` \x01a'\xD4\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16`@\x88\x01R\x93\x87\x16``\x87\x01R\x91\x90\x95\x16`\x80\x85\x01R`\xA0\x84\x01\x94\x90\x94R`\xC0\x83\x01\x93\x90\x93R`\xE0\x82\x01\x92\x90\x92Ra\x01\0\x81\x01\x91\x90\x91Ra\x01 \x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R`\tTc\xEA\xE1\xE1[`\xE0\x1B\x83R\x90\x94P`\x01`\x01`\xA0\x1B\x03\x16\x90c\xEA\xE1\xE1[\x90a(\x13\x90\x86\x90`\x04\x01aI|V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a(-W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra(T\x91\x90\x81\x01\x90aS\x06V[\x91PP\x92P\x92\x90PV[_a(ga?\xD7V[\x80T\x90\x91P`\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x16\x15\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x81\x15\x80\x15a(\x93WP\x82[\x90P_\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01\x14\x80\x15a(\xAFWP0;\x15[\x90P\x81\x15\x80\x15a(\xBDWP\x80\x15[\x15a(\xF4W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x84T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16`\x01\x17\x85U\x83\x15a)?W\x84Th\xFF\0\0\0\0\0\0\0\0\x19\x16h\x01\0\0\0\0\0\0\0\0\x17\x85U[a)Ga?\xFFV[a)Oa?\xFFV[a)\\\x87b\x02\xA3\0a@\x07V[_\x86\x11\x80\x15a)mWPa\x13\x88\x86\x11\x15[a)\xA3W`@Q\x7F\x8B\xFF\x87\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x88\x16a)\xCAW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a)\xF4\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17u\x8Aa2\x11V[a**W`@Q\x7FX\x9E\xFBP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a*4_\x8Aa2\x11V[a*jW`@Q\x7FX\x9E\xFBP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x86\x90U`\t\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x8A\x16\x17\x90Ub\x01Q\x80`\x08U\x83\x15a*\xDCW\x84Th\xFF\0\0\0\0\0\0\0\0\x19\x16\x85U`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPPPPPV[``\x80_\x850\x86\x86F`@Q` \x01a\x12A\x95\x94\x93\x92\x91\x90aT\xC8V[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`@\x90 `\x01\x01Ta+=\x81a1\xB2V[a\x15\xAC\x83\x83a4\xAFV[_\x81_\x01Q\x82` \x01Q\x83`@\x01Q\x84``\x01Q\x85`\x80\x01Qa+gF\x90V[`\xC0\x80\x89\x01Qa\x01 \x80\x8B\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x9B\x8C\x16` \x82\x01R\x99\x8B\x16\x90\x8A\x01R\x96\x89\x16``\x89\x01R\x97\x90\x94\x16`\x80\x87\x01R`\xA0\x86\x01\x92\x90\x92R\x90\x84\x01R`\xE0\x83\x01Ra\x01\0\x82\x01R\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x83\x16a+\xFCW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80``\x01`@R\x80`!\x81R` \x01aW\x85`!\x919\x90P_`\x01_\x81Ta,'\x90aS_V[\x91\x82\x90UP\x90P_a,:\x83\x87\x84a\x12$V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a,p\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a,\x8BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a,\xAF\x91\x90aS\xBBV[a,\xCCW`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\t\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x88\x16\x90\x81\x17\x90\x91U`@Q\x7F\xC3\x7F\xCA\xD36t%\x1B\xAB\xA1\xCB\xC1k.\x8E8\x83\xFF%\xE6\x10Ys\xBCz\x7F\x9B\xD7\xFA\xFC!\x99\x90_\x90\xA2PPPPPPV[a-\"a1\xD0V[_\x88\x81R`\x17` R`@\x90 `\x04\x01Tt\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x15a-lW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x85\x16\x15\x80\x15\x90a-\x8CWP`\x01`\x01`\xA0\x1B\x03\x84\x16\x15\x15[\x80\x15a-\xA0WP`\x01`\x01`\xA0\x1B\x03\x87\x16\x15\x15[\x80\x15a-\xB4WP`\x01`\x01`\xA0\x1B\x03\x86\x16\x15\x15[a-\xEAW`@Q\x7F)[\xA2\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x89\x16a.\x11W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x11a.1W`@Qc\x1F* \x05`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81F\x81\x81\x03a.uW`@Q\x7F\x9C\x8D\x8D\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x11YV[PP\x86\x86\x86\x86\x86\x86a.\x84F\x90V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x98\x89\x16` \x82\x01R\x96\x88\x16\x90\x87\x01R\x93\x86\x16``\x86\x01R\x94\x90\x91\x16`\x80\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01\x92\x90\x92R`\xE0\x81\x01\x91\x90\x91Ra\x01\0\x81\x01\x82\x90Ra\x01 \x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x88\x14a/\x1FW`@Q\x7F\xC4\xFE\xC7\xE0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a/*`\n\x89a5\x9CV[Pa/@`\x01`\x01`\xA0\x1B\x03\x85\x163\x88\x86a8\x1EV[`@Q\x80a\x01@\x01`@R\x80\x89\x81R` \x01\x83\x81R` \x01a/_F\x90V[\x81R` \x01\x86`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01`\x01\x15\x15\x81R` \x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x84\x81R` \x01B\x81RP`\x17_\x8A\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01U` \x82\x01Q\x81`\x01\x01U`@\x82\x01Q\x81`\x02\x01U``\x82\x01Q\x81`\x03\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\x80\x82\x01Q\x81`\x04\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\xA0\x82\x01Q\x81`\x04\x01`\x14a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP`\xC0\x82\x01Q\x81`\x05\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\xE0\x82\x01Q\x81`\x06\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UPa\x01\0\x82\x01Q\x81`\x07\x01Ua\x01 \x82\x01Q\x81`\x08\x01U\x90PPa0\xD0F\x90V[`@Q\x83\x90\x8A\x90\x7FX\x19\xA5\xECq\xA5f\x82\xE3\xE8\xA4l@9L\x82\xDE\x95\xE5\n\x8DJ\xAC|~ 9\xD8?\xEE\xC1t\x90_\x90\xA4a*\xDC`\x01_UV[a\x178\x83\x83\x83a@\x99V[``a\x1B\xBD`\na5\x90V[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\x80a\x10\xF7WP\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x14a\x10\xF7V[a\x13\xFB\x813aA\xDEV[_a\x17l\x83`\x01`\x01`\xA0\x1B\x03\x84\x16aBjV[`\x02_T\x03a2\x0BW`@Q\x7F>\xE5\xAE\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_UV[_\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0\x81a2>\x85\x85aCMV[\x90P\x80\x15a\x1D\xCBW_\x85\x81R` \x83\x90R`@\x90 a2]\x90\x85a;\nV[P\x94\x93PPPPV[`\x04TB\x81\x11a2\xA5W`@Q\x7F\xB1\x9F\xE4X\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P_`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01\x7Fcancel\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta2\xEE\x90aS_V[\x91\x82\x90UP`\x02T`\x03\x80T\x92\x93P_\x92a3\xA2\x92\x86\x92`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91\x82\x91\x90a3\x1D\x90aU\x07V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta3I\x90aU\x07V[\x80\x15a3\x94W\x80`\x1F\x10a3kWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a3\x94V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a3wW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP`\x04T\x87a\x1A\xCBV[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a3\xD8\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a3\xF3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a4\x17\x91\x90aS\xBBV[a44W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x90\x91U_`\x04\x81\x90U`@\x80Q` \x81\x01\x90\x91R\x90\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90`\x03\x90a4s\x90\x82aU\x8AV[P`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F1\x98\xDC\x80$\x9F\xCF\xED\xBD\r\x06\xE1\xFFI\xA7iZQ\xB0\x06Y#(\xCE\x0B\x12|\xDE\xABw\xE96\x90_\x90\xA2PPPPPPV[_\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0\x81a4\xDC\x85\x85aD\x10V[\x90P\x80\x15a\x1D\xCBW_\x85\x81R` \x83\x90R`@\x90 a2]\x90\x85a1\xBCV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x01\x83\x01` R`@\x81 T\x15\x15a\x17lV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x83\x01R`D\x82\x01\x83\x90Ra\x178\x91\x85\x91\x82\x16\x90c\xA9\x05\x9C\xBB\x90`d\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\xE0\x1B` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPaD\xB4V[``_a\x17l\x83aE9V[_a\x17l\x83\x83aE\x92V[_a\x17l\x83\x83aBjV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14\x80a6KWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16a6?\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x1D\x85W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[30\x14a\x13\xFBW`@Q\x7F\\\xB4\xA6\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\x01`\x01`\xA0\x1B\x03\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a7\x15WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra7\x12\x91\x81\x01\x90aVEV[`\x01[a7VW`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x11YV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\x81\x14a7\xB2W`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x11YV[a\x178\x83\x83aE\xDEV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x1D\x85W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R\x83\x81\x16`D\x83\x01R`d\x82\x01\x83\x90Ra\x15\xAC\x91\x86\x91\x82\x16\x90c#\xB8r\xDD\x90`\x84\x01a5IV[`\x02T`\x01`\x01`\xA0\x1B\x03\x16a8\x99W`@Q\x7FR\xC6P\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04TB\x81\x11\x15a8\xD9W`@Q\x7Fa\x81;\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P`\x02T`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91_\x91\x90a8\xF9\x90aU\x07V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta9%\x90aU\x07V[\x80\x15a9pW\x80`\x1F\x10a9GWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a9pV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a9SW\x82\x90\x03`\x1F\x16\x82\x01\x91[PP`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90UPP_`\x04\x81\x90U`@\x80Q` \x81\x01\x90\x91R\x90\x81R\x91\x92P`\x03\x91a9\xA9\x91P\x82aU\x8AV[P__0`\x01`\x01`\xA0\x1B\x03\x16cO\x1E\xF2\x86`\xE0\x1B\x85\x85`@Q`$\x01a9\xD1\x92\x91\x90aV\\V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qa:<\x91\x90aT\xBDV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a:uW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a:zV[``\x91P[P\x91P\x91P\x81a:\xC6W\x80Q\x15a:\x94W\x80Q\x80` \x83\x01\xFD[`@Q\x7FU)\x9BI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q`\x01`\x01`\xA0\x1B\x03\x85\x16\x90\x7F\xFDZ\x9A\xE7\xC7<\x11\xFD\xE8m\xD6\x17\x04\xE97\xA0L\x99\xE7\xEE\xF6h\x05\x0FhZ\xAB\xC5\xD8\xA6\xB2\xE4\x90_\x90\xA2PPPPV[_a\x17l\x83\x83aF3V[_a\x17l\x83`\x01`\x01`\xA0\x1B\x03\x84\x16aE\x92V[b\x02\xA3\0\x83\x10\x15a;[W`@Q\x7Fe\xE1\xB9\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01\x7Fchange-upgrade-delay\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta;\xA3\x90aS_V[\x91\x82\x90UP\x90P_a;\xB6\x83\x87\x84a*\xE7V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a;\xEC\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a<\x07W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a<+\x91\x90aS\xBBV[a<HW`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05\x86\x90U`@Q\x86\x81R\x7F\xE2\x8FO\rq).L,\rdI\xFF\r\xDC\x83\x12\xFB\x9E\xEB`L\xA5`\xC4\xDB\xE1 \xFD\xF1\x07\xCE\x90` \x01a\x15YV[_\x82\x81R`\x12` \x90\x81R`@\x91\x82\x90 \x83Q\x81T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x83U\x92\x85\x01Q`\x01\x83\x01\x80T\x85\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x92\x84\x01Q`\x02\x82\x01\x80T\x84\x16\x91\x85\x16\x91\x90\x91\x17\x90U``\x84\x01Q`\x03\x82\x01\x80T\x90\x93\x16\x93\x16\x92\x90\x92\x17\x90U`\x80\x82\x01Q`\x04\x82\x01U`\xA0\x82\x01Q`\x05\x82\x01U`\xC0\x82\x01Q`\x06\x82\x01U`\xE0\x82\x01Q`\x07\x82\x01Ua\x01\0\x82\x01Q`\x08\x82\x01Ua\x01 \x82\x01Q`\t\x82\x01Ua\x01@\x82\x01Q`\n\x82\x01\x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90Ua\x01`\x82\x01Q`\x0B\x90\x91\x01Ua\x178`\x0C\x83a5\x9CV[`\x01`\x01`\xA0\x1B\x03\x86\x16a=\x81W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02T`\x01`\x01`\xA0\x1B\x03\x80\x88\x16\x91\x16\x03a=\xC8W`@Q\x7F\x15r$\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05Ta=\xD5\x90BaS\xD6V[\x83\x10\x15`\x05T\x90a>\x15W`@Q\x7F\x0C\xD4\xE2\xD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P_`@Q\x80`@\x01`@R\x80`\x08\x81R` \x01\x7Fschedule\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta>^\x90aS_V[\x91\x90P\x81\x90U\x90P_a>\xC0\x83`\x02_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x8B\x8B\x8B\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x8D\x92P\x89\x91Pa\x1A\xCB\x90PV[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a>\xF6\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a?\x11W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a?5\x91\x90aS\xBBV[a?RW`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x8B\x16\x17\x90U`\x04\x86\x90U`\x03a?\x7F\x88\x8A\x83aV}V[P\x88`\x01`\x01`\xA0\x1B\x03\x16\x7F\xE1\0\x96'e>\xB4\x7F}\x0F;D5t\x9Fy\x84\xA8\x03\xC2\x1F\x84\xA0v\xCCM\xCB\x04\x12\xCF\x06o\x87`@Qa?\xBB\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA2PPPPPPPPPV[_a\x10\xF7\x82T\x90V[_\x80\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0a\x10\xF7V[a\x1D\x85aFYV[a@\x0FaFYV[`\x01`\x01`\xA0\x1B\x03\x82\x16a@6W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[b\x02\xA3\0\x81\x10\x15a@sW`@Q\x7Fe\xE1\xB9\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x06\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16\x92\x90\x92\x17\x90\x91U`\x05UV[`\x01`\x01`\xA0\x1B\x03\x83\x16a@\xC0W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80``\x01`@R\x80`%\x81R` \x01aW``%\x919\x90P_`\x01_\x81Ta@\xEB\x90aS_V[\x91\x82\x90UP\x90P_a@\xFE\x83\x87\x84a\x12$V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90aA4\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15aAOW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90aAs\x91\x90aS\xBBV[aA\x90W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x06\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x88\x16\x90\x81\x17\x90\x91U`@Q\x7Fx\xA7\xFA\xFF\xD4\x96g\xF6\xD2\xBC\x16\xFA,R\x87\x10\xC0\x9F\xC0\xAAs2Z?(\xE1a\xF8\xAE>\xF4\xA1\x90_\x90\xA2PPPPPPV[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x85\x16\x84R\x90\x91R\x90 T`\xFF\x16a\x15\xBCW`@Q\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x81\x01\x83\x90R`D\x01a\x11YV[_\x81\x81R`\x01\x83\x01` R`@\x81 T\x80\x15aCDW_aB\x8C`\x01\x83aT]V[\x85T\x90\x91P_\x90aB\x9F\x90`\x01\x90aT]V[\x90P\x80\x82\x14aB\xFEW_\x86_\x01\x82\x81T\x81\x10aB\xBDWaB\xBDaW7V[\x90_R` _ \x01T\x90P\x80\x87_\x01\x84\x81T\x81\x10aB\xDDWaB\xDDaW7V[_\x91\x82R` \x80\x83 \x90\x91\x01\x92\x90\x92U\x91\x82R`\x01\x88\x01\x90R`@\x90 \x83\x90U[\x85T\x86\x90\x80aC\x0FWaC\x0FaWKV[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90U\x85`\x01\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x90U`\x01\x93PPPPa\x10\xF7V[_\x91PPa\x10\xF7V[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x81\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x86\x16\x85R\x90\x91R\x82 T`\xFF\x16aCDW_\x84\x81R` \x82\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x87\x16\x84R\x90\x91R\x90 \x80T`\xFF\x19\x16`\x01\x17\x90UaC\xC63\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x85\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r`@Q`@Q\x80\x91\x03\x90\xA4`\x01\x91PPa\x10\xF7V[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x81\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x86\x16\x85R\x90\x91R\x82 T`\xFF\x16\x15aCDW_\x84\x81R` \x82\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x87\x16\x80\x85R\x92R\x80\x83 \x80T`\xFF\x19\x16\x90UQ3\x92\x87\x91\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x91\x90\xA4`\x01\x91PPa\x10\xF7V[__` _\x84Q` \x86\x01_\x88Z\xF1\x80aD\xD3W`@Q=_\x82>=\x81\xFD[PP_Q=\x91P\x81\x15aD\xEAW\x80`\x01\x14\x15aD\xF7V[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15a\x15\xACW`@Q\x7FRt\xAF\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\x11YV[``\x81_\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15aE\x86W` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11aErW[PPPPP\x90P\x91\x90PV[_\x81\x81R`\x01\x83\x01` R`@\x81 TaE\xD7WP\x81T`\x01\x81\x81\x01\x84U_\x84\x81R` \x80\x82 \x90\x93\x01\x84\x90U\x84T\x84\x82R\x82\x86\x01\x90\x93R`@\x90 \x91\x90\x91Ua\x10\xF7V[P_a\x10\xF7V[aE\xE7\x82aF\x97V[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90_\x90\xA2\x80Q\x15aF+Wa\x178\x82\x82aG&V[a\x15\xBCaG\x98V[_\x82_\x01\x82\x81T\x81\x10aFHWaFHaW7V[\x90_R` _ \x01T\x90P\x92\x91PPV[aFaaG\xD0V[a\x1D\x85W`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x01`\x01`\xA0\x1B\x03\x16;_\x03aF\xE5W`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x01a\x11YV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[``__\x84`\x01`\x01`\xA0\x1B\x03\x16\x84`@QaGB\x91\x90aT\xBDV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14aGzW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>aG\x7FV[``\x91P[P\x91P\x91PaG\x8F\x85\x83\x83aG\xEEV[\x95\x94PPPPPV[4\x15a\x1D\x85W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_aG\xD9a?\xD7V[Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x91\x90PV[``\x82aH\x03WaG\xFE\x82aHcV[a\x17lV[\x81Q\x15\x80\x15aH\x1AWP`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15aH\\W`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\x11YV[P\x80a\x17lV[\x80Q\x15aHrW\x80Q` \x82\x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_` \x82\x84\x03\x12\x15aH\xB4W__\xFD[\x815\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x81\x14a\x17lW__\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14aH\xF9W__\xFD[\x91\x90PV[___``\x84\x86\x03\x12\x15aI\x10W__\xFD[\x835\x92PaI ` \x85\x01aH\xE3V[\x91PaI.`@\x85\x01aH\xE3V[\x90P\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15aIGW__\xFD[P5\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x17l` \x83\x01\x84aINV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aI\xC6WaI\xC6aI\x8EV[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aI\xF5WaI\xF5aI\x8EV[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aJ\x16WaJ\x16aI\x8EV[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[_\x82`\x1F\x83\x01\x12aJ3W__\xFD[\x815` \x83\x01_aJKaJF\x84aI\xFDV[aI\xCCV[\x90P\x82\x81R\x85\x83\x83\x01\x11\x15aJ^W__\xFD[\x82\x82` \x83\x017_\x92\x81\x01` \x01\x92\x90\x92RP\x93\x92PPPV[___``\x84\x86\x03\x12\x15aJ\x8AW__\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aJ\xA0W__\xFD[aJ\xAC\x86\x82\x87\x01aJ$V[\x93PPaJ\xBB` \x85\x01aH\xE3V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`@\x81R_aJ\xDE`@\x83\x01\x85aINV[\x82\x81\x03` \x84\x01RaG\x8F\x81\x85aINV[__\x83`\x1F\x84\x01\x12aK\0W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aK\x17W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15aK.W__\xFD[\x92P\x92\x90PV[___`@\x84\x86\x03\x12\x15aKGW__\xFD[\x835\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aKdW__\xFD[aKp\x86\x82\x87\x01aJ\xF0V[\x94\x97\x90\x96P\x93\x94PPPPV[__`@\x83\x85\x03\x12\x15aK\x8EW__\xFD[\x825\x91PaK\x9E` \x84\x01aH\xE3V[\x90P\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15aK\xB8W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aK\xCEW__\xFD[aK\xDA\x85\x82\x86\x01aJ\xF0V[\x90\x96\x90\x95P\x93PPPPV[\x81Q`\x01`\x01`\xA0\x1B\x03\x16\x81Ra\x01\x80\x81\x01` \x83\x01QaL\x12` \x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`@\x83\x01QaL-`@\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P``\x83\x01QaLH``\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\x80\x83\x01Q`\x80\x83\x01R`\xA0\x83\x01Q`\xA0\x83\x01R`\xC0\x83\x01Q`\xC0\x83\x01R`\xE0\x83\x01Q`\xE0\x83\x01Ra\x01\0\x83\x01Qa\x01\0\x83\x01Ra\x01 \x83\x01Qa\x01 \x83\x01Ra\x01@\x83\x01QaL\x9Ea\x01@\x84\x01\x82\x15\x15\x90RV[Pa\x01`\x92\x83\x01Q\x91\x90\x92\x01R\x90V[___``\x84\x86\x03\x12\x15aL\xC0W__\xFD[aL\xC9\x84aH\xE3V[\x92P` \x84\x015\x91PaI.`@\x85\x01aH\xE3V[__`@\x83\x85\x03\x12\x15aL\xEFW__\xFD[aL\xF8\x83aH\xE3V[\x91PaK\x9E` \x84\x01aH\xE3V[__`@\x83\x85\x03\x12\x15aM\x17W__\xFD[aM \x83aH\xE3V[\x94` \x93\x90\x93\x015\x93PPPV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15aMnW\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aMGV[P\x90\x95\x94PPPPPV[____``\x85\x87\x03\x12\x15aM\x8CW__\xFD[aM\x95\x85aH\xE3V[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aM\xB7W__\xFD[aM\xC3\x87\x82\x88\x01aJ\xF0V[\x95\x98\x94\x97P\x95PPPPV[__`@\x83\x85\x03\x12\x15aM\xE0W__\xFD[aM\xE9\x83aH\xE3V[\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aN\x04W__\xFD[a(T\x85\x82\x86\x01aJ$V[______`\xC0\x87\x89\x03\x12\x15aN%W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aN;W__\xFD[aNG\x89\x82\x8A\x01aJ$V[\x96PPaNV` \x88\x01aH\xE3V[\x94PaNd`@\x88\x01aH\xE3V[\x93P``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aN\x7FW__\xFD[aN\x8B\x89\x82\x8A\x01aJ$V[\x96\x99\x95\x98P\x93\x96`\x80\x81\x015\x95`\xA0\x90\x91\x015\x94P\x92PPPV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15aMnW\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aN\xBFV[_` \x82\x84\x03\x12\x15aN\xEDW__\xFD[a\x17l\x82aH\xE3V[__`@\x83\x85\x03\x12\x15aO\x07W__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[______`\xC0\x87\x89\x03\x12\x15aO+W__\xFD[aO4\x87aH\xE3V[\x95PaOB` \x88\x01aH\xE3V[\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015\x91PaOe`\xA0\x88\x01aH\xE3V[\x90P\x92\x95P\x92\x95P\x92\x95V[______`\x80\x87\x89\x03\x12\x15aO\x86W__\xFD[aO\x8F\x87aH\xE3V[\x95P` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aO\xAAW__\xFD[aO\xB6\x89\x82\x8A\x01aJ\xF0V[\x90\x96P\x94PP`@\x87\x015\x92P``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aO\xDCW__\xFD[aO\xE8\x89\x82\x8A\x01aJ\xF0V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[________a\x01\0\x89\x8B\x03\x12\x15aP\x12W__\xFD[aP\x1B\x89aH\xE3V[\x97PaP)` \x8A\x01aH\xE3V[\x96P`@\x89\x015\x95P``\x89\x015\x94P`\x80\x89\x015\x93P`\xA0\x89\x015\x92PaPS`\xC0\x8A\x01aH\xE3V[\x97\x9A\x96\x99P\x94\x97\x93\x96\x92\x95\x91\x94P\x91\x92`\xE0\x015\x91PV[____`\x80\x85\x87\x03\x12\x15aP~W__\xFD[aP\x87\x85aH\xE3V[\x93PaP\x95` \x86\x01aH\xE3V[\x92PaP\xA3`@\x86\x01aH\xE3V[\x93\x96\x92\x95P\x92\x93``\x015\x92PPV[___``\x84\x86\x03\x12\x15aP\xC5W__\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aP\xDBW__\xFD[aP\xE7\x86\x82\x87\x01aJ$V[\x96` \x86\x015\x96P`@\x90\x95\x015\x94\x93PPPPV[\x80\x15\x15\x81\x14a\x13\xFBW__\xFD[\x805aH\xF9\x81aP\xFDV[_a\x01\x80\x82\x84\x03\x12\x80\x15aQ'W__\xFD[PaQ0aI\xA2V[aQ9\x83aH\xE3V[\x81RaQG` \x84\x01aH\xE3V[` \x82\x01RaQX`@\x84\x01aH\xE3V[`@\x82\x01RaQi``\x84\x01aH\xE3V[``\x82\x01R`\x80\x83\x81\x015\x90\x82\x01R`\xA0\x80\x84\x015\x90\x82\x01R`\xC0\x80\x84\x015\x90\x82\x01R`\xE0\x80\x84\x015\x90\x82\x01Ra\x01\0\x80\x84\x015\x90\x82\x01Ra\x01 \x80\x84\x015\x90\x82\x01RaQ\xB9a\x01@\x84\x01aQ\nV[a\x01@\x82\x01Ra\x01`\x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[___`@\x84\x86\x03\x12\x15aQ\xE5W__\xFD[aQ\xEE\x84aH\xE3V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aKdW__\xFD[_________a\x01 \x8A\x8C\x03\x12\x15aR\"W__\xFD[aR+\x8AaH\xE3V[\x98P` \x8A\x015\x97PaR@`@\x8B\x01aH\xE3V[\x96PaRN``\x8B\x01aH\xE3V[\x95PaR\\`\x80\x8B\x01aH\xE3V[\x94PaRj`\xA0\x8B\x01aH\xE3V[\x98\x9B\x97\x9AP\x95\x98\x94\x97\x93\x96\x93\x95PPPP`\xC0\x82\x015\x91`\xE0\x81\x015\x91a\x01\0\x90\x91\x015\x90V[`\xA0\x81R_aR\xA3`\xA0\x83\x01\x88aINV[`\x01`\x01`\xA0\x1B\x03\x96\x87\x16` \x84\x01R\x94\x90\x95\x16`@\x82\x01R``\x81\x01\x92\x90\x92R`\x80\x90\x91\x01R\x92\x91PPV[_aR\xDDaJF\x84aI\xFDV[\x90P\x82\x81R\x83\x83\x83\x01\x11\x15aR\xF0W__\xFD[\x82\x82` \x83\x01^_` \x84\x83\x01\x01R\x93\x92PPPV[_` \x82\x84\x03\x12\x15aS\x16W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aS,W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13aS<W__\xFD[a\x1D\xCB\x84\x82Q` \x84\x01aR\xD0V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_`\x01\x82\x01aSpWaSpaSKV[P`\x01\x01\x90V[`@\x81R_aS\x89`@\x83\x01\x86aINV[\x82\x81\x03` \x84\x01R\x83\x81R\x83\x85` \x83\x017_` \x85\x83\x01\x01R` `\x1F\x19`\x1F\x86\x01\x16\x82\x01\x01\x91PP\x94\x93PPPPV[_` \x82\x84\x03\x12\x15aS\xCBW__\xFD[\x81Qa\x17l\x81aP\xFDV[\x80\x82\x01\x80\x82\x11\x15a\x10\xF7Wa\x10\xF7aSKV[a\x01\0\x81R_aS\xFDa\x01\0\x83\x01\x8BaINV[`\x01`\x01`\xA0\x1B\x03\x8A\x16` \x84\x01R`\x01`\x01`\xA0\x1B\x03\x89\x16`@\x84\x01R`\x01`\x01`\xA0\x1B\x03\x88\x16``\x84\x01R\x82\x81\x03`\x80\x84\x01RaT<\x81\x88aINV[`\xA0\x84\x01\x96\x90\x96RPP`\xC0\x81\x01\x92\x90\x92R`\xE0\x90\x91\x01R\x95\x94PPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x10\xF7Wa\x10\xF7aSKV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x10\xF7Wa\x10\xF7aSKV[_\x82aT\xA1WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x17l\x82\x84aT\xA6V[`\xA0\x81R_aT\xDA`\xA0\x83\x01\x88aINV[\x90P`\x01`\x01`\xA0\x1B\x03\x86\x16` \x83\x01R\x84`@\x83\x01R\x83``\x83\x01R\x82`\x80\x83\x01R\x96\x95PPPPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80aU\x1BW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aU9WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x178W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15aUdWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15aU\x83W_\x81U`\x01\x01aUpV[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aU\xA4WaU\xA4aI\x8EV[aU\xB8\x81aU\xB2\x84TaU\x07V[\x84aU?V[` `\x1F\x82\x11`\x01\x81\x14aU\xEAW_\x83\x15aU\xD3WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84UaU\x83V[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15aV\x19W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01aU\xF9V[P\x84\x82\x10\x15aV6W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[_` \x82\x84\x03\x12\x15aVUW__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01R_a\x17i`@\x83\x01\x84aINV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x15aV\x95WaV\x95aI\x8EV[aV\xA9\x83aV\xA3\x83TaU\x07V[\x83aU?V[_`\x1F\x84\x11`\x01\x81\x14aV\xDAW_\x85\x15aV\xC3WP\x83\x82\x015[_\x19`\x03\x87\x90\x1B\x1C\x19\x16`\x01\x86\x90\x1B\x17\x83UaU\x83V[_\x83\x81R` \x81 `\x1F\x19\x87\x16\x91[\x82\x81\x10\x15aW\tW\x86\x85\x015\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01aV\xE9V[P\x86\x82\x10\x15aW%W_\x19`\xF8\x88`\x03\x1B\x16\x1C\x19\x84\x87\x015\x16\x81U[PP`\x01\x85`\x01\x1B\x01\x83UPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFEchange-contract-upgrade-bls-validatorchange-swap-request-bls-validator",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106104b7575f3560e01c80639193059c1161026b578063b444964c11610156578063daadfec3116100d1578063eb20fae211610087578063f16dea821161006d578063f16dea8214610fde578063f18637131461106f578063f84ae3a91461108e575f5ffd5b8063eb20fae214610faa578063f04cd27714610fbf575f5ffd5b8063df919813116100b7578063df91981314610e75578063e7b7ee9614610e94578063eb091ac614610f7c575f5ffd5b8063daadfec314610e37578063db65070d14610e56575f5ffd5b8063cf97ad3011610126578063d547741f1161010c578063d547741f14610dd8578063d55be8c614610df7578063daa4c66b14610e0c575f5ffd5b8063cf97ad3014610da4578063d320385914610db9575f5ffd5b8063b444964c14610d2a578063ca15c87314610d47578063ce12358014610d66578063cf756fdf14610d85575f5ffd5b8063a4c5a27a116101e6578063aa15e029116101b6578063adb610a31161019c578063adb610a314610cd7578063b073748c14610cec578063b21eac9e14610d0b575f5ffd5b8063aa15e02914610c7b578063ad3cb1cc14610c8f575f5ffd5b8063a4c5a27a14610c0b578063a9c9f21514610c28578063a9e3652014610c3d578063a9ee0fc214610c5c575f5ffd5b806399d6120e1161023b578063a24d346111610221578063a24d346114610bb9578063a3246ad314610bd8578063a36d15ec14610bf7575f5ffd5b806399d6120e14610b72578063a217fddf14610ba6575f5ffd5b80639193059c14610ab257806391d1485414610ad15780639695ec2114610b3457806398772ea214610b53575f5ffd5b80633d0aed50116103a55780635ed8b9d3116103205780637a1e1a05116102d65780637e896214116102bc5780637e89621414610a6b5780638886e50614610a7f5780639010d07c14610a93575f5ffd5b80637a1e1a0514610a185780637ae5162214610a37575f5ffd5b80636e3207a6116103065780636e3207a61461098657806375b238fc146109b157806377ca1d72146109e4575f5ffd5b80635ed8b9d3146109465780636370d65814610967575f5ffd5b80634f1ef286116103755780635153a4c31161035b5780635153a4c31461083857806352d1902d14610932578063564b81ef146106e2575f5ffd5b80634f1ef28614610806578063504da5a914610819575f5ffd5b80633d0aed501461077d57806344d1da8c1461079c57806348749d17146107bb5780634b918119146107e7575f5ffd5b806319d257bf116104355780633408e470116104055780633475bf8f116103eb5780633475bf8f1461071357806336568abe1461073f5780633ade90e91461075e575f5ffd5b80633408e470146106e257806334473af1146106f4575f5ffd5b806319d257bf14610638578063248a9ca3146106575780632a2d17bc146106a45780632f2ff15d146106c3575f5ffd5b80630d8e6e2c1161048a578063143490e111610470578063143490e1146105d757806315b17da4146105ec578063191fe1ed14610623575f5ffd5b80630d8e6e2c1461055c57806310ef2f5d146105aa575f5ffd5b806301ffc9a7146104bb578063027b7047146104ef57806303f37d3e1461050d57806307efe9301461052e575b5f5ffd5b3480156104c6575f5ffd5b506104da6104d53660046148a4565b6110a2565b60405190151581526020015b60405180910390f35b3480156104fa575f5ffd5b506005545b6040519081526020016104e6565b348015610518575f5ffd5b5061052c6105273660046148fe565b6110fd565b005b348015610539575f5ffd5b506104da610548366004614937565b5f9081526013602052604090205460ff1690565b348015610567575f5ffd5b5060408051808201909152600581527f312e302e3000000000000000000000000000000000000000000000000000000060208201525b6040516104e6919061497c565b3480156105b5575f5ffd5b506105c96105c4366004614a78565b611224565b6040516104e6929190614acc565b3480156105e2575f5ffd5b506104ff60055481565b3480156105f7575f5ffd5b5060065461060b906001600160a01b031681565b6040516001600160a01b0390911681526020016104e6565b34801561062e575f5ffd5b506104ff61271081565b348015610643575f5ffd5b5061052c610652366004614937565b6112d3565b348015610662575f5ffd5b506104ff610671366004614937565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b3480156106af575f5ffd5b5061052c6106be366004614b35565b6113fe565b3480156106ce575f5ffd5b5061052c6106dd366004614b7d565b611569565b3480156106ed575f5ffd5b50466104ff565b3480156106ff575f5ffd5b5061052c61070e366004614ba7565b6115b2565b34801561071e575f5ffd5b5061073261072d366004614937565b6115c0565b6040516104e69190614be6565b34801561074a575f5ffd5b5061052c610759366004614b7d565b6116ec565b348015610769575f5ffd5b506104da610778366004614cae565b61173d565b348015610788575f5ffd5b5061052c610797366004614cde565b611773565b3480156107a7575f5ffd5b5061052c6107b6366004614937565b611854565b3480156107c6575f5ffd5b506107da6107d5366004614d06565b6118d2565b6040516104e69190614d2e565b3480156107f2575f5ffd5b5061052c610801366004614d79565b611900565b61052c610814366004614dcf565b611ab0565b348015610824575f5ffd5b506105c9610833366004614e10565b611acb565b348015610843575f5ffd5b506108c5610852366004614937565b60126020525f9081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b909b01546001600160a01b039a8b169b998b169a98891699989097169795969495939492939192909160ff16908c565b604080516001600160a01b039d8e1681529b8d1660208d0152998c16998b0199909952999096166060890152608088019490945260a087019290925260c086015260e0850152610100840152610120830152911515610140820152610160810191909152610180016104e6565b34801561093d575f5ffd5b506104ff611b83565b348015610951575f5ffd5b5061095a611bb1565b6040516104e69190614ea6565b348015610972575f5ffd5b5061052c610981366004614937565b611bc2565b348015610991575f5ffd5b506104ff6109a0366004614edd565b60156020525f908152604090205481565b3480156109bc575f5ffd5b506104ff7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156109ef575f5ffd5b5061060b6109fe366004614937565b60166020525f90815260409020546001600160a01b031681565b348015610a23575f5ffd5b5061052c610a32366004614ef6565b611c32565b348015610a42575f5ffd5b50610a56610a51366004614937565b611d48565b604080519283526020830191909152016104e6565b348015610a76575f5ffd5b5061052c611d7d565b348015610a8a575f5ffd5b5061095a611d87565b348015610a9e575f5ffd5b5061060b610aad366004614ef6565b611d93565b348015610abd575f5ffd5b5060025461060b906001600160a01b031681565b348015610adc575f5ffd5b506104da610aeb366004614b7d565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b348015610b3f575f5ffd5b5061052c610b4e3660046148fe565b611dd3565b348015610b5e575f5ffd5b5061052c610b6d366004614b35565b611f09565b348015610b7d575f5ffd5b506104ff610b8c366004614edd565b6001600160a01b03165f9081526015602052604090205490565b348015610bb1575f5ffd5b506104ff5f81565b348015610bc4575f5ffd5b506104ff610bd3366004614f16565b611f14565b348015610be3575f5ffd5b506107da610bf2366004614937565b61210e565b348015610c02575f5ffd5b5061095a61214a565b348015610c16575f5ffd5b506006546001600160a01b031661060b565b348015610c33575f5ffd5b506104ff60045481565b348015610c48575f5ffd5b5061052c610c57366004614f71565b612156565b348015610c67575f5ffd5b50610732610c76366004614ffa565b612285565b348015610c86575f5ffd5b506007546104ff565b348015610c9a575f5ffd5b5061059d6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b348015610ce2575f5ffd5b506104ff60015481565b348015610cf7575f5ffd5b5061052c610d06366004614937565b61238f565b348015610d16575f5ffd5b5061052c610d25366004614b7d565b612467565b348015610d35575f5ffd5b506009546001600160a01b031661060b565b348015610d52575f5ffd5b506104ff610d61366004614937565b6126d5565b348015610d71575f5ffd5b506105c9610d80366004614b7d565b61270c565b348015610d90575f5ffd5b5061052c610d9f36600461506b565b61285e565b348015610daf575f5ffd5b506104ff60075481565b348015610dc4575f5ffd5b506105c9610dd33660046150b3565b612ae7565b348015610de3575f5ffd5b5061052c610df2366004614b7d565b612b04565b348015610e02575f5ffd5b506104ff61138881565b348015610e17575f5ffd5b506104ff610e26366004614937565b60186020525f908152604090205481565b348015610e42575f5ffd5b506104ff610e51366004615115565b612b47565b348015610e61575f5ffd5b5060095461060b906001600160a01b031681565b348015610e80575f5ffd5b5061052c610e8f3660046151d3565b612bd5565b348015610e9f575f5ffd5b50610f24610eae366004614937565b60176020525f90815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801549697959694956001600160a01b0394851695858516957401000000000000000000000000000000000000000090950460ff169493841693909216918a565b604080519a8b5260208b0199909952978901969096526001600160a01b039485166060890152928416608088015290151560a0870152821660c08601521660e0840152610100830152610120820152610140016104e6565b348015610f87575f5ffd5b506104da610f96366004614937565b60136020525f908152604090205460ff1681565b348015610fb5575f5ffd5b506104ff60085481565b348015610fca575f5ffd5b5061052c610fd9366004615209565b612d1a565b348015610fe9575f5ffd5b50610f24610ff8366004614937565b5f908152601760205260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801549698959794966001600160a01b0394851696858516967401000000000000000000000000000000000000000090950460ff169593841694939092169291565b34801561107a575f5ffd5b5061052c6110893660046151d3565b613105565b348015611099575f5ffd5b5061095a613110565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806110f757506110f78261311c565b92915050565b6111267fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f83815260136020526040902054839060ff1661116257604051633e308bc760e11b815260040161115991815260200190565b60405180910390fd5b5061116e81848461173d565b6111a4576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381165f90815260146020908152604080832086845290915290206111d090836131bc565b50604080518481526001600160a01b0380851660208301528316918101919091527fa68c84bf085871be353dffa2cf1d898b864f4bfec8d7963268277b65609fc88e906060015b60405180910390a1505050565b6060805f8530868646604051602001611241959493929190615291565b60408051601f198184030181529082905260065463eae1e15b60e01b83529092505f916001600160a01b039091169063eae1e15b9061128490859060040161497c565b5f60405180830381865afa15801561129e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526112c59190810190615306565b919791965090945050505050565b6112db6131d0565b5f81815260126020526040902080546001600160a01b0316331461131257604051630166d47f60e11b815260040160405180910390fd5b80546001600160a01b0316331461133c57604051630166d47f60e11b815260040160405180910390fd5b600a81015460ff161561136257604051634a4117f960e01b815260040160405180910390fd5b5f82815260186020526040902054156113a7576040517f08c62bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281526018602090815260409182902042908190559151918252339184917f2d21c8505b48b08cf178a20d2a670179e26cfbb49ffcff651632395215b6afb8910160405180910390a3506113fb60015f55565b50565b6201518083101561143b576040517fe119bcf100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6040518060400160405280601a81526020017f6368616e67652d63616e63656c6c6174696f6e2d77696e646f7700000000000081525090505f60015f81546114839061535f565b918290555090505f611496838784612ae7565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f59122906114cc90849089908990600401615377565b602060405180830381865afa1580156114e7573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061150b91906153bb565b61152857604051636925da7560e11b815260040160405180910390fd5b60088690556040518681527f4d8212c5562fd1dd6ba92403efc18ca21cc3f3ac0069ff4395650bd2a4613a52906020015b60405180910390a1505050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546115a2816131b2565b6115ac8383613211565b50505050565b6115bc8282613266565b5050565b61163e6040518061018001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f81525090565b505f9081526012602090815260409182902082516101808101845281546001600160a01b039081168252600183015481169382019390935260028201548316938101939093526003810154909116606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a81015460ff161515610140830152600b015461016082015290565b6001600160a01b038116331461172e576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61173882826134af565b505050565b6001600160a01b0383165f908152601460209081526040808320858452909152812061176990836134fb565b90505b9392505050565b61179c7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b6117a46131d0565b6001600160a01b0382165f90815260156020526040902054806117da57604051631f2a200560e01b815260040160405180910390fd5b6001600160a01b0383165f818152601560205260408120556117fd90838361351c565b816001600160a01b0316836001600160a01b03167f7e9246bb8df4f64094b38fb719d53d4aca12a45a519e1459fd099fa8c17dd3b08360405161184291815260200190565b60405180910390a3506115bc60015f55565b61187d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f8181526013602052604090819020805460ff19166001179055517f047b2668ff544a8bbf30bd7ba3e75486baa01a04badf5386b6c3bc9a7da4d663906118c79083815260200190565b60405180910390a150565b6001600160a01b0382165f908152601460209081526040808320848452909152902060609061176c90613590565b6119086131d0565b5f838152601260205260409020600a81015460ff161561193b57604051634a4117f960e01b815260040160405180910390fd5b600581015446818114611983576040517f744a148100000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401611159565b50505f611990858761270c565b6009546040516318fac89160e11b81529193506001600160a01b031691506331f59122906119c690849088908890600401615377565b602060405180830381865afa1580156119e1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0591906153bb565b611a2257604051636925da7560e11b815260040160405180910390fd5b611a2d600e8661359c565b50611a39600c866135a7565b50600a8201805460ff19166001179055600882015460048301545f91611a5e916153d6565b6002840154909150611a7a906001600160a01b0316888361351c565b60405186907fa8ee081f5df03ba00255280c781ed6a1a67c970250e3686f958c19accb08d480905f90a25050506115ac60015f55565b611ab86135b2565b611ac182613682565b6115bc82826136bb565b6060805f8830898989898946604051602001611aee9897969594939291906153e9565b60408051601f198184030181529082905260065463eae1e15b60e01b83529092505f916001600160a01b039091169063eae1e15b90611b3190859060040161497c565b5f60405180830381865afa158015611b4b573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611b729190810190615306565b919a91995090975050505050505050565b5f611b8c6137bc565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6060611bbd6010613590565b905090565b611beb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f8181526013602052604090819020805460ff19169055517ff07f42691c978b524369cf2893a7ca31ff408e49e086286e9cae920ddf94c119906118c79083815260200190565b611c3a6131d0565b5f828152601260205260409020600a81015460ff1615611c6d57604051634a4117f960e01b815260040160405180910390fd5b80546001600160a01b03163314611c9757604051630166d47f60e11b815260040160405180910390fd5b60088101548290808211611ce0576040517f1b97bd2a00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401611159565b5050611d0d3330836008015485611cf7919061545d565b60028501546001600160a01b031692919061381e565b6008810182905560405183907f2a33225c18747939dcf3b2bd3183bd352a2618e333ae356ad7352e8045719093905f90a2506115bc60015f55565b5f5f5f61271060075485611d5c9190615470565b611d669190615487565b905080611d73818661545d565b9250925050915091565b611d85613857565b565b6060611bbd600c613590565b5f8281527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260408220611dcb9084613aff565b949350505050565b611dfc7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b5f83815260136020526040902054839060ff16611e2f57604051633e308bc760e11b815260040161115991815260200190565b506001600160a01b0381165f9081526014602090815260408083208684529091529020611e5c90836134fb565b15611e93576040517f800ef11e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381165f9081526014602090815260408083208684529091529020611ebf9083613b0a565b50604080518481526001600160a01b0380851660208301528316918101919091527ef6b276aebfc163c3646a63a0286f845fdd2df56be91b61b62044067ce849a490606001611217565b611738838383613b1e565b5f611f1d6131d0565b5f8511611f3d57604051631f2a200560e01b815260040160405180910390fd5b6001600160a01b038216611f645760405163d92e233d60e01b815260040160405180910390fd5b5f83815260136020526040902054839060ff16611f9757604051633e308bc760e11b815260040161115991815260200190565b50611fa387848861173d565b611fd9576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f611fe487611d48565b915091505f8611612021576040517f732f941300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0389165f90815260156020526040812080548492906120489084906153d6565b925050819055505f60015f815461205e9061535f565b91829055505f81815260166020526040812080546001600160a01b031916331790559091506120938b8b85878c8c8c89612285565b905061209e81612b47565b94506120aa8582613c7d565b6120cb33306120b98b8d6153d6565b6001600160a01b038f1692919061381e565b864660405187907fe2f0160fbe779abb246276d49dac0cb97c86df7cb72a510bb9cf21486f5c82af905f90a45050505061210460015f55565b9695505050505050565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260409091206060919061176c90613590565b6060611bbd600e613590565b60408051808201909152600581527f312e302e30000000000000000000000000000000000000000000000000000000602082015260405160200161219a91906154bd565b60405160208183030381529060405280519060200120866001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156121eb573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526122129190810190615306565b60405160200161222291906154bd565b604051602081830303815290604052805190602001200361226f576040517f157224fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61227d868686868686613d5a565b505050505050565b6123036040518061018001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f81525090565b604051806101800160405280336001600160a01b03168152602001846001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b031681526020018881526020016123584690565b81526020018581526020018781526020018681526020018381526020015f1515815260200142815250905098975050505050505050565b6123b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756131b2565b611388808211156123f8576040517f48e4389e00000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b505f8111612432576040517f8bff87cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60078190556040518181527f853dd170f8306bb1eeb26a45f33d38947149fd8cffed21be04553a55a45a7b6e906020016118c7565b61246f6131d0565b5f82815260126020526040902080546001600160a01b031633146124a657604051630166d47f60e11b815260040160405180910390fd5b600a81015460ff16156124cc57604051634a4117f960e01b815260040160405180910390fd5b5f83815260186020526040902054612510576040517f160d218e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008545f84815260186020526040812054909161252c916153d6565b905080421015612568576040517f2234189200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831661258f5760405163d92e233d60e01b815260040160405180910390fd5b600782015460028301546001600160a01b03165f9081526015602052604090205410156125e8576040517fd0fcc85100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600782015460028301546001600160a01b03165f908152601560205260408120805490919061261890849061545d565b9091555050600a8201805460ff1916600117905561263760108561359c565b50612643600c856135a7565b505f82600801548360070154846004015461265e91906153d6565b61266891906153d6565b6002840154909150612684906001600160a01b0316858361351c565b82546040518281526001600160a01b0386811692169087907fbd3be89f6ca546f02b67ddd193d4f0e64f580f3c776e942e77a45093bd16da0c9060200160405180910390a45050506115bc60015f55565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060208190526040822061176c90613fce565b6060806001600160a01b0383166127365760405163d92e233d60e01b815260040160405180910390fd5b5f612740856115c0565b905083815f015182602001518360400151846060015185608001518660a001518760c001518861012001516040516020016127d4999897969594939291906001600160a01b03998a16815297891660208901529588166040880152938716606087015291909516608085015260a084019490945260c083019390935260e08201929092526101008101919091526101200190565b60408051601f198184030181529082905260095463eae1e15b60e01b83529094506001600160a01b03169063eae1e15b9061281390869060040161497c565b5f60405180830381865afa15801561282d573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526128549190810190615306565b9150509250929050565b5f612867613fd7565b805490915060ff68010000000000000000820416159067ffffffffffffffff165f811580156128935750825b90505f8267ffffffffffffffff1660011480156128af5750303b155b9050811580156128bd575080155b156128f4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561293f57845468ff00000000000000001916680100000000000000001785555b612947613fff565b61294f613fff565b61295c876202a300614007565b5f8611801561296d57506113888611155b6129a3576040517f8bff87cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0388166129ca5760405163d92e233d60e01b815260040160405180910390fd5b6129f47fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758a613211565b612a2a576040517f589efb5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612a345f8a613211565b612a6a576040517f589efb5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007869055600980546001600160a01b0319166001600160a01b038a16179055620151806008558315612adc57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6060805f85308686466040516020016112419594939291906154c8565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154612b3d816131b2565b6115ac83836134af565b5f815f01518260200151836040015184606001518560800151612b674690565b60c080890151610120808b0151604080516001600160a01b039b8c166020820152998b16908a0152968916606089015297909416608087015260a08601929092529084015260e083015261010082015201604051602081830303815290604052805190602001209050919050565b6001600160a01b038316612bfc5760405163d92e233d60e01b815260040160405180910390fd5b5f6040518060600160405280602181526020016157856021913990505f60015f8154612c279061535f565b918290555090505f612c3a838784611224565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f5912290612c7090849089908990600401615377565b602060405180830381865afa158015612c8b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612caf91906153bb565b612ccc57604051636925da7560e11b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0388169081179091556040517fc37fcad33674251baba1cbc16b2e8e3883ff25e6105973bc7a7f9bd7fafc2199905f90a2505050505050565b612d226131d0565b5f8881526017602052604090206004015474010000000000000000000000000000000000000000900460ff1615612d6c57604051634a4117f960e01b815260040160405180910390fd5b6001600160a01b03851615801590612d8c57506001600160a01b03841615155b8015612da057506001600160a01b03871615155b8015612db457506001600160a01b03861615155b612dea576040517f295ba29000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038916612e115760405163d92e233d60e01b815260040160405180910390fd5b5f8311612e3157604051631f2a200560e01b815260040160405180910390fd5b8146818103612e75576040517f9c8d8d0900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401611159565b5050868686868686612e844690565b604080516001600160a01b03988916602082015296881690870152938616606086015294909116608084015260a083015260c082019290925260e0810191909152610100810182905261012001604051602081830303815290604052805190602001208814612f1f576040517fc4fec7e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612f2a600a8961359c565b50612f406001600160a01b03851633888661381e565b604051806101400160405280898152602001838152602001612f5f4690565b8152602001866001600160a01b03168152602001856001600160a01b031681526020016001151581526020018a6001600160a01b03168152602001876001600160a01b031681526020018481526020014281525060175f8a81526020019081526020015f205f820151815f015560208201518160010155604082015181600201556060820151816003015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816006015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550610100820151816007015561012082015181600801559050506130d04690565b60405183908a907f5819a5ec71a56682e3e8a46c40394c82de95e50a8d4aac7c7e2039d83feec174905f90a4612adc60015f55565b611738838383614099565b6060611bbd600a613590565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806110f757507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146110f7565b6113fb81336141de565b5f61176c836001600160a01b03841661426a565b60025f540361320b576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f55565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320008161323e858561434d565b90508015611dcb575f85815260208390526040902061325d9085613b0a565b50949350505050565b6004544281116132a5576040517fb19fe45800000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b505f6040518060400160405280600681526020017f63616e63656c000000000000000000000000000000000000000000000000000081525090505f60015f81546132ee9061535f565b9182905550600254600380549293505f926133a29286926001600160a01b039091169182919061331d90615507565b80601f016020809104026020016040519081016040528092919081815260200182805461334990615507565b80156133945780601f1061336b57610100808354040283529160200191613394565b820191905f5260205f20905b81548152906001019060200180831161337757829003601f168201915b505050505060045487611acb565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f59122906133d890849089908990600401615377565b602060405180830381865afa1580156133f3573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061341791906153bb565b61343457604051636925da7560e11b815260040160405180910390fd5b600280546001600160a01b031981169091555f600481905560408051602081019091529081526001600160a01b0390911690600390613473908261558a565b506040516001600160a01b038216907f3198dc80249fcfedbd0d06e1ff49a7695a51b006592328ce0b127cdeab77e936905f90a2505050505050565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816134dc8585614410565b90508015611dcb575f85815260208390526040902061325d90856131bc565b6001600160a01b0381165f908152600183016020526040812054151561176c565b6040516001600160a01b0383811660248301526044820183905261173891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506144b4565b60605f61176c83614539565b5f61176c8383614592565b5f61176c838361426a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061364b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661363f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b15611d85576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3330146113fb576040517f5cb4a60600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613715575060408051601f3d908101601f1916820190925261371291810190615645565b60015b613756576040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401611159565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146137b2576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401611159565b61173883836145de565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d85576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526115ac9186918216906323b872dd90608401613549565b6002546001600160a01b0316613899576040517f52c650f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454428111156138d9576040517f61813b8000000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b50600254600380546001600160a01b03909216915f91906138f990615507565b80601f016020809104026020016040519081016040528092919081815260200182805461392590615507565b80156139705780601f1061394757610100808354040283529160200191613970565b820191905f5260205f20905b81548152906001019060200180831161395357829003601f168201915b5050600280546001600160a01b031916905550505f600481905560408051602081019091529081529192506003916139a991508261558a565b505f5f306001600160a01b0316634f1ef28660e01b85856040516024016139d192919061565c565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051613a3c91906154bd565b5f604051808303815f865af19150503d805f8114613a75576040519150601f19603f3d011682016040523d82523d5f602084013e613a7a565b606091505b509150915081613ac657805115613a945780518060208301fd5b6040517f55299b4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038516907ffd5a9ae7c73c11fde86dd61704e937a04c99e7eef668050f685aabc5d8a6b2e4905f90a250505050565b5f61176c8383614633565b5f61176c836001600160a01b038416614592565b6202a300831015613b5b576040517f65e1b9dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6040518060400160405280601481526020017f6368616e67652d757067726164652d64656c617900000000000000000000000081525090505f60015f8154613ba39061535f565b918290555090505f613bb6838784612ae7565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f5912290613bec90849089908990600401615377565b602060405180830381865afa158015613c07573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c2b91906153bb565b613c4857604051636925da7560e11b815260040160405180910390fd5b60058690556040518681527fe28f4f0d71292e4c2c0d6449ff0ddc8312fb9eeb604ca560c4dbe120fdf107ce90602001611559565b5f82815260126020908152604091829020835181546001600160a01b03199081166001600160a01b03928316178355928501516001830180548516918316919091179055928401516002820180548416918516919091179055606084015160038201805490931693169290921790556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a8201805460ff1916911515919091179055610160820151600b90910155611738600c8361359c565b6001600160a01b038616613d815760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b03808816911603613dc8576040517f157224fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554613dd590426153d6565b83101560055490613e15576040517f0cd4e2d600000000000000000000000000000000000000000000000000000000815260040161115991815260200190565b505f6040518060400160405280600881526020017f7363686564756c6500000000000000000000000000000000000000000000000081525090505f60015f8154613e5e9061535f565b91905081905590505f613ec08360025f9054906101000a90046001600160a01b03168b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508d9250899150611acb9050565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f5912290613ef690849089908990600401615377565b602060405180830381865afa158015613f11573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613f3591906153bb565b613f5257604051636925da7560e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b038b1617905560048690556003613f7f888a8361567d565b50886001600160a01b03167fe1009627653eb47f7d0f3b4435749f7984a803c21f84a076cc4dcb0412cf066f87604051613fbb91815260200190565b60405180910390a2505050505050505050565b5f6110f7825490565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006110f7565b611d85614659565b61400f614659565b6001600160a01b0382166140365760405163d92e233d60e01b815260040160405180910390fd5b6202a300811015614073576040517f65e1b9dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b039390931692909217909155600555565b6001600160a01b0383166140c05760405163d92e233d60e01b815260040160405180910390fd5b5f6040518060600160405280602581526020016157606025913990505f60015f81546140eb9061535f565b918290555090505f6140fe838784611224565b6006546040516318fac89160e11b81529193506001600160a01b031691506331f591229061413490849089908990600401615377565b602060405180830381865afa15801561414f573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061417391906153bb565b61419057604051636925da7560e11b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0388169081179091556040517f78a7faffd49667f6d2bc16fa2c528710c09fc0aa73325a3f28e161f8ae3ef4a1905f90a2505050505050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff166115bc576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401611159565b5f8181526001830160205260408120548015614344575f61428c60018361545d565b85549091505f9061429f9060019061545d565b90508082146142fe575f865f0182815481106142bd576142bd615737565b905f5260205f200154905080875f0184815481106142dd576142dd615737565b5f918252602080832090910192909255918252600188019052604090208390555b855486908061430f5761430f61574b565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506110f7565b5f9150506110f7565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16614344575f848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556143c63390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506110f7565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615614344575f848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506110f7565b5f5f60205f8451602086015f885af1806144d3576040513d5f823e3d81fd5b50505f513d915081156144ea5780600114156144f7565b6001600160a01b0384163b155b156115ac576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611159565b6060815f0180548060200260200160405190810160405280929190818152602001828054801561458657602002820191905f5260205f20905b815481526020019060010190808311614572575b50505050509050919050565b5f8181526001830160205260408120546145d757508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556110f7565b505f6110f7565b6145e782614697565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561462b576117388282614726565b6115bc614798565b5f825f01828154811061464857614648615737565b905f5260205f200154905092915050565b6146616147d0565b611d85576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160a01b03163b5f036146e5576040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401611159565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b03168460405161474291906154bd565b5f60405180830381855af49150503d805f811461477a576040519150601f19603f3d011682016040523d82523d5f602084013e61477f565b606091505b509150915061478f8583836147ee565b95945050505050565b3415611d85576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6147d9613fd7565b5468010000000000000000900460ff16919050565b606082614803576147fe82614863565b61176c565b815115801561481a57506001600160a01b0384163b155b1561485c576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611159565b508061176c565b80511561487257805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f602082840312156148b4575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461176c575f5ffd5b80356001600160a01b03811681146148f9575f5ffd5b919050565b5f5f5f60608486031215614910575f5ffd5b83359250614920602085016148e3565b915061492e604085016148e3565b90509250925092565b5f60208284031215614947575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61176c602083018461494e565b634e487b7160e01b5f52604160045260245ffd5b604051610180810167ffffffffffffffff811182821017156149c6576149c661498e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156149f5576149f561498e565b604052919050565b5f67ffffffffffffffff821115614a1657614a1661498e565b50601f01601f191660200190565b5f82601f830112614a33575f5ffd5b8135602083015f614a4b614a46846149fd565b6149cc565b9050828152858383011115614a5e575f5ffd5b828260208301375f92810160200192909252509392505050565b5f5f5f60608486031215614a8a575f5ffd5b833567ffffffffffffffff811115614aa0575f5ffd5b614aac86828701614a24565b935050614abb602085016148e3565b929592945050506040919091013590565b604081525f614ade604083018561494e565b828103602084015261478f818561494e565b5f5f83601f840112614b00575f5ffd5b50813567ffffffffffffffff811115614b17575f5ffd5b602083019150836020828501011115614b2e575f5ffd5b9250929050565b5f5f5f60408486031215614b47575f5ffd5b83359250602084013567ffffffffffffffff811115614b64575f5ffd5b614b7086828701614af0565b9497909650939450505050565b5f5f60408385031215614b8e575f5ffd5b82359150614b9e602084016148e3565b90509250929050565b5f5f60208385031215614bb8575f5ffd5b823567ffffffffffffffff811115614bce575f5ffd5b614bda85828601614af0565b90969095509350505050565b81516001600160a01b0316815261018081016020830151614c1260208401826001600160a01b03169052565b506040830151614c2d60408401826001600160a01b03169052565b506060830151614c4860608401826001600160a01b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100830151610100830152610120830151610120830152610140830151614c9e61014084018215159052565b5061016092830151919092015290565b5f5f5f60608486031215614cc0575f5ffd5b614cc9846148e3565b92506020840135915061492e604085016148e3565b5f5f60408385031215614cef575f5ffd5b614cf8836148e3565b9150614b9e602084016148e3565b5f5f60408385031215614d17575f5ffd5b614d20836148e3565b946020939093013593505050565b602080825282518282018190525f918401906040840190835b81811015614d6e5783516001600160a01b0316835260209384019390920191600101614d47565b509095945050505050565b5f5f5f5f60608587031215614d8c575f5ffd5b614d95856148e3565b935060208501359250604085013567ffffffffffffffff811115614db7575f5ffd5b614dc387828801614af0565b95989497509550505050565b5f5f60408385031215614de0575f5ffd5b614de9836148e3565b9150602083013567ffffffffffffffff811115614e04575f5ffd5b61285485828601614a24565b5f5f5f5f5f5f60c08789031215614e25575f5ffd5b863567ffffffffffffffff811115614e3b575f5ffd5b614e4789828a01614a24565b965050614e56602088016148e3565b9450614e64604088016148e3565b9350606087013567ffffffffffffffff811115614e7f575f5ffd5b614e8b89828a01614a24565b9699959850939660808101359560a090910135945092505050565b602080825282518282018190525f918401906040840190835b81811015614d6e578351835260209384019390920191600101614ebf565b5f60208284031215614eed575f5ffd5b61176c826148e3565b5f5f60408385031215614f07575f5ffd5b50508035926020909101359150565b5f5f5f5f5f5f60c08789031215614f2b575f5ffd5b614f34876148e3565b9550614f42602088016148e3565b9450604087013593506060870135925060808701359150614f6560a088016148e3565b90509295509295509295565b5f5f5f5f5f5f60808789031215614f86575f5ffd5b614f8f876148e3565b9550602087013567ffffffffffffffff811115614faa575f5ffd5b614fb689828a01614af0565b90965094505060408701359250606087013567ffffffffffffffff811115614fdc575f5ffd5b614fe889828a01614af0565b979a9699509497509295939492505050565b5f5f5f5f5f5f5f5f610100898b031215615012575f5ffd5b61501b896148e3565b975061502960208a016148e3565b965060408901359550606089013594506080890135935060a0890135925061505360c08a016148e3565b979a969950949793969295919450919260e001359150565b5f5f5f5f6080858703121561507e575f5ffd5b615087856148e3565b9350615095602086016148e3565b92506150a3604086016148e3565b9396929550929360600135925050565b5f5f5f606084860312156150c5575f5ffd5b833567ffffffffffffffff8111156150db575f5ffd5b6150e786828701614a24565b9660208601359650604090950135949350505050565b80151581146113fb575f5ffd5b80356148f9816150fd565b5f610180828403128015615127575f5ffd5b506151306149a2565b615139836148e3565b8152615147602084016148e3565b6020820152615158604084016148e3565b6040820152615169606084016148e3565b60608201526080838101359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526151b9610140840161510a565b610140820152610160928301359281019290925250919050565b5f5f5f604084860312156151e5575f5ffd5b6151ee846148e3565b9250602084013567ffffffffffffffff811115614b64575f5ffd5b5f5f5f5f5f5f5f5f5f6101208a8c031215615222575f5ffd5b61522b8a6148e3565b985060208a0135975061524060408b016148e3565b965061524e60608b016148e3565b955061525c60808b016148e3565b945061526a60a08b016148e3565b989b979a5095989497939693955050505060c08201359160e0810135916101009091013590565b60a081525f6152a360a083018861494e565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b5f6152dd614a46846149fd565b90508281528383830111156152f0575f5ffd5b8282602083015e5f602084830101529392505050565b5f60208284031215615316575f5ffd5b815167ffffffffffffffff81111561532c575f5ffd5b8201601f8101841361533c575f5ffd5b611dcb848251602084016152d0565b634e487b7160e01b5f52601160045260245ffd5b5f600182016153705761537061534b565b5060010190565b604081525f615389604083018661494e565b8281036020840152838152838560208301375f602085830101526020601f19601f860116820101915050949350505050565b5f602082840312156153cb575f5ffd5b815161176c816150fd565b808201808211156110f7576110f761534b565b61010081525f6153fd61010083018b61494e565b6001600160a01b038a1660208401526001600160a01b03891660408401526001600160a01b0388166060840152828103608084015261543c818861494e565b60a0840196909652505060c081019290925260e09091015295945050505050565b818103818111156110f7576110f761534b565b80820281158282048414176110f7576110f761534b565b5f826154a157634e487b7160e01b5f52601260045260245ffd5b500490565b5f81518060208401855e5f93019283525090919050565b5f61176c82846154a6565b60a081525f6154da60a083018861494e565b90506001600160a01b03861660208301528460408301528360608301528260808301529695505050505050565b600181811c9082168061551b57607f821691505b60208210810361553957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561173857805f5260205f20601f840160051c810160208510156155645750805b601f840160051c820191505b81811015615583575f8155600101615570565b5050505050565b815167ffffffffffffffff8111156155a4576155a461498e565b6155b8816155b28454615507565b8461553f565b6020601f8211600181146155ea575f83156155d35750848201515b5f19600385901b1c1916600184901b178455615583565b5f84815260208120601f198516915b8281101561561957878501518255602094850194600190920191016155f9565b508482101561563657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f60208284031215615655575f5ffd5b5051919050565b6001600160a01b0383168152604060208201525f611769604083018461494e565b67ffffffffffffffff8311156156955761569561498e565b6156a9836156a38354615507565b8361553f565b5f601f8411600181146156da575f85156156c35750838201355b5f19600387901b1c1916600186901b178355615583565b5f83815260208120601f198716915b8281101561570957868501358255602094850194600190920191016156e9565b5086821015615725575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffdfe6368616e67652d636f6e74726163742d757067726164652d626c732d76616c696461746f726368616e67652d737761702d726571756573742d626c732d76616c696461746f72
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x04\xB7W_5`\xE0\x1C\x80c\x91\x93\x05\x9C\x11a\x02kW\x80c\xB4D\x96L\x11a\x01VW\x80c\xDA\xAD\xFE\xC3\x11a\0\xD1W\x80c\xEB \xFA\xE2\x11a\0\x87W\x80c\xF1m\xEA\x82\x11a\0mW\x80c\xF1m\xEA\x82\x14a\x0F\xDEW\x80c\xF1\x867\x13\x14a\x10oW\x80c\xF8J\xE3\xA9\x14a\x10\x8EW__\xFD[\x80c\xEB \xFA\xE2\x14a\x0F\xAAW\x80c\xF0L\xD2w\x14a\x0F\xBFW__\xFD[\x80c\xDF\x91\x98\x13\x11a\0\xB7W\x80c\xDF\x91\x98\x13\x14a\x0EuW\x80c\xE7\xB7\xEE\x96\x14a\x0E\x94W\x80c\xEB\t\x1A\xC6\x14a\x0F|W__\xFD[\x80c\xDA\xAD\xFE\xC3\x14a\x0E7W\x80c\xDBe\x07\r\x14a\x0EVW__\xFD[\x80c\xCF\x97\xAD0\x11a\x01&W\x80c\xD5Gt\x1F\x11a\x01\x0CW\x80c\xD5Gt\x1F\x14a\r\xD8W\x80c\xD5[\xE8\xC6\x14a\r\xF7W\x80c\xDA\xA4\xC6k\x14a\x0E\x0CW__\xFD[\x80c\xCF\x97\xAD0\x14a\r\xA4W\x80c\xD3 8Y\x14a\r\xB9W__\xFD[\x80c\xB4D\x96L\x14a\r*W\x80c\xCA\x15\xC8s\x14a\rGW\x80c\xCE\x125\x80\x14a\rfW\x80c\xCFuo\xDF\x14a\r\x85W__\xFD[\x80c\xA4\xC5\xA2z\x11a\x01\xE6W\x80c\xAA\x15\xE0)\x11a\x01\xB6W\x80c\xAD\xB6\x10\xA3\x11a\x01\x9CW\x80c\xAD\xB6\x10\xA3\x14a\x0C\xD7W\x80c\xB0st\x8C\x14a\x0C\xECW\x80c\xB2\x1E\xAC\x9E\x14a\r\x0BW__\xFD[\x80c\xAA\x15\xE0)\x14a\x0C{W\x80c\xAD<\xB1\xCC\x14a\x0C\x8FW__\xFD[\x80c\xA4\xC5\xA2z\x14a\x0C\x0BW\x80c\xA9\xC9\xF2\x15\x14a\x0C(W\x80c\xA9\xE3e \x14a\x0C=W\x80c\xA9\xEE\x0F\xC2\x14a\x0C\\W__\xFD[\x80c\x99\xD6\x12\x0E\x11a\x02;W\x80c\xA2M4a\x11a\x02!W\x80c\xA2M4a\x14a\x0B\xB9W\x80c\xA3$j\xD3\x14a\x0B\xD8W\x80c\xA3m\x15\xEC\x14a\x0B\xF7W__\xFD[\x80c\x99\xD6\x12\x0E\x14a\x0BrW\x80c\xA2\x17\xFD\xDF\x14a\x0B\xA6W__\xFD[\x80c\x91\x93\x05\x9C\x14a\n\xB2W\x80c\x91\xD1HT\x14a\n\xD1W\x80c\x96\x95\xEC!\x14a\x0B4W\x80c\x98w.\xA2\x14a\x0BSW__\xFD[\x80c=\n\xEDP\x11a\x03\xA5W\x80c^\xD8\xB9\xD3\x11a\x03 W\x80cz\x1E\x1A\x05\x11a\x02\xD6W\x80c~\x89b\x14\x11a\x02\xBCW\x80c~\x89b\x14\x14a\nkW\x80c\x88\x86\xE5\x06\x14a\n\x7FW\x80c\x90\x10\xD0|\x14a\n\x93W__\xFD[\x80cz\x1E\x1A\x05\x14a\n\x18W\x80cz\xE5\x16\"\x14a\n7W__\xFD[\x80cn2\x07\xA6\x11a\x03\x06W\x80cn2\x07\xA6\x14a\t\x86W\x80cu\xB28\xFC\x14a\t\xB1W\x80cw\xCA\x1Dr\x14a\t\xE4W__\xFD[\x80c^\xD8\xB9\xD3\x14a\tFW\x80ccp\xD6X\x14a\tgW__\xFD[\x80cO\x1E\xF2\x86\x11a\x03uW\x80cQS\xA4\xC3\x11a\x03[W\x80cQS\xA4\xC3\x14a\x088W\x80cR\xD1\x90-\x14a\t2W\x80cVK\x81\xEF\x14a\x06\xE2W__\xFD[\x80cO\x1E\xF2\x86\x14a\x08\x06W\x80cPM\xA5\xA9\x14a\x08\x19W__\xFD[\x80c=\n\xEDP\x14a\x07}W\x80cD\xD1\xDA\x8C\x14a\x07\x9CW\x80cHt\x9D\x17\x14a\x07\xBBW\x80cK\x91\x81\x19\x14a\x07\xE7W__\xFD[\x80c\x19\xD2W\xBF\x11a\x045W\x80c4\x08\xE4p\x11a\x04\x05W\x80c4u\xBF\x8F\x11a\x03\xEBW\x80c4u\xBF\x8F\x14a\x07\x13W\x80c6V\x8A\xBE\x14a\x07?W\x80c:\xDE\x90\xE9\x14a\x07^W__\xFD[\x80c4\x08\xE4p\x14a\x06\xE2W\x80c4G:\xF1\x14a\x06\xF4W__\xFD[\x80c\x19\xD2W\xBF\x14a\x068W\x80c$\x8A\x9C\xA3\x14a\x06WW\x80c*-\x17\xBC\x14a\x06\xA4W\x80c//\xF1]\x14a\x06\xC3W__\xFD[\x80c\r\x8En,\x11a\x04\x8AW\x80c\x144\x90\xE1\x11a\x04pW\x80c\x144\x90\xE1\x14a\x05\xD7W\x80c\x15\xB1}\xA4\x14a\x05\xECW\x80c\x19\x1F\xE1\xED\x14a\x06#W__\xFD[\x80c\r\x8En,\x14a\x05\\W\x80c\x10\xEF/]\x14a\x05\xAAW__\xFD[\x80c\x01\xFF\xC9\xA7\x14a\x04\xBBW\x80c\x02{pG\x14a\x04\xEFW\x80c\x03\xF3}>\x14a\x05\rW\x80c\x07\xEF\xE90\x14a\x05.W[__\xFD[4\x80\x15a\x04\xC6W__\xFD[Pa\x04\xDAa\x04\xD56`\x04aH\xA4V[a\x10\xA2V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xFAW__\xFD[P`\x05T[`@Q\x90\x81R` \x01a\x04\xE6V[4\x80\x15a\x05\x18W__\xFD[Pa\x05,a\x05'6`\x04aH\xFEV[a\x10\xFDV[\0[4\x80\x15a\x059W__\xFD[Pa\x04\xDAa\x05H6`\x04aI7V[_\x90\x81R`\x13` R`@\x90 T`\xFF\x16\x90V[4\x80\x15a\x05gW__\xFD[P`@\x80Q\x80\x82\x01\x90\x91R`\x05\x81R\x7F1.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R[`@Qa\x04\xE6\x91\x90aI|V[4\x80\x15a\x05\xB5W__\xFD[Pa\x05\xC9a\x05\xC46`\x04aJxV[a\x12$V[`@Qa\x04\xE6\x92\x91\x90aJ\xCCV[4\x80\x15a\x05\xE2W__\xFD[Pa\x04\xFF`\x05T\x81V[4\x80\x15a\x05\xF7W__\xFD[P`\x06Ta\x06\x0B\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x04\xE6V[4\x80\x15a\x06.W__\xFD[Pa\x04\xFFa'\x10\x81V[4\x80\x15a\x06CW__\xFD[Pa\x05,a\x06R6`\x04aI7V[a\x12\xD3V[4\x80\x15a\x06bW__\xFD[Pa\x04\xFFa\x06q6`\x04aI7V[_\x90\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`@\x90 `\x01\x01T\x90V[4\x80\x15a\x06\xAFW__\xFD[Pa\x05,a\x06\xBE6`\x04aK5V[a\x13\xFEV[4\x80\x15a\x06\xCEW__\xFD[Pa\x05,a\x06\xDD6`\x04aK}V[a\x15iV[4\x80\x15a\x06\xEDW__\xFD[PFa\x04\xFFV[4\x80\x15a\x06\xFFW__\xFD[Pa\x05,a\x07\x0E6`\x04aK\xA7V[a\x15\xB2V[4\x80\x15a\x07\x1EW__\xFD[Pa\x072a\x07-6`\x04aI7V[a\x15\xC0V[`@Qa\x04\xE6\x91\x90aK\xE6V[4\x80\x15a\x07JW__\xFD[Pa\x05,a\x07Y6`\x04aK}V[a\x16\xECV[4\x80\x15a\x07iW__\xFD[Pa\x04\xDAa\x07x6`\x04aL\xAEV[a\x17=V[4\x80\x15a\x07\x88W__\xFD[Pa\x05,a\x07\x976`\x04aL\xDEV[a\x17sV[4\x80\x15a\x07\xA7W__\xFD[Pa\x05,a\x07\xB66`\x04aI7V[a\x18TV[4\x80\x15a\x07\xC6W__\xFD[Pa\x07\xDAa\x07\xD56`\x04aM\x06V[a\x18\xD2V[`@Qa\x04\xE6\x91\x90aM.V[4\x80\x15a\x07\xF2W__\xFD[Pa\x05,a\x08\x016`\x04aMyV[a\x19\0V[a\x05,a\x08\x146`\x04aM\xCFV[a\x1A\xB0V[4\x80\x15a\x08$W__\xFD[Pa\x05\xC9a\x0836`\x04aN\x10V[a\x1A\xCBV[4\x80\x15a\x08CW__\xFD[Pa\x08\xC5a\x08R6`\x04aI7V[`\x12` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x84\x01T`\x04\x85\x01T`\x05\x86\x01T`\x06\x87\x01T`\x07\x88\x01T`\x08\x89\x01T`\t\x8A\x01T`\n\x8B\x01T`\x0B\x90\x9B\x01T`\x01`\x01`\xA0\x1B\x03\x9A\x8B\x16\x9B\x99\x8B\x16\x9A\x98\x89\x16\x99\x98\x90\x97\x16\x97\x95\x96\x94\x95\x93\x94\x92\x93\x91\x92\x90\x91`\xFF\x16\x90\x8CV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x9D\x8E\x16\x81R\x9B\x8D\x16` \x8D\x01R\x99\x8C\x16\x99\x8B\x01\x99\x90\x99R\x99\x90\x96\x16``\x89\x01R`\x80\x88\x01\x94\x90\x94R`\xA0\x87\x01\x92\x90\x92R`\xC0\x86\x01R`\xE0\x85\x01Ra\x01\0\x84\x01Ra\x01 \x83\x01R\x91\x15\x15a\x01@\x82\x01Ra\x01`\x81\x01\x91\x90\x91Ra\x01\x80\x01a\x04\xE6V[4\x80\x15a\t=W__\xFD[Pa\x04\xFFa\x1B\x83V[4\x80\x15a\tQW__\xFD[Pa\tZa\x1B\xB1V[`@Qa\x04\xE6\x91\x90aN\xA6V[4\x80\x15a\trW__\xFD[Pa\x05,a\t\x816`\x04aI7V[a\x1B\xC2V[4\x80\x15a\t\x91W__\xFD[Pa\x04\xFFa\t\xA06`\x04aN\xDDV[`\x15` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\t\xBCW__\xFD[Pa\x04\xFF\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17u\x81V[4\x80\x15a\t\xEFW__\xFD[Pa\x06\x0Ba\t\xFE6`\x04aI7V[`\x16` R_\x90\x81R`@\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\n#W__\xFD[Pa\x05,a\n26`\x04aN\xF6V[a\x1C2V[4\x80\x15a\nBW__\xFD[Pa\nVa\nQ6`\x04aI7V[a\x1DHV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\x04\xE6V[4\x80\x15a\nvW__\xFD[Pa\x05,a\x1D}V[4\x80\x15a\n\x8AW__\xFD[Pa\tZa\x1D\x87V[4\x80\x15a\n\x9EW__\xFD[Pa\x06\x0Ba\n\xAD6`\x04aN\xF6V[a\x1D\x93V[4\x80\x15a\n\xBDW__\xFD[P`\x02Ta\x06\x0B\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\n\xDCW__\xFD[Pa\x04\xDAa\n\xEB6`\x04aK}V[_\x91\x82R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x90\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16\x84R\x91\x90R\x90 T`\xFF\x16\x90V[4\x80\x15a\x0B?W__\xFD[Pa\x05,a\x0BN6`\x04aH\xFEV[a\x1D\xD3V[4\x80\x15a\x0B^W__\xFD[Pa\x05,a\x0Bm6`\x04aK5V[a\x1F\tV[4\x80\x15a\x0B}W__\xFD[Pa\x04\xFFa\x0B\x8C6`\x04aN\xDDV[`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x15` R`@\x90 T\x90V[4\x80\x15a\x0B\xB1W__\xFD[Pa\x04\xFF_\x81V[4\x80\x15a\x0B\xC4W__\xFD[Pa\x04\xFFa\x0B\xD36`\x04aO\x16V[a\x1F\x14V[4\x80\x15a\x0B\xE3W__\xFD[Pa\x07\xDAa\x0B\xF26`\x04aI7V[a!\x0EV[4\x80\x15a\x0C\x02W__\xFD[Pa\tZa!JV[4\x80\x15a\x0C\x16W__\xFD[P`\x06T`\x01`\x01`\xA0\x1B\x03\x16a\x06\x0BV[4\x80\x15a\x0C3W__\xFD[Pa\x04\xFF`\x04T\x81V[4\x80\x15a\x0CHW__\xFD[Pa\x05,a\x0CW6`\x04aOqV[a!VV[4\x80\x15a\x0CgW__\xFD[Pa\x072a\x0Cv6`\x04aO\xFAV[a\"\x85V[4\x80\x15a\x0C\x86W__\xFD[P`\x07Ta\x04\xFFV[4\x80\x15a\x0C\x9AW__\xFD[Pa\x05\x9D`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[4\x80\x15a\x0C\xE2W__\xFD[Pa\x04\xFF`\x01T\x81V[4\x80\x15a\x0C\xF7W__\xFD[Pa\x05,a\r\x066`\x04aI7V[a#\x8FV[4\x80\x15a\r\x16W__\xFD[Pa\x05,a\r%6`\x04aK}V[a$gV[4\x80\x15a\r5W__\xFD[P`\tT`\x01`\x01`\xA0\x1B\x03\x16a\x06\x0BV[4\x80\x15a\rRW__\xFD[Pa\x04\xFFa\ra6`\x04aI7V[a&\xD5V[4\x80\x15a\rqW__\xFD[Pa\x05\xC9a\r\x806`\x04aK}V[a'\x0CV[4\x80\x15a\r\x90W__\xFD[Pa\x05,a\r\x9F6`\x04aPkV[a(^V[4\x80\x15a\r\xAFW__\xFD[Pa\x04\xFF`\x07T\x81V[4\x80\x15a\r\xC4W__\xFD[Pa\x05\xC9a\r\xD36`\x04aP\xB3V[a*\xE7V[4\x80\x15a\r\xE3W__\xFD[Pa\x05,a\r\xF26`\x04aK}V[a+\x04V[4\x80\x15a\x0E\x02W__\xFD[Pa\x04\xFFa\x13\x88\x81V[4\x80\x15a\x0E\x17W__\xFD[Pa\x04\xFFa\x0E&6`\x04aI7V[`\x18` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x0EBW__\xFD[Pa\x04\xFFa\x0EQ6`\x04aQ\x15V[a+GV[4\x80\x15a\x0EaW__\xFD[P`\tTa\x06\x0B\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x0E\x80W__\xFD[Pa\x05,a\x0E\x8F6`\x04aQ\xD3V[a+\xD5V[4\x80\x15a\x0E\x9FW__\xFD[Pa\x0F$a\x0E\xAE6`\x04aI7V[`\x17` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x84\x01T`\x04\x85\x01T`\x05\x86\x01T`\x06\x87\x01T`\x07\x88\x01T`\x08\x90\x98\x01T\x96\x97\x95\x96\x94\x95`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x95\x85\x85\x16\x95t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x95\x04`\xFF\x16\x94\x93\x84\x16\x93\x90\x92\x16\x91\x8AV[`@\x80Q\x9A\x8BR` \x8B\x01\x99\x90\x99R\x97\x89\x01\x96\x90\x96R`\x01`\x01`\xA0\x1B\x03\x94\x85\x16``\x89\x01R\x92\x84\x16`\x80\x88\x01R\x90\x15\x15`\xA0\x87\x01R\x82\x16`\xC0\x86\x01R\x16`\xE0\x84\x01Ra\x01\0\x83\x01Ra\x01 \x82\x01Ra\x01@\x01a\x04\xE6V[4\x80\x15a\x0F\x87W__\xFD[Pa\x04\xDAa\x0F\x966`\x04aI7V[`\x13` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[4\x80\x15a\x0F\xB5W__\xFD[Pa\x04\xFF`\x08T\x81V[4\x80\x15a\x0F\xCAW__\xFD[Pa\x05,a\x0F\xD96`\x04aR\tV[a-\x1AV[4\x80\x15a\x0F\xE9W__\xFD[Pa\x0F$a\x0F\xF86`\x04aI7V[_\x90\x81R`\x17` R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01T`\x03\x84\x01T`\x04\x85\x01T`\x05\x86\x01T`\x06\x87\x01T`\x07\x88\x01T`\x08\x90\x98\x01T\x96\x98\x95\x97\x94\x96`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x96\x85\x85\x16\x96t\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x95\x04`\xFF\x16\x95\x93\x84\x16\x94\x93\x90\x92\x16\x92\x91V[4\x80\x15a\x10zW__\xFD[Pa\x05,a\x10\x896`\x04aQ\xD3V[a1\x05V[4\x80\x15a\x10\x99W__\xFD[Pa\tZa1\x10V[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x7FZ\x05\x18\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\x80a\x10\xF7WPa\x10\xF7\x82a1\x1CV[\x92\x91PPV[a\x11&\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x83\x81R`\x13` R`@\x90 T\x83\x90`\xFF\x16a\x11bW`@Qc>0\x8B\xC7`\xE1\x1B\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xFD[Pa\x11n\x81\x84\x84a\x17=V[a\x11\xA4W`@Q\x7F=\xD1\xB3\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x90 a\x11\xD0\x90\x83a1\xBCV[P`@\x80Q\x84\x81R`\x01`\x01`\xA0\x1B\x03\x80\x85\x16` \x83\x01R\x83\x16\x91\x81\x01\x91\x90\x91R\x7F\xA6\x8C\x84\xBF\x08Xq\xBE5=\xFF\xA2\xCF\x1D\x89\x8B\x86OK\xFE\xC8\xD7\x962h'{e`\x9F\xC8\x8E\x90``\x01[`@Q\x80\x91\x03\x90\xA1PPPV[``\x80_\x850\x86\x86F`@Q` \x01a\x12A\x95\x94\x93\x92\x91\x90aR\x91V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R`\x06Tc\xEA\xE1\xE1[`\xE0\x1B\x83R\x90\x92P_\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xEA\xE1\xE1[\x90a\x12\x84\x90\x85\x90`\x04\x01aI|V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12\x9EW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x12\xC5\x91\x90\x81\x01\x90aS\x06V[\x91\x97\x91\x96P\x90\x94PPPPPV[a\x12\xDBa1\xD0V[_\x81\x81R`\x12` R`@\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x13\x12W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x13<W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\n\x81\x01T`\xFF\x16\x15a\x13bW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x81R`\x18` R`@\x90 T\x15a\x13\xA7W`@Q\x7F\x08\xC6+\xAB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x82\x81R`\x18` \x90\x81R`@\x91\x82\x90 B\x90\x81\x90U\x91Q\x91\x82R3\x91\x84\x91\x7F-!\xC8P[H\xB0\x8C\xF1x\xA2\r*g\x01y\xE2l\xFB\xB4\x9F\xFC\xFFe\x1629R\x15\xB6\xAF\xB8\x91\x01`@Q\x80\x91\x03\x90\xA3Pa\x13\xFB`\x01_UV[PV[b\x01Q\x80\x83\x10\x15a\x14;W`@Q\x7F\xE1\x19\xBC\xF1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7Fchange-cancellation-window\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta\x14\x83\x90aS_V[\x91\x82\x90UP\x90P_a\x14\x96\x83\x87\x84a*\xE7V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a\x14\xCC\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14\xE7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x15\x0B\x91\x90aS\xBBV[a\x15(W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x08\x86\x90U`@Q\x86\x81R\x7FM\x82\x12\xC5V/\xD1\xDDk\xA9$\x03\xEF\xC1\x8C\xA2\x1C\xC3\xF3\xAC\0i\xFFC\x95e\x0B\xD2\xA4a:R\x90` \x01[`@Q\x80\x91\x03\x90\xA1PPPPPPV[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`@\x90 `\x01\x01Ta\x15\xA2\x81a1\xB2V[a\x15\xAC\x83\x83a2\x11V[PPPPV[a\x15\xBC\x82\x82a2fV[PPV[a\x16>`@Q\x80a\x01\x80\x01`@R\x80_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x15\x15\x81R` \x01_\x81RP\x90V[P_\x90\x81R`\x12` \x90\x81R`@\x91\x82\x90 \x82Qa\x01\x80\x81\x01\x84R\x81T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x82R`\x01\x83\x01T\x81\x16\x93\x82\x01\x93\x90\x93R`\x02\x82\x01T\x83\x16\x93\x81\x01\x93\x90\x93R`\x03\x81\x01T\x90\x91\x16``\x83\x01R`\x04\x81\x01T`\x80\x83\x01R`\x05\x81\x01T`\xA0\x83\x01R`\x06\x81\x01T`\xC0\x83\x01R`\x07\x81\x01T`\xE0\x83\x01R`\x08\x81\x01Ta\x01\0\x83\x01R`\t\x81\x01Ta\x01 \x83\x01R`\n\x81\x01T`\xFF\x16\x15\x15a\x01@\x83\x01R`\x0B\x01Ta\x01`\x82\x01R\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x163\x14a\x17.W`@Q\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x178\x82\x82a4\xAFV[PPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x85\x84R\x90\x91R\x81 a\x17i\x90\x83a4\xFBV[\x90P[\x93\x92PPPV[a\x17\x9C\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[a\x17\xA4a1\xD0V[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x15` R`@\x90 T\x80a\x17\xDAW`@Qc\x1F* \x05`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x81\x81R`\x15` R`@\x81 Ua\x17\xFD\x90\x83\x83a5\x1CV[\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x7F~\x92F\xBB\x8D\xF4\xF6@\x94\xB3\x8F\xB7\x19\xD5=J\xCA\x12\xA4ZQ\x9E\x14Y\xFD\t\x9F\xA8\xC1}\xD3\xB0\x83`@Qa\x18B\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA3Pa\x15\xBC`\x01_UV[a\x18}\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x81\x81R`\x13` R`@\x90\x81\x90 \x80T`\xFF\x19\x16`\x01\x17\x90UQ\x7F\x04{&h\xFFTJ\x8B\xBF0\xBD{\xA3\xE7T\x86\xBA\xA0\x1A\x04\xBA\xDFS\x86\xB6\xC3\xBC\x9A}\xA4\xD6c\x90a\x18\xC7\x90\x83\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA1PV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x84\x84R\x90\x91R\x90 ``\x90a\x17l\x90a5\x90V[a\x19\x08a1\xD0V[_\x83\x81R`\x12` R`@\x90 `\n\x81\x01T`\xFF\x16\x15a\x19;W`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05\x81\x01TF\x81\x81\x14a\x19\x83W`@Q\x7FtJ\x14\x81\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x11YV[PP_a\x19\x90\x85\x87a'\x0CV[`\tT`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a\x19\xC6\x90\x84\x90\x88\x90\x88\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x19\xE1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1A\x05\x91\x90aS\xBBV[a\x1A\"W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x1A-`\x0E\x86a5\x9CV[Pa\x1A9`\x0C\x86a5\xA7V[P`\n\x82\x01\x80T`\xFF\x19\x16`\x01\x17\x90U`\x08\x82\x01T`\x04\x83\x01T_\x91a\x1A^\x91aS\xD6V[`\x02\x84\x01T\x90\x91Pa\x1Az\x90`\x01`\x01`\xA0\x1B\x03\x16\x88\x83a5\x1CV[`@Q\x86\x90\x7F\xA8\xEE\x08\x1F]\xF0;\xA0\x02U(\x0Cx\x1E\xD6\xA1\xA6|\x97\x02P\xE3ho\x95\x8C\x19\xAC\xCB\x08\xD4\x80\x90_\x90\xA2PPPa\x15\xAC`\x01_UV[a\x1A\xB8a5\xB2V[a\x1A\xC1\x82a6\x82V[a\x15\xBC\x82\x82a6\xBBV[``\x80_\x880\x89\x89\x89\x89\x89F`@Q` \x01a\x1A\xEE\x98\x97\x96\x95\x94\x93\x92\x91\x90aS\xE9V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R`\x06Tc\xEA\xE1\xE1[`\xE0\x1B\x83R\x90\x92P_\x91`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xEA\xE1\xE1[\x90a\x1B1\x90\x85\x90`\x04\x01aI|V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x1BKW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x1Br\x91\x90\x81\x01\x90aS\x06V[\x91\x9A\x91\x99P\x90\x97PPPPPPPPV[_a\x1B\x8Ca7\xBCV[P\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\x90V[``a\x1B\xBD`\x10a5\x90V[\x90P\x90V[a\x1B\xEB\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x81\x81R`\x13` R`@\x90\x81\x90 \x80T`\xFF\x19\x16\x90UQ\x7F\xF0\x7FBi\x1C\x97\x8BRCi\xCF(\x93\xA7\xCA1\xFF@\x8EI\xE0\x86(n\x9C\xAE\x92\r\xDF\x94\xC1\x19\x90a\x18\xC7\x90\x83\x81R` \x01\x90V[a\x1C:a1\xD0V[_\x82\x81R`\x12` R`@\x90 `\n\x81\x01T`\xFF\x16\x15a\x1CmW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x1C\x97W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x08\x81\x01T\x82\x90\x80\x82\x11a\x1C\xE0W`@Q\x7F\x1B\x97\xBD*\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x11YV[PPa\x1D\r30\x83`\x08\x01T\x85a\x1C\xF7\x91\x90aT]V[`\x02\x85\x01T`\x01`\x01`\xA0\x1B\x03\x16\x92\x91\x90a8\x1EV[`\x08\x81\x01\x82\x90U`@Q\x83\x90\x7F*3\"\\\x18ty9\xDC\xF3\xB2\xBD1\x83\xBD5*&\x18\xE33\xAE5j\xD75.\x80Eq\x90\x93\x90_\x90\xA2Pa\x15\xBC`\x01_UV[___a'\x10`\x07T\x85a\x1D\\\x91\x90aTpV[a\x1Df\x91\x90aT\x87V[\x90P\x80a\x1Ds\x81\x86aT]V[\x92P\x92PP\x91P\x91V[a\x1D\x85a8WV[V[``a\x1B\xBD`\x0Ca5\x90V[_\x82\x81R\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0` \x81\x90R`@\x82 a\x1D\xCB\x90\x84a:\xFFV[\x94\x93PPPPV[a\x1D\xFC\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[_\x83\x81R`\x13` R`@\x90 T\x83\x90`\xFF\x16a\x1E/W`@Qc>0\x8B\xC7`\xE1\x1B\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x90 a\x1E\\\x90\x83a4\xFBV[\x15a\x1E\x93W`@Q\x7F\x80\x0E\xF1\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x14` \x90\x81R`@\x80\x83 \x86\x84R\x90\x91R\x90 a\x1E\xBF\x90\x83a;\nV[P`@\x80Q\x84\x81R`\x01`\x01`\xA0\x1B\x03\x80\x85\x16` \x83\x01R\x83\x16\x91\x81\x01\x91\x90\x91R~\xF6\xB2v\xAE\xBF\xC1c\xC3djc\xA0(o\x84_\xDD-\xF5k\xE9\x1Ba\xB6 D\x06|\xE8I\xA4\x90``\x01a\x12\x17V[a\x178\x83\x83\x83a;\x1EV[_a\x1F\x1Da1\xD0V[_\x85\x11a\x1F=W`@Qc\x1F* \x05`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x1FdW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x81R`\x13` R`@\x90 T\x83\x90`\xFF\x16a\x1F\x97W`@Qc>0\x8B\xC7`\xE1\x1B\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[Pa\x1F\xA3\x87\x84\x88a\x17=V[a\x1F\xD9W`@Q\x7F=\xD1\xB3\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[__a\x1F\xE4\x87a\x1DHV[\x91P\x91P_\x86\x11a !W`@Q\x7Fs/\x94\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x89\x16_\x90\x81R`\x15` R`@\x81 \x80T\x84\x92\x90a H\x90\x84\x90aS\xD6V[\x92PP\x81\x90UP_`\x01_\x81Ta ^\x90aS_V[\x91\x82\x90UP_\x81\x81R`\x16` R`@\x81 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90U\x90\x91Pa \x93\x8B\x8B\x85\x87\x8C\x8C\x8C\x89a\"\x85V[\x90Pa \x9E\x81a+GV[\x94Pa \xAA\x85\x82a<}V[a \xCB30a \xB9\x8B\x8DaS\xD6V[`\x01`\x01`\xA0\x1B\x03\x8F\x16\x92\x91\x90a8\x1EV[\x86F`@Q\x87\x90\x7F\xE2\xF0\x16\x0F\xBEw\x9A\xBB$bv\xD4\x9D\xAC\x0C\xB9|\x86\xDF|\xB7*Q\x0B\xB9\xCF!Ho\\\x82\xAF\x90_\x90\xA4PPPPa!\x04`\x01_UV[\x96\x95PPPPPPV[_\x81\x81R\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0` \x81\x90R`@\x90\x91 ``\x91\x90a\x17l\x90a5\x90V[``a\x1B\xBD`\x0Ea5\x90V[`@\x80Q\x80\x82\x01\x90\x91R`\x05\x81R\x7F1.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q` \x01a!\x9A\x91\x90aT\xBDV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x86`\x01`\x01`\xA0\x1B\x03\x16c\r\x8En,`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\xEBW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\"\x12\x91\x90\x81\x01\x90aS\x06V[`@Q` \x01a\"\"\x91\x90aT\xBDV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x03a\"oW`@Q\x7F\x15r$\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\"}\x86\x86\x86\x86\x86\x86a=ZV[PPPPPPV[a#\x03`@Q\x80a\x01\x80\x01`@R\x80_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x15\x15\x81R` \x01_\x81RP\x90V[`@Q\x80a\x01\x80\x01`@R\x803`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x89`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x88\x81R` \x01a#XF\x90V[\x81R` \x01\x85\x81R` \x01\x87\x81R` \x01\x86\x81R` \x01\x83\x81R` \x01_\x15\x15\x81R` \x01B\x81RP\x90P\x98\x97PPPPPPPPV[a#\xB8\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17ua1\xB2V[a\x13\x88\x80\x82\x11\x15a#\xF8W`@Q\x7FH\xE48\x9E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P_\x81\x11a$2W`@Q\x7F\x8B\xFF\x87\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x81\x90U`@Q\x81\x81R\x7F\x85=\xD1p\xF80k\xB1\xEE\xB2jE\xF3=8\x94qI\xFD\x8C\xFF\xED!\xBE\x04U:U\xA4Z{n\x90` \x01a\x18\xC7V[a$oa1\xD0V[_\x82\x81R`\x12` R`@\x90 \x80T`\x01`\x01`\xA0\x1B\x03\x163\x14a$\xA6W`@Qc\x01f\xD4\x7F`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\n\x81\x01T`\xFF\x16\x15a$\xCCW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x81R`\x18` R`@\x90 Ta%\x10W`@Q\x7F\x16\r!\x8E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x08T_\x84\x81R`\x18` R`@\x81 T\x90\x91a%,\x91aS\xD6V[\x90P\x80B\x10\x15a%hW`@Q\x7F\"4\x18\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x83\x16a%\x8FW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x82\x01T`\x02\x83\x01T`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x15` R`@\x90 T\x10\x15a%\xE8W`@Q\x7F\xD0\xFC\xC8Q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x82\x01T`\x02\x83\x01T`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x15` R`@\x81 \x80T\x90\x91\x90a&\x18\x90\x84\x90aT]V[\x90\x91UPP`\n\x82\x01\x80T`\xFF\x19\x16`\x01\x17\x90Ua&7`\x10\x85a5\x9CV[Pa&C`\x0C\x85a5\xA7V[P_\x82`\x08\x01T\x83`\x07\x01T\x84`\x04\x01Ta&^\x91\x90aS\xD6V[a&h\x91\x90aS\xD6V[`\x02\x84\x01T\x90\x91Pa&\x84\x90`\x01`\x01`\xA0\x1B\x03\x16\x85\x83a5\x1CV[\x82T`@Q\x82\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x92\x16\x90\x87\x90\x7F\xBD;\xE8\x9Fl\xA5F\xF0+g\xDD\xD1\x93\xD4\xF0\xE6OX\x0F<wn\x94.w\xA4P\x93\xBD\x16\xDA\x0C\x90` \x01`@Q\x80\x91\x03\x90\xA4PPPa\x15\xBC`\x01_UV[_\x81\x81R\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0` \x81\x90R`@\x82 a\x17l\x90a?\xCEV[``\x80`\x01`\x01`\xA0\x1B\x03\x83\x16a'6W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'@\x85a\x15\xC0V[\x90P\x83\x81_\x01Q\x82` \x01Q\x83`@\x01Q\x84``\x01Q\x85`\x80\x01Q\x86`\xA0\x01Q\x87`\xC0\x01Q\x88a\x01 \x01Q`@Q` \x01a'\xD4\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90`\x01`\x01`\xA0\x1B\x03\x99\x8A\x16\x81R\x97\x89\x16` \x89\x01R\x95\x88\x16`@\x88\x01R\x93\x87\x16``\x87\x01R\x91\x90\x95\x16`\x80\x85\x01R`\xA0\x84\x01\x94\x90\x94R`\xC0\x83\x01\x93\x90\x93R`\xE0\x82\x01\x92\x90\x92Ra\x01\0\x81\x01\x91\x90\x91Ra\x01 \x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R`\tTc\xEA\xE1\xE1[`\xE0\x1B\x83R\x90\x94P`\x01`\x01`\xA0\x1B\x03\x16\x90c\xEA\xE1\xE1[\x90a(\x13\x90\x86\x90`\x04\x01aI|V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a(-W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra(T\x91\x90\x81\x01\x90aS\x06V[\x91PP\x92P\x92\x90PV[_a(ga?\xD7V[\x80T\x90\x91P`\xFFh\x01\0\0\0\0\0\0\0\0\x82\x04\x16\x15\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x81\x15\x80\x15a(\x93WP\x82[\x90P_\x82g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01\x14\x80\x15a(\xAFWP0;\x15[\x90P\x81\x15\x80\x15a(\xBDWP\x80\x15[\x15a(\xF4W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x84T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16`\x01\x17\x85U\x83\x15a)?W\x84Th\xFF\0\0\0\0\0\0\0\0\x19\x16h\x01\0\0\0\0\0\0\0\0\x17\x85U[a)Ga?\xFFV[a)Oa?\xFFV[a)\\\x87b\x02\xA3\0a@\x07V[_\x86\x11\x80\x15a)mWPa\x13\x88\x86\x11\x15[a)\xA3W`@Q\x7F\x8B\xFF\x87\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x88\x16a)\xCAW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a)\xF4\x7F\xA4\x98\x07 \\\xE4\xD3U\t.\xF5\xA8\xA1\x8FV\xE8\x91<\xF4\xA2\x01\xFB\xE2\x87\x82[\tV\x93\xC2\x17u\x8Aa2\x11V[a**W`@Q\x7FX\x9E\xFBP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a*4_\x8Aa2\x11V[a*jW`@Q\x7FX\x9E\xFBP\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x86\x90U`\t\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x8A\x16\x17\x90Ub\x01Q\x80`\x08U\x83\x15a*\xDCW\x84Th\xFF\0\0\0\0\0\0\0\0\x19\x16\x85U`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x01`@Q\x80\x91\x03\x90\xA1[PPPPPPPPPV[``\x80_\x850\x86\x86F`@Q` \x01a\x12A\x95\x94\x93\x92\x91\x90aT\xC8V[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`@\x90 `\x01\x01Ta+=\x81a1\xB2V[a\x15\xAC\x83\x83a4\xAFV[_\x81_\x01Q\x82` \x01Q\x83`@\x01Q\x84``\x01Q\x85`\x80\x01Qa+gF\x90V[`\xC0\x80\x89\x01Qa\x01 \x80\x8B\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x9B\x8C\x16` \x82\x01R\x99\x8B\x16\x90\x8A\x01R\x96\x89\x16``\x89\x01R\x97\x90\x94\x16`\x80\x87\x01R`\xA0\x86\x01\x92\x90\x92R\x90\x84\x01R`\xE0\x83\x01Ra\x01\0\x82\x01R\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x83\x16a+\xFCW`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80``\x01`@R\x80`!\x81R` \x01aW\x85`!\x919\x90P_`\x01_\x81Ta,'\x90aS_V[\x91\x82\x90UP\x90P_a,:\x83\x87\x84a\x12$V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a,p\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a,\x8BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a,\xAF\x91\x90aS\xBBV[a,\xCCW`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\t\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x88\x16\x90\x81\x17\x90\x91U`@Q\x7F\xC3\x7F\xCA\xD36t%\x1B\xAB\xA1\xCB\xC1k.\x8E8\x83\xFF%\xE6\x10Ys\xBCz\x7F\x9B\xD7\xFA\xFC!\x99\x90_\x90\xA2PPPPPPV[a-\"a1\xD0V[_\x88\x81R`\x17` R`@\x90 `\x04\x01Tt\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x15a-lW`@QcJA\x17\xF9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x85\x16\x15\x80\x15\x90a-\x8CWP`\x01`\x01`\xA0\x1B\x03\x84\x16\x15\x15[\x80\x15a-\xA0WP`\x01`\x01`\xA0\x1B\x03\x87\x16\x15\x15[\x80\x15a-\xB4WP`\x01`\x01`\xA0\x1B\x03\x86\x16\x15\x15[a-\xEAW`@Q\x7F)[\xA2\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x89\x16a.\x11W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83\x11a.1W`@Qc\x1F* \x05`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81F\x81\x81\x03a.uW`@Q\x7F\x9C\x8D\x8D\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x11YV[PP\x86\x86\x86\x86\x86\x86a.\x84F\x90V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x98\x89\x16` \x82\x01R\x96\x88\x16\x90\x87\x01R\x93\x86\x16``\x86\x01R\x94\x90\x91\x16`\x80\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01\x92\x90\x92R`\xE0\x81\x01\x91\x90\x91Ra\x01\0\x81\x01\x82\x90Ra\x01 \x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x88\x14a/\x1FW`@Q\x7F\xC4\xFE\xC7\xE0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a/*`\n\x89a5\x9CV[Pa/@`\x01`\x01`\xA0\x1B\x03\x85\x163\x88\x86a8\x1EV[`@Q\x80a\x01@\x01`@R\x80\x89\x81R` \x01\x83\x81R` \x01a/_F\x90V[\x81R` \x01\x86`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01`\x01\x15\x15\x81R` \x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x84\x81R` \x01B\x81RP`\x17_\x8A\x81R` \x01\x90\x81R` \x01_ _\x82\x01Q\x81_\x01U` \x82\x01Q\x81`\x01\x01U`@\x82\x01Q\x81`\x02\x01U``\x82\x01Q\x81`\x03\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\x80\x82\x01Q\x81`\x04\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\xA0\x82\x01Q\x81`\x04\x01`\x14a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP`\xC0\x82\x01Q\x81`\x05\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\xE0\x82\x01Q\x81`\x06\x01_a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UPa\x01\0\x82\x01Q\x81`\x07\x01Ua\x01 \x82\x01Q\x81`\x08\x01U\x90PPa0\xD0F\x90V[`@Q\x83\x90\x8A\x90\x7FX\x19\xA5\xECq\xA5f\x82\xE3\xE8\xA4l@9L\x82\xDE\x95\xE5\n\x8DJ\xAC|~ 9\xD8?\xEE\xC1t\x90_\x90\xA4a*\xDC`\x01_UV[a\x178\x83\x83\x83a@\x99V[``a\x1B\xBD`\na5\x90V[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\x80a\x10\xF7WP\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x14a\x10\xF7V[a\x13\xFB\x813aA\xDEV[_a\x17l\x83`\x01`\x01`\xA0\x1B\x03\x84\x16aBjV[`\x02_T\x03a2\x0BW`@Q\x7F>\xE5\xAE\xB5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_UV[_\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0\x81a2>\x85\x85aCMV[\x90P\x80\x15a\x1D\xCBW_\x85\x81R` \x83\x90R`@\x90 a2]\x90\x85a;\nV[P\x94\x93PPPPV[`\x04TB\x81\x11a2\xA5W`@Q\x7F\xB1\x9F\xE4X\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P_`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01\x7Fcancel\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta2\xEE\x90aS_V[\x91\x82\x90UP`\x02T`\x03\x80T\x92\x93P_\x92a3\xA2\x92\x86\x92`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91\x82\x91\x90a3\x1D\x90aU\x07V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta3I\x90aU\x07V[\x80\x15a3\x94W\x80`\x1F\x10a3kWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a3\x94V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a3wW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP`\x04T\x87a\x1A\xCBV[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a3\xD8\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a3\xF3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a4\x17\x91\x90aS\xBBV[a44W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x81\x16\x90\x91U_`\x04\x81\x90U`@\x80Q` \x81\x01\x90\x91R\x90\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90`\x03\x90a4s\x90\x82aU\x8AV[P`@Q`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x7F1\x98\xDC\x80$\x9F\xCF\xED\xBD\r\x06\xE1\xFFI\xA7iZQ\xB0\x06Y#(\xCE\x0B\x12|\xDE\xABw\xE96\x90_\x90\xA2PPPPPPV[_\x7F\xC1\xF6\xFE$b\x1C\xE8\x1E\xC5\x82|\xAF\x02S\xCA\xDBtp\x9B\x06\x160\xE6\xB5^\x827\x17\x05\x93 \0\x81a4\xDC\x85\x85aD\x10V[\x90P\x80\x15a\x1D\xCBW_\x85\x81R` \x83\x90R`@\x90 a2]\x90\x85a1\xBCV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x01\x83\x01` R`@\x81 T\x15\x15a\x17lV[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x83\x01R`D\x82\x01\x83\x90Ra\x178\x91\x85\x91\x82\x16\x90c\xA9\x05\x9C\xBB\x90`d\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P`\xE0\x1B` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPaD\xB4V[``_a\x17l\x83aE9V[_a\x17l\x83\x83aE\x92V[_a\x17l\x83\x83aBjV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14\x80a6KWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16a6?\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBCT`\x01`\x01`\xA0\x1B\x03\x16\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x1D\x85W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[30\x14a\x13\xFBW`@Q\x7F\\\xB4\xA6\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\x01`\x01`\xA0\x1B\x03\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a7\x15WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra7\x12\x91\x81\x01\x90aVEV[`\x01[a7VW`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\x11YV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\x81\x14a7\xB2W`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R`$\x01a\x11YV[a\x178\x83\x83aE\xDEV[0`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x1D\x85W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R\x83\x81\x16`D\x83\x01R`d\x82\x01\x83\x90Ra\x15\xAC\x91\x86\x91\x82\x16\x90c#\xB8r\xDD\x90`\x84\x01a5IV[`\x02T`\x01`\x01`\xA0\x1B\x03\x16a8\x99W`@Q\x7FR\xC6P\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x04TB\x81\x11\x15a8\xD9W`@Q\x7Fa\x81;\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P`\x02T`\x03\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91_\x91\x90a8\xF9\x90aU\x07V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta9%\x90aU\x07V[\x80\x15a9pW\x80`\x1F\x10a9GWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a9pV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a9SW\x82\x90\x03`\x1F\x16\x82\x01\x91[PP`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90UPP_`\x04\x81\x90U`@\x80Q` \x81\x01\x90\x91R\x90\x81R\x91\x92P`\x03\x91a9\xA9\x91P\x82aU\x8AV[P__0`\x01`\x01`\xA0\x1B\x03\x16cO\x1E\xF2\x86`\xE0\x1B\x85\x85`@Q`$\x01a9\xD1\x92\x91\x90aV\\V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qa:<\x91\x90aT\xBDV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a:uW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a:zV[``\x91P[P\x91P\x91P\x81a:\xC6W\x80Q\x15a:\x94W\x80Q\x80` \x83\x01\xFD[`@Q\x7FU)\x9BI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q`\x01`\x01`\xA0\x1B\x03\x85\x16\x90\x7F\xFDZ\x9A\xE7\xC7<\x11\xFD\xE8m\xD6\x17\x04\xE97\xA0L\x99\xE7\xEE\xF6h\x05\x0FhZ\xAB\xC5\xD8\xA6\xB2\xE4\x90_\x90\xA2PPPPV[_a\x17l\x83\x83aF3V[_a\x17l\x83`\x01`\x01`\xA0\x1B\x03\x84\x16aE\x92V[b\x02\xA3\0\x83\x10\x15a;[W`@Q\x7Fe\xE1\xB9\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01\x7Fchange-upgrade-delay\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta;\xA3\x90aS_V[\x91\x82\x90UP\x90P_a;\xB6\x83\x87\x84a*\xE7V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a;\xEC\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a<\x07W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a<+\x91\x90aS\xBBV[a<HW`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05\x86\x90U`@Q\x86\x81R\x7F\xE2\x8FO\rq).L,\rdI\xFF\r\xDC\x83\x12\xFB\x9E\xEB`L\xA5`\xC4\xDB\xE1 \xFD\xF1\x07\xCE\x90` \x01a\x15YV[_\x82\x81R`\x12` \x90\x81R`@\x91\x82\x90 \x83Q\x81T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x83U\x92\x85\x01Q`\x01\x83\x01\x80T\x85\x16\x91\x83\x16\x91\x90\x91\x17\x90U\x92\x84\x01Q`\x02\x82\x01\x80T\x84\x16\x91\x85\x16\x91\x90\x91\x17\x90U``\x84\x01Q`\x03\x82\x01\x80T\x90\x93\x16\x93\x16\x92\x90\x92\x17\x90U`\x80\x82\x01Q`\x04\x82\x01U`\xA0\x82\x01Q`\x05\x82\x01U`\xC0\x82\x01Q`\x06\x82\x01U`\xE0\x82\x01Q`\x07\x82\x01Ua\x01\0\x82\x01Q`\x08\x82\x01Ua\x01 \x82\x01Q`\t\x82\x01Ua\x01@\x82\x01Q`\n\x82\x01\x80T`\xFF\x19\x16\x91\x15\x15\x91\x90\x91\x17\x90Ua\x01`\x82\x01Q`\x0B\x90\x91\x01Ua\x178`\x0C\x83a5\x9CV[`\x01`\x01`\xA0\x1B\x03\x86\x16a=\x81W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02T`\x01`\x01`\xA0\x1B\x03\x80\x88\x16\x91\x16\x03a=\xC8W`@Q\x7F\x15r$\xFE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x05Ta=\xD5\x90BaS\xD6V[\x83\x10\x15`\x05T\x90a>\x15W`@Q\x7F\x0C\xD4\xE2\xD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11Y\x91\x81R` \x01\x90V[P_`@Q\x80`@\x01`@R\x80`\x08\x81R` \x01\x7Fschedule\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P_`\x01_\x81Ta>^\x90aS_V[\x91\x90P\x81\x90U\x90P_a>\xC0\x83`\x02_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x8B\x8B\x8B\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x8D\x92P\x89\x91Pa\x1A\xCB\x90PV[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90a>\xF6\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a?\x11W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a?5\x91\x90aS\xBBV[a?RW`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x8B\x16\x17\x90U`\x04\x86\x90U`\x03a?\x7F\x88\x8A\x83aV}V[P\x88`\x01`\x01`\xA0\x1B\x03\x16\x7F\xE1\0\x96'e>\xB4\x7F}\x0F;D5t\x9Fy\x84\xA8\x03\xC2\x1F\x84\xA0v\xCCM\xCB\x04\x12\xCF\x06o\x87`@Qa?\xBB\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA2PPPPPPPPPV[_a\x10\xF7\x82T\x90V[_\x80\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0a\x10\xF7V[a\x1D\x85aFYV[a@\x0FaFYV[`\x01`\x01`\xA0\x1B\x03\x82\x16a@6W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[b\x02\xA3\0\x81\x10\x15a@sW`@Q\x7Fe\xE1\xB9\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x06\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16\x92\x90\x92\x17\x90\x91U`\x05UV[`\x01`\x01`\xA0\x1B\x03\x83\x16a@\xC0W`@Qc\xD9.#=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80``\x01`@R\x80`%\x81R` \x01aW``%\x919\x90P_`\x01_\x81Ta@\xEB\x90aS_V[\x91\x82\x90UP\x90P_a@\xFE\x83\x87\x84a\x12$V[`\x06T`@Qc\x18\xFA\xC8\x91`\xE1\x1B\x81R\x91\x93P`\x01`\x01`\xA0\x1B\x03\x16\x91Pc1\xF5\x91\"\x90aA4\x90\x84\x90\x89\x90\x89\x90`\x04\x01aSwV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15aAOW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90aAs\x91\x90aS\xBBV[aA\x90W`@Qci%\xDAu`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x06\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x88\x16\x90\x81\x17\x90\x91U`@Q\x7Fx\xA7\xFA\xFF\xD4\x96g\xF6\xD2\xBC\x16\xFA,R\x87\x10\xC0\x9F\xC0\xAAs2Z?(\xE1a\xF8\xAE>\xF4\xA1\x90_\x90\xA2PPPPPPV[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x85\x16\x84R\x90\x91R\x90 T`\xFF\x16a\x15\xBCW`@Q\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x81\x01\x83\x90R`D\x01a\x11YV[_\x81\x81R`\x01\x83\x01` R`@\x81 T\x80\x15aCDW_aB\x8C`\x01\x83aT]V[\x85T\x90\x91P_\x90aB\x9F\x90`\x01\x90aT]V[\x90P\x80\x82\x14aB\xFEW_\x86_\x01\x82\x81T\x81\x10aB\xBDWaB\xBDaW7V[\x90_R` _ \x01T\x90P\x80\x87_\x01\x84\x81T\x81\x10aB\xDDWaB\xDDaW7V[_\x91\x82R` \x80\x83 \x90\x91\x01\x92\x90\x92U\x91\x82R`\x01\x88\x01\x90R`@\x90 \x83\x90U[\x85T\x86\x90\x80aC\x0FWaC\x0FaWKV[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90U\x85`\x01\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x90U`\x01\x93PPPPa\x10\xF7V[_\x91PPa\x10\xF7V[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x81\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x86\x16\x85R\x90\x91R\x82 T`\xFF\x16aCDW_\x84\x81R` \x82\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x87\x16\x84R\x90\x91R\x90 \x80T`\xFF\x19\x16`\x01\x17\x90UaC\xC63\x90V[`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x85\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r`@Q`@Q\x80\x91\x03\x90\xA4`\x01\x91PPa\x10\xF7V[_\x82\x81R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` \x81\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x86\x16\x85R\x90\x91R\x82 T`\xFF\x16\x15aCDW_\x84\x81R` \x82\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x87\x16\x80\x85R\x92R\x80\x83 \x80T`\xFF\x19\x16\x90UQ3\x92\x87\x91\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x91\x90\xA4`\x01\x91PPa\x10\xF7V[__` _\x84Q` \x86\x01_\x88Z\xF1\x80aD\xD3W`@Q=_\x82>=\x81\xFD[PP_Q=\x91P\x81\x15aD\xEAW\x80`\x01\x14\x15aD\xF7V[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15a\x15\xACW`@Q\x7FRt\xAF\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\x11YV[``\x81_\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15aE\x86W` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11aErW[PPPPP\x90P\x91\x90PV[_\x81\x81R`\x01\x83\x01` R`@\x81 TaE\xD7WP\x81T`\x01\x81\x81\x01\x84U_\x84\x81R` \x80\x82 \x90\x93\x01\x84\x90U\x84T\x84\x82R\x82\x86\x01\x90\x93R`@\x90 \x91\x90\x91Ua\x10\xF7V[P_a\x10\xF7V[aE\xE7\x82aF\x97V[`@Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;\x90_\x90\xA2\x80Q\x15aF+Wa\x178\x82\x82aG&V[a\x15\xBCaG\x98V[_\x82_\x01\x82\x81T\x81\x10aFHWaFHaW7V[\x90_R` _ \x01T\x90P\x92\x91PPV[aFaaG\xD0V[a\x1D\x85W`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x01`\x01`\xA0\x1B\x03\x16;_\x03aF\xE5W`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x01a\x11YV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[``__\x84`\x01`\x01`\xA0\x1B\x03\x16\x84`@QaGB\x91\x90aT\xBDV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14aGzW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>aG\x7FV[``\x91P[P\x91P\x91PaG\x8F\x85\x83\x83aG\xEEV[\x95\x94PPPPPV[4\x15a\x1D\x85W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_aG\xD9a?\xD7V[Th\x01\0\0\0\0\0\0\0\0\x90\x04`\xFF\x16\x91\x90PV[``\x82aH\x03WaG\xFE\x82aHcV[a\x17lV[\x81Q\x15\x80\x15aH\x1AWP`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15[\x15aH\\W`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16`\x04\x82\x01R`$\x01a\x11YV[P\x80a\x17lV[\x80Q\x15aHrW\x80Q` \x82\x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_` \x82\x84\x03\x12\x15aH\xB4W__\xFD[\x815\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x81\x14a\x17lW__\xFD[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14aH\xF9W__\xFD[\x91\x90PV[___``\x84\x86\x03\x12\x15aI\x10W__\xFD[\x835\x92PaI ` \x85\x01aH\xE3V[\x91PaI.`@\x85\x01aH\xE3V[\x90P\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15aIGW__\xFD[P5\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x17l` \x83\x01\x84aINV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aI\xC6WaI\xC6aI\x8EV[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15aI\xF5WaI\xF5aI\x8EV[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aJ\x16WaJ\x16aI\x8EV[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[_\x82`\x1F\x83\x01\x12aJ3W__\xFD[\x815` \x83\x01_aJKaJF\x84aI\xFDV[aI\xCCV[\x90P\x82\x81R\x85\x83\x83\x01\x11\x15aJ^W__\xFD[\x82\x82` \x83\x017_\x92\x81\x01` \x01\x92\x90\x92RP\x93\x92PPPV[___``\x84\x86\x03\x12\x15aJ\x8AW__\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aJ\xA0W__\xFD[aJ\xAC\x86\x82\x87\x01aJ$V[\x93PPaJ\xBB` \x85\x01aH\xE3V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[`@\x81R_aJ\xDE`@\x83\x01\x85aINV[\x82\x81\x03` \x84\x01RaG\x8F\x81\x85aINV[__\x83`\x1F\x84\x01\x12aK\0W__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aK\x17W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15aK.W__\xFD[\x92P\x92\x90PV[___`@\x84\x86\x03\x12\x15aKGW__\xFD[\x835\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aKdW__\xFD[aKp\x86\x82\x87\x01aJ\xF0V[\x94\x97\x90\x96P\x93\x94PPPPV[__`@\x83\x85\x03\x12\x15aK\x8EW__\xFD[\x825\x91PaK\x9E` \x84\x01aH\xE3V[\x90P\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15aK\xB8W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aK\xCEW__\xFD[aK\xDA\x85\x82\x86\x01aJ\xF0V[\x90\x96\x90\x95P\x93PPPPV[\x81Q`\x01`\x01`\xA0\x1B\x03\x16\x81Ra\x01\x80\x81\x01` \x83\x01QaL\x12` \x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`@\x83\x01QaL-`@\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P``\x83\x01QaLH``\x84\x01\x82`\x01`\x01`\xA0\x1B\x03\x16\x90RV[P`\x80\x83\x01Q`\x80\x83\x01R`\xA0\x83\x01Q`\xA0\x83\x01R`\xC0\x83\x01Q`\xC0\x83\x01R`\xE0\x83\x01Q`\xE0\x83\x01Ra\x01\0\x83\x01Qa\x01\0\x83\x01Ra\x01 \x83\x01Qa\x01 \x83\x01Ra\x01@\x83\x01QaL\x9Ea\x01@\x84\x01\x82\x15\x15\x90RV[Pa\x01`\x92\x83\x01Q\x91\x90\x92\x01R\x90V[___``\x84\x86\x03\x12\x15aL\xC0W__\xFD[aL\xC9\x84aH\xE3V[\x92P` \x84\x015\x91PaI.`@\x85\x01aH\xE3V[__`@\x83\x85\x03\x12\x15aL\xEFW__\xFD[aL\xF8\x83aH\xE3V[\x91PaK\x9E` \x84\x01aH\xE3V[__`@\x83\x85\x03\x12\x15aM\x17W__\xFD[aM \x83aH\xE3V[\x94` \x93\x90\x93\x015\x93PPPV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15aMnW\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aMGV[P\x90\x95\x94PPPPPV[____``\x85\x87\x03\x12\x15aM\x8CW__\xFD[aM\x95\x85aH\xE3V[\x93P` \x85\x015\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aM\xB7W__\xFD[aM\xC3\x87\x82\x88\x01aJ\xF0V[\x95\x98\x94\x97P\x95PPPPV[__`@\x83\x85\x03\x12\x15aM\xE0W__\xFD[aM\xE9\x83aH\xE3V[\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aN\x04W__\xFD[a(T\x85\x82\x86\x01aJ$V[______`\xC0\x87\x89\x03\x12\x15aN%W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aN;W__\xFD[aNG\x89\x82\x8A\x01aJ$V[\x96PPaNV` \x88\x01aH\xE3V[\x94PaNd`@\x88\x01aH\xE3V[\x93P``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aN\x7FW__\xFD[aN\x8B\x89\x82\x8A\x01aJ$V[\x96\x99\x95\x98P\x93\x96`\x80\x81\x015\x95`\xA0\x90\x91\x015\x94P\x92PPPV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15aMnW\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aN\xBFV[_` \x82\x84\x03\x12\x15aN\xEDW__\xFD[a\x17l\x82aH\xE3V[__`@\x83\x85\x03\x12\x15aO\x07W__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[______`\xC0\x87\x89\x03\x12\x15aO+W__\xFD[aO4\x87aH\xE3V[\x95PaOB` \x88\x01aH\xE3V[\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015\x91PaOe`\xA0\x88\x01aH\xE3V[\x90P\x92\x95P\x92\x95P\x92\x95V[______`\x80\x87\x89\x03\x12\x15aO\x86W__\xFD[aO\x8F\x87aH\xE3V[\x95P` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aO\xAAW__\xFD[aO\xB6\x89\x82\x8A\x01aJ\xF0V[\x90\x96P\x94PP`@\x87\x015\x92P``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aO\xDCW__\xFD[aO\xE8\x89\x82\x8A\x01aJ\xF0V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[________a\x01\0\x89\x8B\x03\x12\x15aP\x12W__\xFD[aP\x1B\x89aH\xE3V[\x97PaP)` \x8A\x01aH\xE3V[\x96P`@\x89\x015\x95P``\x89\x015\x94P`\x80\x89\x015\x93P`\xA0\x89\x015\x92PaPS`\xC0\x8A\x01aH\xE3V[\x97\x9A\x96\x99P\x94\x97\x93\x96\x92\x95\x91\x94P\x91\x92`\xE0\x015\x91PV[____`\x80\x85\x87\x03\x12\x15aP~W__\xFD[aP\x87\x85aH\xE3V[\x93PaP\x95` \x86\x01aH\xE3V[\x92PaP\xA3`@\x86\x01aH\xE3V[\x93\x96\x92\x95P\x92\x93``\x015\x92PPV[___``\x84\x86\x03\x12\x15aP\xC5W__\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aP\xDBW__\xFD[aP\xE7\x86\x82\x87\x01aJ$V[\x96` \x86\x015\x96P`@\x90\x95\x015\x94\x93PPPPV[\x80\x15\x15\x81\x14a\x13\xFBW__\xFD[\x805aH\xF9\x81aP\xFDV[_a\x01\x80\x82\x84\x03\x12\x80\x15aQ'W__\xFD[PaQ0aI\xA2V[aQ9\x83aH\xE3V[\x81RaQG` \x84\x01aH\xE3V[` \x82\x01RaQX`@\x84\x01aH\xE3V[`@\x82\x01RaQi``\x84\x01aH\xE3V[``\x82\x01R`\x80\x83\x81\x015\x90\x82\x01R`\xA0\x80\x84\x015\x90\x82\x01R`\xC0\x80\x84\x015\x90\x82\x01R`\xE0\x80\x84\x015\x90\x82\x01Ra\x01\0\x80\x84\x015\x90\x82\x01Ra\x01 \x80\x84\x015\x90\x82\x01RaQ\xB9a\x01@\x84\x01aQ\nV[a\x01@\x82\x01Ra\x01`\x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x91\x90PV[___`@\x84\x86\x03\x12\x15aQ\xE5W__\xFD[aQ\xEE\x84aH\xE3V[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aKdW__\xFD[_________a\x01 \x8A\x8C\x03\x12\x15aR\"W__\xFD[aR+\x8AaH\xE3V[\x98P` \x8A\x015\x97PaR@`@\x8B\x01aH\xE3V[\x96PaRN``\x8B\x01aH\xE3V[\x95PaR\\`\x80\x8B\x01aH\xE3V[\x94PaRj`\xA0\x8B\x01aH\xE3V[\x98\x9B\x97\x9AP\x95\x98\x94\x97\x93\x96\x93\x95PPPP`\xC0\x82\x015\x91`\xE0\x81\x015\x91a\x01\0\x90\x91\x015\x90V[`\xA0\x81R_aR\xA3`\xA0\x83\x01\x88aINV[`\x01`\x01`\xA0\x1B\x03\x96\x87\x16` \x84\x01R\x94\x90\x95\x16`@\x82\x01R``\x81\x01\x92\x90\x92R`\x80\x90\x91\x01R\x92\x91PPV[_aR\xDDaJF\x84aI\xFDV[\x90P\x82\x81R\x83\x83\x83\x01\x11\x15aR\xF0W__\xFD[\x82\x82` \x83\x01^_` \x84\x83\x01\x01R\x93\x92PPPV[_` \x82\x84\x03\x12\x15aS\x16W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aS,W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13aS<W__\xFD[a\x1D\xCB\x84\x82Q` \x84\x01aR\xD0V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_`\x01\x82\x01aSpWaSpaSKV[P`\x01\x01\x90V[`@\x81R_aS\x89`@\x83\x01\x86aINV[\x82\x81\x03` \x84\x01R\x83\x81R\x83\x85` \x83\x017_` \x85\x83\x01\x01R` `\x1F\x19`\x1F\x86\x01\x16\x82\x01\x01\x91PP\x94\x93PPPPV[_` \x82\x84\x03\x12\x15aS\xCBW__\xFD[\x81Qa\x17l\x81aP\xFDV[\x80\x82\x01\x80\x82\x11\x15a\x10\xF7Wa\x10\xF7aSKV[a\x01\0\x81R_aS\xFDa\x01\0\x83\x01\x8BaINV[`\x01`\x01`\xA0\x1B\x03\x8A\x16` \x84\x01R`\x01`\x01`\xA0\x1B\x03\x89\x16`@\x84\x01R`\x01`\x01`\xA0\x1B\x03\x88\x16``\x84\x01R\x82\x81\x03`\x80\x84\x01RaT<\x81\x88aINV[`\xA0\x84\x01\x96\x90\x96RPP`\xC0\x81\x01\x92\x90\x92R`\xE0\x90\x91\x01R\x95\x94PPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x10\xF7Wa\x10\xF7aSKV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x10\xF7Wa\x10\xF7aSKV[_\x82aT\xA1WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a\x17l\x82\x84aT\xA6V[`\xA0\x81R_aT\xDA`\xA0\x83\x01\x88aINV[\x90P`\x01`\x01`\xA0\x1B\x03\x86\x16` \x83\x01R\x84`@\x83\x01R\x83``\x83\x01R\x82`\x80\x83\x01R\x96\x95PPPPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80aU\x1BW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aU9WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x178W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15aUdWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15aU\x83W_\x81U`\x01\x01aUpV[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aU\xA4WaU\xA4aI\x8EV[aU\xB8\x81aU\xB2\x84TaU\x07V[\x84aU?V[` `\x1F\x82\x11`\x01\x81\x14aU\xEAW_\x83\x15aU\xD3WP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84UaU\x83V[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15aV\x19W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01aU\xF9V[P\x84\x82\x10\x15aV6W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[_` \x82\x84\x03\x12\x15aVUW__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01R_a\x17i`@\x83\x01\x84aINV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x15aV\x95WaV\x95aI\x8EV[aV\xA9\x83aV\xA3\x83TaU\x07V[\x83aU?V[_`\x1F\x84\x11`\x01\x81\x14aV\xDAW_\x85\x15aV\xC3WP\x83\x82\x015[_\x19`\x03\x87\x90\x1B\x1C\x19\x16`\x01\x86\x90\x1B\x17\x83UaU\x83V[_\x83\x81R` \x81 `\x1F\x19\x87\x16\x91[\x82\x81\x10\x15aW\tW\x86\x85\x015\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01aV\xE9V[P\x86\x82\x10\x15aW%W_\x19`\xF8\x88`\x03\x1B\x16\x1C\x19\x84\x87\x015\x16\x81U[PP`\x01\x85`\x01\x1B\x01\x83UPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFEchange-contract-upgrade-bls-validatorchange-swap-request-bls-validator",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressEmptyCode(address)` and selector `0x9996b315`.
```solidity
error AddressEmptyCode(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressEmptyCode {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressEmptyCode> for UnderlyingRustTuple<'_> {
            fn from(value: AddressEmptyCode) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressEmptyCode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressEmptyCode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressEmptyCode(address)";
            const SELECTOR: [u8; 4] = [153u8, 150u8, 179u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AlreadyFulfilled()` and selector `0x4a4117f9`.
```solidity
error AlreadyFulfilled();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyFulfilled;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyFulfilled> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyFulfilled) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyFulfilled {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyFulfilled {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyFulfilled()";
            const SELECTOR: [u8; 4] = [74u8, 65u8, 23u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `BLSSignatureVerificationFailed()` and selector `0xd24bb4ea`.
```solidity
error BLSSignatureVerificationFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BLSSignatureVerificationFailed;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BLSSignatureVerificationFailed>
        for UnderlyingRustTuple<'_> {
            fn from(value: BLSSignatureVerificationFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for BLSSignatureVerificationFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BLSSignatureVerificationFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BLSSignatureVerificationFailed()";
            const SELECTOR: [u8; 4] = [210u8, 75u8, 180u8, 234u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `DestinationChainIdNotSupported(uint256)` and selector `0x7c61178e`.
```solidity
error DestinationChainIdNotSupported(uint256 dstChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DestinationChainIdNotSupported {
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DestinationChainIdNotSupported>
        for UnderlyingRustTuple<'_> {
            fn from(value: DestinationChainIdNotSupported) -> Self {
                (value.dstChainId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for DestinationChainIdNotSupported {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { dstChainId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for DestinationChainIdNotSupported {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DestinationChainIdNotSupported(uint256)";
            const SELECTOR: [u8; 4] = [124u8, 97u8, 23u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967InvalidImplementation(address)` and selector `0x4c9c8ce3`.
```solidity
error ERC1967InvalidImplementation(address implementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidImplementation {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidImplementation>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidImplementation) -> Self {
                (value.implementation,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1967InvalidImplementation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { implementation: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidImplementation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidImplementation(address)";
            const SELECTOR: [u8; 4] = [76u8, 156u8, 140u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967NonPayable()` and selector `0xb398979f`.
```solidity
error ERC1967NonPayable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967NonPayable;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967NonPayable> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967NonPayable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967NonPayable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967NonPayable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967NonPayable()";
            const SELECTOR: [u8; 4] = [179u8, 152u8, 151u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FailedCall()` and selector `0xd6bda275`.
```solidity
error FailedCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedCall;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedCall> for UnderlyingRustTuple<'_> {
            fn from(value: FailedCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedCall()";
            const SELECTOR: [u8; 4] = [214u8, 189u8, 162u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FeeBpsExceedsThreshold(uint256)` and selector `0x48e4389e`.
```solidity
error FeeBpsExceedsThreshold(uint256 maxFeeBps);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FeeBpsExceedsThreshold {
        #[allow(missing_docs)]
        pub maxFeeBps: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FeeBpsExceedsThreshold> for UnderlyingRustTuple<'_> {
            fn from(value: FeeBpsExceedsThreshold) -> Self {
                (value.maxFeeBps,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FeeBpsExceedsThreshold {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { maxFeeBps: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FeeBpsExceedsThreshold {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FeeBpsExceedsThreshold(uint256)";
            const SELECTOR: [u8; 4] = [72u8, 228u8, 56u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxFeeBps),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FeeTooLow()` and selector `0x732f9413`.
```solidity
error FeeTooLow();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FeeTooLow;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FeeTooLow> for UnderlyingRustTuple<'_> {
            fn from(value: FeeTooLow) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FeeTooLow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FeeTooLow {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FeeTooLow()";
            const SELECTOR: [u8; 4] = [115u8, 47u8, 148u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `GrantRoleFailed()` and selector `0x589efb50`.
```solidity
error GrantRoleFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GrantRoleFailed;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<GrantRoleFailed> for UnderlyingRustTuple<'_> {
            fn from(value: GrantRoleFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for GrantRoleFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for GrantRoleFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "GrantRoleFailed()";
            const SELECTOR: [u8; 4] = [88u8, 158u8, 251u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientVerificationFeeBalance()` and selector `0xd0fcc851`.
```solidity
error InsufficientVerificationFeeBalance();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientVerificationFeeBalance;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientVerificationFeeBalance>
        for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientVerificationFeeBalance) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InsufficientVerificationFeeBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientVerificationFeeBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientVerificationFeeBalance()";
            const SELECTOR: [u8; 4] = [208u8, 252u8, 200u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidFeeBps()` and selector `0x8bff87cf`.
```solidity
error InvalidFeeBps();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidFeeBps;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidFeeBps> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidFeeBps) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidFeeBps {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidFeeBps {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidFeeBps()";
            const SELECTOR: [u8; 4] = [139u8, 255u8, 135u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidTokenOrRecipient()` and selector `0x295ba290`.
```solidity
error InvalidTokenOrRecipient();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidTokenOrRecipient;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidTokenOrRecipient> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidTokenOrRecipient) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidTokenOrRecipient {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidTokenOrRecipient {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidTokenOrRecipient()";
            const SELECTOR: [u8; 4] = [41u8, 91u8, 162u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NewFeeTooLow(uint256,uint256)` and selector `0x1b97bd2a`.
```solidity
error NewFeeTooLow(uint256 newFee, uint256 currentFee);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NewFeeTooLow {
        #[allow(missing_docs)]
        pub newFee: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentFee: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NewFeeTooLow> for UnderlyingRustTuple<'_> {
            fn from(value: NewFeeTooLow) -> Self {
                (value.newFee, value.currentFee)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NewFeeTooLow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    newFee: tuple.0,
                    currentFee: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NewFeeTooLow {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NewFeeTooLow(uint256,uint256)";
            const SELECTOR: [u8; 4] = [27u8, 151u8, 189u8, 42u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newFee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentFee),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoUpgradePending()` and selector `0x52c650f9`.
```solidity
error NoUpgradePending();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoUpgradePending;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoUpgradePending> for UnderlyingRustTuple<'_> {
            fn from(value: NoUpgradePending) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoUpgradePending {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoUpgradePending {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoUpgradePending()";
            const SELECTOR: [u8; 4] = [82u8, 198u8, 80u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SafeERC20FailedOperation(address)` and selector `0x5274afe7`.
```solidity
error SafeERC20FailedOperation(address token);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeERC20FailedOperation {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeERC20FailedOperation>
        for UnderlyingRustTuple<'_> {
            fn from(value: SafeERC20FailedOperation) -> Self {
                (value.token,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SafeERC20FailedOperation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { token: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeERC20FailedOperation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeERC20FailedOperation(address)";
            const SELECTOR: [u8; 4] = [82u8, 116u8, 175u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SameVersionUpgradeNotAllowed()` and selector `0x157224fe`.
```solidity
error SameVersionUpgradeNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SameVersionUpgradeNotAllowed;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SameVersionUpgradeNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: SameVersionUpgradeNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SameVersionUpgradeNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SameVersionUpgradeNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SameVersionUpgradeNotAllowed()";
            const SELECTOR: [u8; 4] = [21u8, 114u8, 36u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SourceChainIdMismatch(uint256,uint256)` and selector `0x744a1481`.
```solidity
error SourceChainIdMismatch(uint256 swapRequestParamsSrcChainId, uint256 contractChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SourceChainIdMismatch {
        #[allow(missing_docs)]
        pub swapRequestParamsSrcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub contractChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SourceChainIdMismatch> for UnderlyingRustTuple<'_> {
            fn from(value: SourceChainIdMismatch) -> Self {
                (value.swapRequestParamsSrcChainId, value.contractChainId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SourceChainIdMismatch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    swapRequestParamsSrcChainId: tuple.0,
                    contractChainId: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SourceChainIdMismatch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SourceChainIdMismatch(uint256,uint256)";
            const SELECTOR: [u8; 4] = [116u8, 74u8, 20u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.swapRequestParamsSrcChainId,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contractChainId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SourceChainIdShouldBeDifferentFromDestination(uint256,uint256)` and selector `0x9c8d8d09`.
```solidity
error SourceChainIdShouldBeDifferentFromDestination(uint256 srcChainId, uint256 dstChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SourceChainIdShouldBeDifferentFromDestination {
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SourceChainIdShouldBeDifferentFromDestination>
        for UnderlyingRustTuple<'_> {
            fn from(value: SourceChainIdShouldBeDifferentFromDestination) -> Self {
                (value.srcChainId, value.dstChainId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SourceChainIdShouldBeDifferentFromDestination {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    srcChainId: tuple.0,
                    dstChainId: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError
        for SourceChainIdShouldBeDifferentFromDestination {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SourceChainIdShouldBeDifferentFromDestination(uint256,uint256)";
            const SELECTOR: [u8; 4] = [156u8, 141u8, 141u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.srcChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SwapRequestCancellationAlreadyStaged()` and selector `0x08c62bab`.
```solidity
error SwapRequestCancellationAlreadyStaged();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SwapRequestCancellationAlreadyStaged;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapRequestCancellationAlreadyStaged>
        for UnderlyingRustTuple<'_> {
            fn from(value: SwapRequestCancellationAlreadyStaged) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SwapRequestCancellationAlreadyStaged {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SwapRequestCancellationAlreadyStaged {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SwapRequestCancellationAlreadyStaged()";
            const SELECTOR: [u8; 4] = [8u8, 198u8, 43u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SwapRequestCancellationNotStaged()` and selector `0x160d218e`.
```solidity
error SwapRequestCancellationNotStaged();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SwapRequestCancellationNotStaged;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapRequestCancellationNotStaged>
        for UnderlyingRustTuple<'_> {
            fn from(value: SwapRequestCancellationNotStaged) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SwapRequestCancellationNotStaged {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SwapRequestCancellationNotStaged {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SwapRequestCancellationNotStaged()";
            const SELECTOR: [u8; 4] = [22u8, 13u8, 33u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SwapRequestCancellationWindowNotPassed()` and selector `0x22341892`.
```solidity
error SwapRequestCancellationWindowNotPassed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SwapRequestCancellationWindowNotPassed;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapRequestCancellationWindowNotPassed>
        for UnderlyingRustTuple<'_> {
            fn from(value: SwapRequestCancellationWindowNotPassed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SwapRequestCancellationWindowNotPassed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SwapRequestCancellationWindowNotPassed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SwapRequestCancellationWindowNotPassed()";
            const SELECTOR: [u8; 4] = [34u8, 52u8, 24u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SwapRequestCancellationWindowTooShort()` and selector `0xe119bcf1`.
```solidity
error SwapRequestCancellationWindowTooShort();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SwapRequestCancellationWindowTooShort;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapRequestCancellationWindowTooShort>
        for UnderlyingRustTuple<'_> {
            fn from(value: SwapRequestCancellationWindowTooShort) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SwapRequestCancellationWindowTooShort {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SwapRequestCancellationWindowTooShort {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SwapRequestCancellationWindowTooShort()";
            const SELECTOR: [u8; 4] = [225u8, 25u8, 188u8, 241u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SwapRequestParametersMismatch()` and selector `0xc4fec7e0`.
```solidity
error SwapRequestParametersMismatch();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SwapRequestParametersMismatch;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapRequestParametersMismatch>
        for UnderlyingRustTuple<'_> {
            fn from(value: SwapRequestParametersMismatch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SwapRequestParametersMismatch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SwapRequestParametersMismatch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SwapRequestParametersMismatch()";
            const SELECTOR: [u8; 4] = [196u8, 254u8, 199u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `TokenMappingAlreadyExists()` and selector `0x800ef11e`.
```solidity
error TokenMappingAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TokenMappingAlreadyExists;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TokenMappingAlreadyExists>
        for UnderlyingRustTuple<'_> {
            fn from(value: TokenMappingAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TokenMappingAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TokenMappingAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TokenMappingAlreadyExists()";
            const SELECTOR: [u8; 4] = [128u8, 14u8, 241u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `TokenNotSupported()` and selector `0x3dd1b305`.
```solidity
error TokenNotSupported();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TokenNotSupported;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TokenNotSupported> for UnderlyingRustTuple<'_> {
            fn from(value: TokenNotSupported) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TokenNotSupported {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TokenNotSupported {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TokenNotSupported()";
            const SELECTOR: [u8; 4] = [61u8, 209u8, 179u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `TooLateToCancelUpgrade(uint256)` and selector `0xb19fe458`.
```solidity
error TooLateToCancelUpgrade(uint256 upgradeTime);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TooLateToCancelUpgrade {
        #[allow(missing_docs)]
        pub upgradeTime: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TooLateToCancelUpgrade> for UnderlyingRustTuple<'_> {
            fn from(value: TooLateToCancelUpgrade) -> Self {
                (value.upgradeTime,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TooLateToCancelUpgrade {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { upgradeTime: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TooLateToCancelUpgrade {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TooLateToCancelUpgrade(uint256)";
            const SELECTOR: [u8; 4] = [177u8, 159u8, 228u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.upgradeTime),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnauthorizedCallContext()` and selector `0xe07c8dba`.
```solidity
error UUPSUnauthorizedCallContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnauthorizedCallContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnauthorizedCallContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnauthorizedCallContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnauthorizedCallContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnauthorizedCallContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnauthorizedCallContext()";
            const SELECTOR: [u8; 4] = [224u8, 124u8, 141u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnsupportedProxiableUUID(bytes32)` and selector `0xaa1d49a4`.
```solidity
error UUPSUnsupportedProxiableUUID(bytes32 slot);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnsupportedProxiableUUID {
        #[allow(missing_docs)]
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnsupportedProxiableUUID>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnsupportedProxiableUUID) -> Self {
                (value.slot,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnsupportedProxiableUUID {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { slot: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnsupportedProxiableUUID {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnsupportedProxiableUUID(bytes32)";
            const SELECTOR: [u8; 4] = [170u8, 29u8, 73u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UnauthorisedCaller()` and selector `0x02cda8fe`.
```solidity
error UnauthorisedCaller();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnauthorisedCaller;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorisedCaller> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorisedCaller) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorisedCaller {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorisedCaller {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorisedCaller()";
            const SELECTOR: [u8; 4] = [2u8, 205u8, 168u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UpgradeDelayTooShort()` and selector `0x65e1b9dc`.
```solidity
error UpgradeDelayTooShort();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UpgradeDelayTooShort;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UpgradeDelayTooShort> for UnderlyingRustTuple<'_> {
            fn from(value: UpgradeDelayTooShort) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UpgradeDelayTooShort {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UpgradeDelayTooShort {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UpgradeDelayTooShort()";
            const SELECTOR: [u8; 4] = [101u8, 225u8, 185u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UpgradeFailed()` and selector `0x55299b49`.
```solidity
error UpgradeFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UpgradeFailed;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UpgradeFailed> for UnderlyingRustTuple<'_> {
            fn from(value: UpgradeFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UpgradeFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UpgradeFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UpgradeFailed()";
            const SELECTOR: [u8; 4] = [85u8, 41u8, 155u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UpgradeMustGoThroughExecuteUpgrade()` and selector `0x5cb4a606`.
```solidity
error UpgradeMustGoThroughExecuteUpgrade();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UpgradeMustGoThroughExecuteUpgrade;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UpgradeMustGoThroughExecuteUpgrade>
        for UnderlyingRustTuple<'_> {
            fn from(value: UpgradeMustGoThroughExecuteUpgrade) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UpgradeMustGoThroughExecuteUpgrade {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UpgradeMustGoThroughExecuteUpgrade {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UpgradeMustGoThroughExecuteUpgrade()";
            const SELECTOR: [u8; 4] = [92u8, 180u8, 166u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UpgradeTimeMustRespectDelay(uint256)` and selector `0x0cd4e2d6`.
```solidity
error UpgradeTimeMustRespectDelay(uint256 earliestTime);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UpgradeTimeMustRespectDelay {
        #[allow(missing_docs)]
        pub earliestTime: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UpgradeTimeMustRespectDelay>
        for UnderlyingRustTuple<'_> {
            fn from(value: UpgradeTimeMustRespectDelay) -> Self {
                (value.earliestTime,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UpgradeTimeMustRespectDelay {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { earliestTime: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UpgradeTimeMustRespectDelay {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UpgradeTimeMustRespectDelay(uint256)";
            const SELECTOR: [u8; 4] = [12u8, 212u8, 226u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.earliestTime),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UpgradeTooEarly(uint256)` and selector `0x61813b80`.
```solidity
error UpgradeTooEarly(uint256 upgradeTime);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UpgradeTooEarly {
        #[allow(missing_docs)]
        pub upgradeTime: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UpgradeTooEarly> for UnderlyingRustTuple<'_> {
            fn from(value: UpgradeTooEarly) -> Self {
                (value.upgradeTime,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UpgradeTooEarly {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { upgradeTime: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UpgradeTooEarly {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UpgradeTooEarly(uint256)";
            const SELECTOR: [u8; 4] = [97u8, 129u8, 59u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.upgradeTime),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAmount()` and selector `0x1f2a2005`.
```solidity
error ZeroAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAmount;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAmount()";
            const SELECTOR: [u8; 4] = [31u8, 42u8, 32u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `BLSValidatorUpdated(address)` and selector `0xc37fcad33674251baba1cbc16b2e8e3883ff25e6105973bc7a7f9bd7fafc2199`.
```solidity
event BLSValidatorUpdated(address indexed blsValidator);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BLSValidatorUpdated {
        #[allow(missing_docs)]
        pub blsValidator: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BLSValidatorUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BLSValidatorUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                195u8, 127u8, 202u8, 211u8, 54u8, 116u8, 37u8, 27u8, 171u8, 161u8, 203u8,
                193u8, 107u8, 46u8, 142u8, 56u8, 131u8, 255u8, 37u8, 230u8, 16u8, 89u8,
                115u8, 188u8, 122u8, 127u8, 155u8, 215u8, 250u8, 252u8, 33u8, 153u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { blsValidator: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.blsValidator.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.blsValidator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BLSValidatorUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BLSValidatorUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BLSValidatorUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ContractUpgradeBLSValidatorUpdated(address)` and selector `0x78a7faffd49667f6d2bc16fa2c528710c09fc0aa73325a3f28e161f8ae3ef4a1`.
```solidity
event ContractUpgradeBLSValidatorUpdated(address indexed contractUpgradeBlsValidator);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ContractUpgradeBLSValidatorUpdated {
        #[allow(missing_docs)]
        pub contractUpgradeBlsValidator: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ContractUpgradeBLSValidatorUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ContractUpgradeBLSValidatorUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                120u8, 167u8, 250u8, 255u8, 212u8, 150u8, 103u8, 246u8, 210u8, 188u8,
                22u8, 250u8, 44u8, 82u8, 135u8, 16u8, 192u8, 159u8, 192u8, 170u8, 115u8,
                50u8, 90u8, 63u8, 40u8, 225u8, 97u8, 248u8, 174u8, 62u8, 244u8, 161u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contractUpgradeBlsValidator: topics.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.contractUpgradeBlsValidator.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.contractUpgradeBlsValidator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for ContractUpgradeBLSValidatorUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ContractUpgradeBLSValidatorUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ContractUpgradeBLSValidatorUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DestinationChainIdBlocked(uint256)` and selector `0xf07f42691c978b524369cf2893a7ca31ff408e49e086286e9cae920ddf94c119`.
```solidity
event DestinationChainIdBlocked(uint256 chainId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DestinationChainIdBlocked {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DestinationChainIdBlocked {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DestinationChainIdBlocked(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                240u8, 127u8, 66u8, 105u8, 28u8, 151u8, 139u8, 82u8, 67u8, 105u8, 207u8,
                40u8, 147u8, 167u8, 202u8, 49u8, 255u8, 64u8, 142u8, 73u8, 224u8, 134u8,
                40u8, 110u8, 156u8, 174u8, 146u8, 13u8, 223u8, 148u8, 193u8, 25u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { chainId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DestinationChainIdBlocked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DestinationChainIdBlocked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DestinationChainIdBlocked,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DestinationChainIdPermitted(uint256)` and selector `0x047b2668ff544a8bbf30bd7ba3e75486baa01a04badf5386b6c3bc9a7da4d663`.
```solidity
event DestinationChainIdPermitted(uint256 chainId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DestinationChainIdPermitted {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DestinationChainIdPermitted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DestinationChainIdPermitted(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                4u8, 123u8, 38u8, 104u8, 255u8, 84u8, 74u8, 139u8, 191u8, 48u8, 189u8,
                123u8, 163u8, 231u8, 84u8, 134u8, 186u8, 160u8, 26u8, 4u8, 186u8, 223u8,
                83u8, 134u8, 182u8, 195u8, 188u8, 154u8, 125u8, 164u8, 214u8, 99u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { chainId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DestinationChainIdPermitted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DestinationChainIdPermitted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DestinationChainIdPermitted,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `MinimumContractUpgradeDelayUpdated(uint256)` and selector `0xe28f4f0d71292e4c2c0d6449ff0ddc8312fb9eeb604ca560c4dbe120fdf107ce`.
```solidity
event MinimumContractUpgradeDelayUpdated(uint256 newDelay);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct MinimumContractUpgradeDelayUpdated {
        #[allow(missing_docs)]
        pub newDelay: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for MinimumContractUpgradeDelayUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "MinimumContractUpgradeDelayUpdated(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                226u8, 143u8, 79u8, 13u8, 113u8, 41u8, 46u8, 76u8, 44u8, 13u8, 100u8,
                73u8, 255u8, 13u8, 220u8, 131u8, 18u8, 251u8, 158u8, 235u8, 96u8, 76u8,
                165u8, 96u8, 196u8, 219u8, 225u8, 32u8, 253u8, 241u8, 7u8, 206u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newDelay: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newDelay),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for MinimumContractUpgradeDelayUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&MinimumContractUpgradeDelayUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &MinimumContractUpgradeDelayUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SolverPayoutFulfilled(bytes32)` and selector `0xa8ee081f5df03ba00255280c781ed6a1a67c970250e3686f958c19accb08d480`.
```solidity
event SolverPayoutFulfilled(bytes32 indexed requestId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SolverPayoutFulfilled {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SolverPayoutFulfilled {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "SolverPayoutFulfilled(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                168u8, 238u8, 8u8, 31u8, 93u8, 240u8, 59u8, 160u8, 2u8, 85u8, 40u8, 12u8,
                120u8, 30u8, 214u8, 161u8, 166u8, 124u8, 151u8, 2u8, 80u8, 227u8, 104u8,
                111u8, 149u8, 140u8, 25u8, 172u8, 203u8, 8u8, 212u8, 128u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { requestId: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.requestId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.requestId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SolverPayoutFulfilled {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SolverPayoutFulfilled> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SolverPayoutFulfilled) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SwapRequestCancellationStaged(bytes32,address,uint256)` and selector `0x2d21c8505b48b08cf178a20d2a670179e26cfbb49ffcff651632395215b6afb8`.
```solidity
event SwapRequestCancellationStaged(bytes32 indexed requestId, address indexed user, uint256 initiatedAt);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SwapRequestCancellationStaged {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub initiatedAt: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SwapRequestCancellationStaged {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "SwapRequestCancellationStaged(bytes32,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                45u8, 33u8, 200u8, 80u8, 91u8, 72u8, 176u8, 140u8, 241u8, 120u8, 162u8,
                13u8, 42u8, 103u8, 1u8, 121u8, 226u8, 108u8, 251u8, 180u8, 159u8, 252u8,
                255u8, 101u8, 22u8, 50u8, 57u8, 82u8, 21u8, 182u8, 175u8, 184u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    requestId: topics.1,
                    user: topics.2,
                    initiatedAt: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.initiatedAt),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.requestId.clone(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.requestId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SwapRequestCancellationStaged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SwapRequestCancellationStaged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SwapRequestCancellationStaged,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SwapRequestCancellationWindowUpdated(uint256)` and selector `0x4d8212c5562fd1dd6ba92403efc18ca21cc3f3ac0069ff4395650bd2a4613a52`.
```solidity
event SwapRequestCancellationWindowUpdated(uint256 newSwapRequestCancellationWindow);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SwapRequestCancellationWindowUpdated {
        #[allow(missing_docs)]
        pub newSwapRequestCancellationWindow: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SwapRequestCancellationWindowUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SwapRequestCancellationWindowUpdated(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                77u8, 130u8, 18u8, 197u8, 86u8, 47u8, 209u8, 221u8, 107u8, 169u8, 36u8,
                3u8, 239u8, 193u8, 140u8, 162u8, 28u8, 195u8, 243u8, 172u8, 0u8, 105u8,
                255u8, 67u8, 149u8, 101u8, 11u8, 210u8, 164u8, 97u8, 58u8, 82u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newSwapRequestCancellationWindow: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.newSwapRequestCancellationWindow,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for SwapRequestCancellationWindowUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SwapRequestCancellationWindowUpdated>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SwapRequestCancellationWindowUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SwapRequestFulfilled(bytes32,uint256,uint256)` and selector `0x5819a5ec71a56682e3e8a46c40394c82de95e50a8d4aac7c7e2039d83feec174`.
```solidity
event SwapRequestFulfilled(bytes32 indexed requestId, uint256 indexed srcChainId, uint256 indexed dstChainId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SwapRequestFulfilled {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SwapRequestFulfilled {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "SwapRequestFulfilled(bytes32,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                88u8, 25u8, 165u8, 236u8, 113u8, 165u8, 102u8, 130u8, 227u8, 232u8,
                164u8, 108u8, 64u8, 57u8, 76u8, 130u8, 222u8, 149u8, 229u8, 10u8, 141u8,
                74u8, 172u8, 124u8, 126u8, 32u8, 57u8, 216u8, 63u8, 238u8, 193u8, 116u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    requestId: topics.1,
                    srcChainId: topics.2,
                    dstChainId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.requestId.clone(),
                    self.srcChainId.clone(),
                    self.dstChainId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.requestId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.srcChainId);
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.dstChainId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SwapRequestFulfilled {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SwapRequestFulfilled> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SwapRequestFulfilled) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SwapRequestRefundClaimed(bytes32,address,address,uint256)` and selector `0xbd3be89f6ca546f02b67ddd193d4f0e64f580f3c776e942e77a45093bd16da0c`.
```solidity
event SwapRequestRefundClaimed(bytes32 indexed requestId, address indexed user, address indexed recipient, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SwapRequestRefundClaimed {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SwapRequestRefundClaimed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "SwapRequestRefundClaimed(bytes32,address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 59u8, 232u8, 159u8, 108u8, 165u8, 70u8, 240u8, 43u8, 103u8, 221u8,
                209u8, 147u8, 212u8, 240u8, 230u8, 79u8, 88u8, 15u8, 60u8, 119u8, 110u8,
                148u8, 46u8, 119u8, 164u8, 80u8, 147u8, 189u8, 22u8, 218u8, 12u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    requestId: topics.1,
                    user: topics.2,
                    recipient: topics.3,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.requestId.clone(),
                    self.user.clone(),
                    self.recipient.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.requestId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.recipient,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SwapRequestRefundClaimed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SwapRequestRefundClaimed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SwapRequestRefundClaimed,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SwapRequestSolverFeeUpdated(bytes32)` and selector `0x2a33225c18747939dcf3b2bd3183bd352a2618e333ae356ad7352e8045719093`.
```solidity
event SwapRequestSolverFeeUpdated(bytes32 indexed requestId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SwapRequestSolverFeeUpdated {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SwapRequestSolverFeeUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "SwapRequestSolverFeeUpdated(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                42u8, 51u8, 34u8, 92u8, 24u8, 116u8, 121u8, 57u8, 220u8, 243u8, 178u8,
                189u8, 49u8, 131u8, 189u8, 53u8, 42u8, 38u8, 24u8, 227u8, 51u8, 174u8,
                53u8, 106u8, 215u8, 53u8, 46u8, 128u8, 69u8, 113u8, 144u8, 147u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { requestId: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.requestId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.requestId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SwapRequestSolverFeeUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SwapRequestSolverFeeUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SwapRequestSolverFeeUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SwapRequested(bytes32,uint256,uint256)` and selector `0xe2f0160fbe779abb246276d49dac0cb97c86df7cb72a510bb9cf21486f5c82af`.
```solidity
event SwapRequested(bytes32 indexed requestId, uint256 indexed srcChainId, uint256 indexed dstChainId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SwapRequested {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SwapRequested {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "SwapRequested(bytes32,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                226u8, 240u8, 22u8, 15u8, 190u8, 119u8, 154u8, 187u8, 36u8, 98u8, 118u8,
                212u8, 157u8, 172u8, 12u8, 185u8, 124u8, 134u8, 223u8, 124u8, 183u8,
                42u8, 81u8, 11u8, 185u8, 207u8, 33u8, 72u8, 111u8, 92u8, 130u8, 175u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    requestId: topics.1,
                    srcChainId: topics.2,
                    dstChainId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.requestId.clone(),
                    self.srcChainId.clone(),
                    self.dstChainId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.requestId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.srcChainId);
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.dstChainId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SwapRequested {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SwapRequested> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SwapRequested) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `TokenMappingAdded(uint256,address,address)` and selector `0x00f6b276aebfc163c3646a63a0286f845fdd2df56be91b61b62044067ce849a4`.
```solidity
event TokenMappingAdded(uint256 dstChainId, address dstToken, address srcToken);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TokenMappingAdded {
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstToken: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub srcToken: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TokenMappingAdded {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TokenMappingAdded(uint256,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                0u8, 246u8, 178u8, 118u8, 174u8, 191u8, 193u8, 99u8, 195u8, 100u8, 106u8,
                99u8, 160u8, 40u8, 111u8, 132u8, 95u8, 221u8, 45u8, 245u8, 107u8, 233u8,
                27u8, 97u8, 182u8, 32u8, 68u8, 6u8, 124u8, 232u8, 73u8, 164u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    dstChainId: data.0,
                    dstToken: data.1,
                    srcToken: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.dstToken,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.srcToken,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TokenMappingAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TokenMappingAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TokenMappingAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `TokenMappingRemoved(uint256,address,address)` and selector `0xa68c84bf085871be353dffa2cf1d898b864f4bfec8d7963268277b65609fc88e`.
```solidity
event TokenMappingRemoved(uint256 dstChainId, address dstToken, address srcToken);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TokenMappingRemoved {
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstToken: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub srcToken: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TokenMappingRemoved {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TokenMappingRemoved(uint256,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                166u8, 140u8, 132u8, 191u8, 8u8, 88u8, 113u8, 190u8, 53u8, 61u8, 255u8,
                162u8, 207u8, 29u8, 137u8, 139u8, 134u8, 79u8, 75u8, 254u8, 200u8, 215u8,
                150u8, 50u8, 104u8, 39u8, 123u8, 101u8, 96u8, 159u8, 200u8, 142u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    dstChainId: data.0,
                    dstToken: data.1,
                    srcToken: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.dstToken,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.srcToken,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TokenMappingRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TokenMappingRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TokenMappingRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `UpgradeCancelled(address)` and selector `0x3198dc80249fcfedbd0d06e1ff49a7695a51b006592328ce0b127cdeab77e936`.
```solidity
event UpgradeCancelled(address indexed cancelledImplementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UpgradeCancelled {
        #[allow(missing_docs)]
        pub cancelledImplementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UpgradeCancelled {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UpgradeCancelled(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                49u8, 152u8, 220u8, 128u8, 36u8, 159u8, 207u8, 237u8, 189u8, 13u8, 6u8,
                225u8, 255u8, 73u8, 167u8, 105u8, 90u8, 81u8, 176u8, 6u8, 89u8, 35u8,
                40u8, 206u8, 11u8, 18u8, 124u8, 222u8, 171u8, 119u8, 233u8, 54u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    cancelledImplementation: topics.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.cancelledImplementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.cancelledImplementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UpgradeCancelled {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UpgradeCancelled> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UpgradeCancelled) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `UpgradeExecuted(address)` and selector `0xfd5a9ae7c73c11fde86dd61704e937a04c99e7eef668050f685aabc5d8a6b2e4`.
```solidity
event UpgradeExecuted(address indexed newImplementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UpgradeExecuted {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UpgradeExecuted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UpgradeExecuted(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                253u8, 90u8, 154u8, 231u8, 199u8, 60u8, 17u8, 253u8, 232u8, 109u8, 214u8,
                23u8, 4u8, 233u8, 55u8, 160u8, 76u8, 153u8, 231u8, 238u8, 246u8, 104u8,
                5u8, 15u8, 104u8, 90u8, 171u8, 197u8, 216u8, 166u8, 178u8, 228u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newImplementation: topics.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newImplementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newImplementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UpgradeExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UpgradeExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UpgradeExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `UpgradeScheduled(address,uint256)` and selector `0xe1009627653eb47f7d0f3b4435749f7984a803c21f84a076cc4dcb0412cf066f`.
```solidity
event UpgradeScheduled(address indexed newImplementation, uint256 executeAfter);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UpgradeScheduled {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub executeAfter: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UpgradeScheduled {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UpgradeScheduled(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                225u8, 0u8, 150u8, 39u8, 101u8, 62u8, 180u8, 127u8, 125u8, 15u8, 59u8,
                68u8, 53u8, 116u8, 159u8, 121u8, 132u8, 168u8, 3u8, 194u8, 31u8, 132u8,
                160u8, 118u8, 204u8, 77u8, 203u8, 4u8, 18u8, 207u8, 6u8, 111u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newImplementation: topics.1,
                    executeAfter: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.executeAfter),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newImplementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newImplementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UpgradeScheduled {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UpgradeScheduled> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UpgradeScheduled) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Upgraded(address)` and selector `0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b`.
```solidity
event Upgraded(address indexed implementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Upgraded {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Upgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Upgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { implementation: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.implementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.implementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Upgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Upgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Upgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `VerificationFeeBpsUpdated(uint256)` and selector `0x853dd170f8306bb1eeb26a45f33d38947149fd8cffed21be04553a55a45a7b6e`.
```solidity
event VerificationFeeBpsUpdated(uint256 newFeeBps);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct VerificationFeeBpsUpdated {
        #[allow(missing_docs)]
        pub newFeeBps: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for VerificationFeeBpsUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "VerificationFeeBpsUpdated(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                133u8, 61u8, 209u8, 112u8, 248u8, 48u8, 107u8, 177u8, 238u8, 178u8,
                106u8, 69u8, 243u8, 61u8, 56u8, 148u8, 113u8, 73u8, 253u8, 140u8, 255u8,
                237u8, 33u8, 190u8, 4u8, 85u8, 58u8, 85u8, 164u8, 90u8, 123u8, 110u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newFeeBps: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newFeeBps),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for VerificationFeeBpsUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&VerificationFeeBpsUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &VerificationFeeBpsUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `VerificationFeeWithdrawn(address,address,uint256)` and selector `0x7e9246bb8df4f64094b38fb719d53d4aca12a45a519e1459fd099fa8c17dd3b0`.
```solidity
event VerificationFeeWithdrawn(address indexed token, address indexed recipient, uint256 amountOut);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct VerificationFeeWithdrawn {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for VerificationFeeWithdrawn {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "VerificationFeeWithdrawn(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                126u8, 146u8, 70u8, 187u8, 141u8, 244u8, 246u8, 64u8, 148u8, 179u8,
                143u8, 183u8, 25u8, 213u8, 61u8, 74u8, 202u8, 18u8, 164u8, 90u8, 81u8,
                158u8, 20u8, 89u8, 253u8, 9u8, 159u8, 168u8, 193u8, 125u8, 211u8, 176u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: topics.1,
                    recipient: topics.2,
                    amountOut: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountOut),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.token.clone(), self.recipient.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.recipient,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for VerificationFeeWithdrawn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&VerificationFeeWithdrawn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &VerificationFeeWithdrawn,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ADMIN_ROLE()` and selector `0x75b238fc`.
```solidity
function ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`ADMIN_ROLE()`](ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ADMIN_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ADMIN_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [117u8, 178u8, 56u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `BPS_DIVISOR()` and selector `0x191fe1ed`.
```solidity
function BPS_DIVISOR() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BPS_DIVISORCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`BPS_DIVISOR()`](BPS_DIVISORCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BPS_DIVISORReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BPS_DIVISORCall> for UnderlyingRustTuple<'_> {
                fn from(value: BPS_DIVISORCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for BPS_DIVISORCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BPS_DIVISORReturn> for UnderlyingRustTuple<'_> {
                fn from(value: BPS_DIVISORReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for BPS_DIVISORReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BPS_DIVISORCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BPS_DIVISOR()";
            const SELECTOR: [u8; 4] = [25u8, 31u8, 225u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: BPS_DIVISORReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: BPS_DIVISORReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `MAX_FEE_BPS()` and selector `0xd55be8c6`.
```solidity
function MAX_FEE_BPS() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_FEE_BPSCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`MAX_FEE_BPS()`](MAX_FEE_BPSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_FEE_BPSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_FEE_BPSCall> for UnderlyingRustTuple<'_> {
                fn from(value: MAX_FEE_BPSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MAX_FEE_BPSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_FEE_BPSReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MAX_FEE_BPSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MAX_FEE_BPSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MAX_FEE_BPSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MAX_FEE_BPS()";
            const SELECTOR: [u8; 4] = [213u8, 91u8, 232u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: MAX_FEE_BPSReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: MAX_FEE_BPSReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `UPGRADE_INTERFACE_VERSION()` and selector `0xad3cb1cc`.
```solidity
function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`UPGRADE_INTERFACE_VERSION()`](UPGRADE_INTERFACE_VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for UPGRADE_INTERFACE_VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UPGRADE_INTERFACE_VERSION()";
            const SELECTOR: [u8; 4] = [173u8, 60u8, 177u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `allowedDstChainIds(uint256)` and selector `0xeb091ac6`.
```solidity
function allowedDstChainIds(uint256) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDstChainIdsCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`allowedDstChainIds(uint256)`](allowedDstChainIdsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowedDstChainIdsReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDstChainIdsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedDstChainIdsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedDstChainIdsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowedDstChainIdsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allowedDstChainIdsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allowedDstChainIdsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowedDstChainIdsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowedDstChainIds(uint256)";
            const SELECTOR: [u8; 4] = [235u8, 9u8, 26u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: allowedDstChainIdsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: allowedDstChainIdsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `blockDestinationChainId(uint256)` and selector `0x6370d658`.
```solidity
function blockDestinationChainId(uint256 chainId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockDestinationChainIdCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`blockDestinationChainId(uint256)`](blockDestinationChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockDestinationChainIdReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockDestinationChainIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockDestinationChainIdCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockDestinationChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockDestinationChainIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockDestinationChainIdReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockDestinationChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl blockDestinationChainIdReturn {
            fn _tokenize(
                &self,
            ) -> <blockDestinationChainIdCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockDestinationChainIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = blockDestinationChainIdReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockDestinationChainId(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 112u8, 214u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                blockDestinationChainIdReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `blsValidatorUpdateParamsToBytes(string,address,uint256)` and selector `0x10ef2f5d`.
```solidity
function blsValidatorUpdateParamsToBytes(string memory action, address blsValidator, uint256 nonce) external view returns (bytes memory, bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blsValidatorUpdateParamsToBytesCall {
        #[allow(missing_docs)]
        pub action: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub blsValidator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`blsValidatorUpdateParamsToBytes(string,address,uint256)`](blsValidatorUpdateParamsToBytesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blsValidatorUpdateParamsToBytesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blsValidatorUpdateParamsToBytesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: blsValidatorUpdateParamsToBytesCall) -> Self {
                    (value.action, value.blsValidator, value.nonce)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blsValidatorUpdateParamsToBytesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        action: tuple.0,
                        blsValidator: tuple.1,
                        nonce: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blsValidatorUpdateParamsToBytesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: blsValidatorUpdateParamsToBytesReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blsValidatorUpdateParamsToBytesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        impl blsValidatorUpdateParamsToBytesReturn {
            fn _tokenize(
                &self,
            ) -> <blsValidatorUpdateParamsToBytesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blsValidatorUpdateParamsToBytesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = blsValidatorUpdateParamsToBytesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blsValidatorUpdateParamsToBytes(string,address,uint256)";
            const SELECTOR: [u8; 4] = [16u8, 239u8, 47u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.action,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.blsValidator,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                blsValidatorUpdateParamsToBytesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `buildSwapRequestParameters(address,address,uint256,uint256,uint256,uint256,address,uint256)` and selector `0xa9ee0fc2`.
```solidity
function buildSwapRequestParameters(address tokenIn, address tokenOut, uint256 amountOut, uint256 verificationFeeAmount, uint256 solverFeeAmount, uint256 dstChainId, address recipient, uint256 nonce) external view returns (IRouter.SwapRequestParameters memory swapRequestParams);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct buildSwapRequestParametersCall {
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub verificationFeeAmount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub solverFeeAmount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`buildSwapRequestParameters(address,address,uint256,uint256,uint256,uint256,address,uint256)`](buildSwapRequestParametersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct buildSwapRequestParametersReturn {
        #[allow(missing_docs)]
        pub swapRequestParams: <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<buildSwapRequestParametersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: buildSwapRequestParametersCall) -> Self {
                    (
                        value.tokenIn,
                        value.tokenOut,
                        value.amountOut,
                        value.verificationFeeAmount,
                        value.solverFeeAmount,
                        value.dstChainId,
                        value.recipient,
                        value.nonce,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for buildSwapRequestParametersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tokenIn: tuple.0,
                        tokenOut: tuple.1,
                        amountOut: tuple.2,
                        verificationFeeAmount: tuple.3,
                        solverFeeAmount: tuple.4,
                        dstChainId: tuple.5,
                        recipient: tuple.6,
                        nonce: tuple.7,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (IRouter::SwapRequestParameters,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<buildSwapRequestParametersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: buildSwapRequestParametersReturn) -> Self {
                    (value.swapRequestParams,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for buildSwapRequestParametersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapRequestParams: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for buildSwapRequestParametersCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (IRouter::SwapRequestParameters,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "buildSwapRequestParameters(address,address,uint256,uint256,uint256,uint256,address,uint256)";
            const SELECTOR: [u8; 4] = [169u8, 238u8, 15u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountOut),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.verificationFeeAmount,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.solverFeeAmount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <IRouter::SwapRequestParameters as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: buildSwapRequestParametersReturn = r.into();
                        r.swapRequestParams
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: buildSwapRequestParametersReturn = r.into();
                        r.swapRequestParams
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `cancelSwapRequestAndRefund(bytes32,address)` and selector `0xb21eac9e`.
```solidity
function cancelSwapRequestAndRefund(bytes32 requestId, address refundRecipient) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cancelSwapRequestAndRefundCall {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub refundRecipient: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`cancelSwapRequestAndRefund(bytes32,address)`](cancelSwapRequestAndRefundCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cancelSwapRequestAndRefundReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cancelSwapRequestAndRefundCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: cancelSwapRequestAndRefundCall) -> Self {
                    (value.requestId, value.refundRecipient)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for cancelSwapRequestAndRefundCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        requestId: tuple.0,
                        refundRecipient: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cancelSwapRequestAndRefundReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: cancelSwapRequestAndRefundReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for cancelSwapRequestAndRefundReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl cancelSwapRequestAndRefundReturn {
            fn _tokenize(
                &self,
            ) -> <cancelSwapRequestAndRefundCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for cancelSwapRequestAndRefundCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = cancelSwapRequestAndRefundReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "cancelSwapRequestAndRefund(bytes32,address)";
            const SELECTOR: [u8; 4] = [178u8, 30u8, 172u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.refundRecipient,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                cancelSwapRequestAndRefundReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `cancelUpgrade(bytes)` and selector `0x34473af1`.
```solidity
function cancelUpgrade(bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cancelUpgradeCall {
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`cancelUpgrade(bytes)`](cancelUpgradeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct cancelUpgradeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cancelUpgradeCall> for UnderlyingRustTuple<'_> {
                fn from(value: cancelUpgradeCall) -> Self {
                    (value.signature,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for cancelUpgradeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { signature: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<cancelUpgradeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: cancelUpgradeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for cancelUpgradeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl cancelUpgradeReturn {
            fn _tokenize(
                &self,
            ) -> <cancelUpgradeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for cancelUpgradeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = cancelUpgradeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "cancelUpgrade(bytes)";
            const SELECTOR: [u8; 4] = [52u8, 71u8, 58u8, 241u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                cancelUpgradeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `contractUpgradeBlsValidator()` and selector `0x15b17da4`.
```solidity
function contractUpgradeBlsValidator() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractUpgradeBlsValidatorCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`contractUpgradeBlsValidator()`](contractUpgradeBlsValidatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractUpgradeBlsValidatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractUpgradeBlsValidatorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: contractUpgradeBlsValidatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for contractUpgradeBlsValidatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractUpgradeBlsValidatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: contractUpgradeBlsValidatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for contractUpgradeBlsValidatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractUpgradeBlsValidatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contractUpgradeBlsValidator()";
            const SELECTOR: [u8; 4] = [21u8, 177u8, 125u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: contractUpgradeBlsValidatorReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: contractUpgradeBlsValidatorReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `contractUpgradeParamsToBytes(string,address,address,bytes,uint256,uint256)` and selector `0x504da5a9`.
```solidity
function contractUpgradeParamsToBytes(string memory action, address pendingImplementation, address newImplementation, bytes memory upgradeCalldata, uint256 upgradeTime, uint256 nonce) external view returns (bytes memory, bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractUpgradeParamsToBytesCall {
        #[allow(missing_docs)]
        pub action: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub pendingImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub upgradeCalldata: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub upgradeTime: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`contractUpgradeParamsToBytes(string,address,address,bytes,uint256,uint256)`](contractUpgradeParamsToBytesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractUpgradeParamsToBytesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractUpgradeParamsToBytesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: contractUpgradeParamsToBytesCall) -> Self {
                    (
                        value.action,
                        value.pendingImplementation,
                        value.newImplementation,
                        value.upgradeCalldata,
                        value.upgradeTime,
                        value.nonce,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for contractUpgradeParamsToBytesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        action: tuple.0,
                        pendingImplementation: tuple.1,
                        newImplementation: tuple.2,
                        upgradeCalldata: tuple.3,
                        upgradeTime: tuple.4,
                        nonce: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractUpgradeParamsToBytesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: contractUpgradeParamsToBytesReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for contractUpgradeParamsToBytesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        impl contractUpgradeParamsToBytesReturn {
            fn _tokenize(
                &self,
            ) -> <contractUpgradeParamsToBytesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractUpgradeParamsToBytesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractUpgradeParamsToBytesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contractUpgradeParamsToBytes(string,address,address,bytes,uint256,uint256)";
            const SELECTOR: [u8; 4] = [80u8, 77u8, 165u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.action,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.pendingImplementation,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.upgradeCalldata,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.upgradeTime),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                contractUpgradeParamsToBytesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `currentNonce()` and selector `0xadb610a3`.
```solidity
function currentNonce() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct currentNonceCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`currentNonce()`](currentNonceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct currentNonceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<currentNonceCall> for UnderlyingRustTuple<'_> {
                fn from(value: currentNonceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for currentNonceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<currentNonceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: currentNonceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for currentNonceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for currentNonceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "currentNonce()";
            const SELECTOR: [u8; 4] = [173u8, 182u8, 16u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: currentNonceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: currentNonceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `executeUpgrade()` and selector `0x7e896214`.
```solidity
function executeUpgrade() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeUpgradeCall;
    ///Container type for the return parameters of the [`executeUpgrade()`](executeUpgradeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeUpgradeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeUpgradeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeUpgradeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeUpgradeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeUpgradeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeUpgradeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeUpgradeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl executeUpgradeReturn {
            fn _tokenize(
                &self,
            ) -> <executeUpgradeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeUpgradeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeUpgradeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeUpgrade()";
            const SELECTOR: [u8; 4] = [126u8, 137u8, 98u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                executeUpgradeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAllowedDstChainId(uint256)` and selector `0x07efe930`.
```solidity
function getAllowedDstChainId(uint256 chainId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllowedDstChainIdCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAllowedDstChainId(uint256)`](getAllowedDstChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllowedDstChainIdReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllowedDstChainIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllowedDstChainIdCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllowedDstChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllowedDstChainIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllowedDstChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllowedDstChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllowedDstChainIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllowedDstChainId(uint256)";
            const SELECTOR: [u8; 4] = [7u8, 239u8, 233u8, 48u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAllowedDstChainIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAllowedDstChainIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCancelledSwapRequests()` and selector `0x5ed8b9d3`.
```solidity
function getCancelledSwapRequests() external view returns (bytes32[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCancelledSwapRequestsCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCancelledSwapRequests()`](getCancelledSwapRequestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCancelledSwapRequestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCancelledSwapRequestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCancelledSwapRequestsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCancelledSwapRequestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCancelledSwapRequestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCancelledSwapRequestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCancelledSwapRequestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCancelledSwapRequestsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCancelledSwapRequests()";
            const SELECTOR: [u8; 4] = [94u8, 216u8, 185u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCancelledSwapRequestsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCancelledSwapRequestsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getChainID()` and selector `0x564b81ef`.
```solidity
function getChainID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getChainID()`](getChainIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIDCall> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getChainIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getChainID()";
            const SELECTOR: [u8; 4] = [86u8, 75u8, 129u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getChainIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getChainIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getChainId()` and selector `0x3408e470`.
```solidity
function getChainId() external view returns (uint256 chainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getChainId()`](getChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainIdReturn {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIdReturn) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getChainId()";
            const SELECTOR: [u8; 4] = [52u8, 8u8, 228u8, 112u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getChainIdReturn = r.into();
                        r.chainId
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getChainIdReturn = r.into();
                        r.chainId
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getContractUpgradeBlsValidator()` and selector `0xa4c5a27a`.
```solidity
function getContractUpgradeBlsValidator() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getContractUpgradeBlsValidatorCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getContractUpgradeBlsValidator()`](getContractUpgradeBlsValidatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getContractUpgradeBlsValidatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getContractUpgradeBlsValidatorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getContractUpgradeBlsValidatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getContractUpgradeBlsValidatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getContractUpgradeBlsValidatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getContractUpgradeBlsValidatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getContractUpgradeBlsValidatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getContractUpgradeBlsValidatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getContractUpgradeBlsValidator()";
            const SELECTOR: [u8; 4] = [164u8, 197u8, 162u8, 122u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getContractUpgradeBlsValidatorReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getContractUpgradeBlsValidatorReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getFulfilledSolverRefunds()` and selector `0xa36d15ec`.
```solidity
function getFulfilledSolverRefunds() external view returns (bytes32[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFulfilledSolverRefundsCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getFulfilledSolverRefunds()`](getFulfilledSolverRefundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFulfilledSolverRefundsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFulfilledSolverRefundsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getFulfilledSolverRefundsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getFulfilledSolverRefundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFulfilledSolverRefundsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getFulfilledSolverRefundsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getFulfilledSolverRefundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getFulfilledSolverRefundsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getFulfilledSolverRefunds()";
            const SELECTOR: [u8; 4] = [163u8, 109u8, 21u8, 236u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getFulfilledSolverRefundsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getFulfilledSolverRefundsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getFulfilledTransfers()` and selector `0xf84ae3a9`.
```solidity
function getFulfilledTransfers() external view returns (bytes32[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFulfilledTransfersCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getFulfilledTransfers()`](getFulfilledTransfersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFulfilledTransfersReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFulfilledTransfersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getFulfilledTransfersCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getFulfilledTransfersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFulfilledTransfersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getFulfilledTransfersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getFulfilledTransfersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getFulfilledTransfersCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getFulfilledTransfers()";
            const SELECTOR: [u8; 4] = [248u8, 74u8, 227u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getFulfilledTransfersReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getFulfilledTransfersReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getMinimumContractUpgradeDelay()` and selector `0x027b7047`.
```solidity
function getMinimumContractUpgradeDelay() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinimumContractUpgradeDelayCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getMinimumContractUpgradeDelay()`](getMinimumContractUpgradeDelayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMinimumContractUpgradeDelayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinimumContractUpgradeDelayCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getMinimumContractUpgradeDelayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getMinimumContractUpgradeDelayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMinimumContractUpgradeDelayReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getMinimumContractUpgradeDelayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getMinimumContractUpgradeDelayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getMinimumContractUpgradeDelayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getMinimumContractUpgradeDelay()";
            const SELECTOR: [u8; 4] = [2u8, 123u8, 112u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getMinimumContractUpgradeDelayReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getMinimumContractUpgradeDelayReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleMember(bytes32,uint256)` and selector `0x9010d07c`.
```solidity
function getRoleMember(bytes32 role, uint256 index) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMemberCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleMember(bytes32,uint256)`](getRoleMemberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMemberReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMemberCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMemberCall) -> Self {
                    (value.role, value.index)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleMemberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        index: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMemberReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMemberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleMemberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleMemberCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleMember(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [144u8, 16u8, 208u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleMemberReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleMemberReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleMemberCount(bytes32)` and selector `0xca15c873`.
```solidity
function getRoleMemberCount(bytes32 role) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMemberCountCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleMemberCount(bytes32)`](getRoleMemberCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMemberCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMemberCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMemberCountCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRoleMemberCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMemberCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMemberCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRoleMemberCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleMemberCountCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleMemberCount(bytes32)";
            const SELECTOR: [u8; 4] = [202u8, 21u8, 200u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleMemberCountReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleMemberCountReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleMembers(bytes32)` and selector `0xa3246ad3`.
```solidity
function getRoleMembers(bytes32 role) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMembersCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleMembers(bytes32)`](getRoleMembersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMembersReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMembersCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMembersCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleMembersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMembersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMembersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRoleMembersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleMembersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleMembers(bytes32)";
            const SELECTOR: [u8; 4] = [163u8, 36u8, 106u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleMembersReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleMembersReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSwapRequestBlsValidator()` and selector `0xb444964c`.
```solidity
function getSwapRequestBlsValidator() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestBlsValidatorCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSwapRequestBlsValidator()`](getSwapRequestBlsValidatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestBlsValidatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestBlsValidatorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestBlsValidatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestBlsValidatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestBlsValidatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestBlsValidatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestBlsValidatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSwapRequestBlsValidatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSwapRequestBlsValidator()";
            const SELECTOR: [u8; 4] = [180u8, 68u8, 150u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getSwapRequestBlsValidatorReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getSwapRequestBlsValidatorReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSwapRequestId((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256))` and selector `0xdaadfec3`.
```solidity
function getSwapRequestId(IRouter.SwapRequestParameters memory p) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestIdCall {
        #[allow(missing_docs)]
        pub p: <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSwapRequestId((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256))`](getSwapRequestIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (IRouter::SwapRequestParameters,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestIdCall) -> Self {
                    (value.p,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { p: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSwapRequestIdCall {
            type Parameters<'a> = (IRouter::SwapRequestParameters,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSwapRequestId((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256))";
            const SELECTOR: [u8; 4] = [218u8, 173u8, 254u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <IRouter::SwapRequestParameters as alloy_sol_types::SolType>::tokenize(
                        &self.p,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getSwapRequestIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getSwapRequestIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSwapRequestParameters(bytes32)` and selector `0x3475bf8f`.
```solidity
function getSwapRequestParameters(bytes32 requestId) external view returns (IRouter.SwapRequestParameters memory swapRequestParams);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestParametersCall {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSwapRequestParameters(bytes32)`](getSwapRequestParametersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestParametersReturn {
        #[allow(missing_docs)]
        pub swapRequestParams: <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestParametersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestParametersCall) -> Self {
                    (value.requestId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestParametersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { requestId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (IRouter::SwapRequestParameters,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestParametersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestParametersReturn) -> Self {
                    (value.swapRequestParams,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestParametersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapRequestParams: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSwapRequestParametersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (IRouter::SwapRequestParameters,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSwapRequestParameters(bytes32)";
            const SELECTOR: [u8; 4] = [52u8, 117u8, 191u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <IRouter::SwapRequestParameters as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getSwapRequestParametersReturn = r.into();
                        r.swapRequestParams
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getSwapRequestParametersReturn = r.into();
                        r.swapRequestParams
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSwapRequestReceipt(bytes32)` and selector `0xf16dea82`.
```solidity
function getSwapRequestReceipt(bytes32 _requestId) external view returns (bytes32 requestId, uint256 srcChainId, uint256 dstChainId, address tokenIn, address tokenOut, bool fulfilled, address solver, address recipient, uint256 amountOut, uint256 fulfilledAt);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestReceiptCall {
        #[allow(missing_docs)]
        pub _requestId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSwapRequestReceipt(bytes32)`](getSwapRequestReceiptCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSwapRequestReceiptReturn {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub fulfilled: bool,
        #[allow(missing_docs)]
        pub solver: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fulfilledAt: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestReceiptCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestReceiptCall) -> Self {
                    (value._requestId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestReceiptCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _requestId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSwapRequestReceiptReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSwapRequestReceiptReturn) -> Self {
                    (
                        value.requestId,
                        value.srcChainId,
                        value.dstChainId,
                        value.tokenIn,
                        value.tokenOut,
                        value.fulfilled,
                        value.solver,
                        value.recipient,
                        value.amountOut,
                        value.fulfilledAt,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSwapRequestReceiptReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        requestId: tuple.0,
                        srcChainId: tuple.1,
                        dstChainId: tuple.2,
                        tokenIn: tuple.3,
                        tokenOut: tuple.4,
                        fulfilled: tuple.5,
                        solver: tuple.6,
                        recipient: tuple.7,
                        amountOut: tuple.8,
                        fulfilledAt: tuple.9,
                    }
                }
            }
        }
        impl getSwapRequestReceiptReturn {
            fn _tokenize(
                &self,
            ) -> <getSwapRequestReceiptCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.srcChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.fulfilled,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.solver,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountOut),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.fulfilledAt),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSwapRequestReceiptCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getSwapRequestReceiptReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSwapRequestReceipt(bytes32)";
            const SELECTOR: [u8; 4] = [241u8, 109u8, 234u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._requestId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                getSwapRequestReceiptReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getTokenMapping(address,uint256)` and selector `0x48749d17`.
```solidity
function getTokenMapping(address srcToken, uint256 dstChainId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTokenMappingCall {
        #[allow(missing_docs)]
        pub srcToken: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getTokenMapping(address,uint256)`](getTokenMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTokenMappingReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTokenMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: getTokenMappingCall) -> Self {
                    (value.srcToken, value.dstChainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTokenMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        srcToken: tuple.0,
                        dstChainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTokenMappingReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTokenMappingReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTokenMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTokenMappingCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTokenMapping(address,uint256)";
            const SELECTOR: [u8; 4] = [72u8, 116u8, 157u8, 23u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.srcToken,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getTokenMappingReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getTokenMappingReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getTotalVerificationFeeBalance(address)` and selector `0x99d6120e`.
```solidity
function getTotalVerificationFeeBalance(address token) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalVerificationFeeBalanceCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getTotalVerificationFeeBalance(address)`](getTotalVerificationFeeBalanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalVerificationFeeBalanceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalVerificationFeeBalanceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTotalVerificationFeeBalanceCall) -> Self {
                    (value.token,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTotalVerificationFeeBalanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { token: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalVerificationFeeBalanceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTotalVerificationFeeBalanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTotalVerificationFeeBalanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTotalVerificationFeeBalanceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTotalVerificationFeeBalance(address)";
            const SELECTOR: [u8; 4] = [153u8, 214u8, 18u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getTotalVerificationFeeBalanceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getTotalVerificationFeeBalanceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getUnfulfilledSolverRefunds()` and selector `0x8886e506`.
```solidity
function getUnfulfilledSolverRefunds() external view returns (bytes32[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getUnfulfilledSolverRefundsCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getUnfulfilledSolverRefunds()`](getUnfulfilledSolverRefundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getUnfulfilledSolverRefundsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getUnfulfilledSolverRefundsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getUnfulfilledSolverRefundsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getUnfulfilledSolverRefundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getUnfulfilledSolverRefundsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getUnfulfilledSolverRefundsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getUnfulfilledSolverRefundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getUnfulfilledSolverRefundsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getUnfulfilledSolverRefunds()";
            const SELECTOR: [u8; 4] = [136u8, 134u8, 229u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getUnfulfilledSolverRefundsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getUnfulfilledSolverRefundsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVerificationFeeAmount(uint256)` and selector `0x7ae51622`.
```solidity
function getVerificationFeeAmount(uint256 amountToSwap) external view returns (uint256, uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVerificationFeeAmountCall {
        #[allow(missing_docs)]
        pub amountToSwap: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVerificationFeeAmount(uint256)`](getVerificationFeeAmountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVerificationFeeAmountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVerificationFeeAmountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getVerificationFeeAmountCall) -> Self {
                    (value.amountToSwap,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getVerificationFeeAmountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amountToSwap: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVerificationFeeAmountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getVerificationFeeAmountReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getVerificationFeeAmountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        impl getVerificationFeeAmountReturn {
            fn _tokenize(
                &self,
            ) -> <getVerificationFeeAmountCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVerificationFeeAmountCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getVerificationFeeAmountReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVerificationFeeAmount(uint256)";
            const SELECTOR: [u8; 4] = [122u8, 229u8, 22u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountToSwap),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                getVerificationFeeAmountReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVerificationFeeBps()` and selector `0xaa15e029`.
```solidity
function getVerificationFeeBps() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVerificationFeeBpsCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVerificationFeeBps()`](getVerificationFeeBpsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVerificationFeeBpsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVerificationFeeBpsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getVerificationFeeBpsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getVerificationFeeBpsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVerificationFeeBpsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getVerificationFeeBpsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getVerificationFeeBpsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVerificationFeeBpsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVerificationFeeBps()";
            const SELECTOR: [u8; 4] = [170u8, 21u8, 224u8, 41u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVerificationFeeBpsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVerificationFeeBpsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVersion()` and selector `0x0d8e6e2c`.
```solidity
function getVersion() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVersion()`](getVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVersion()";
            const SELECTOR: [u8; 4] = [13u8, 142u8, 110u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl grantRoleReturn {
            fn _tokenize(
                &self,
            ) -> <grantRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                grantRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initialize(address,address,address,uint256)` and selector `0xcf756fdf`.
```solidity
function initialize(address _owner, address _swapRequestBlsValidator, address _contractUpgradeBlsValidator, uint256 _verificationFeeBps) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _swapRequestBlsValidator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _contractUpgradeBlsValidator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _verificationFeeBps: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`initialize(address,address,address,uint256)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (
                        value._owner,
                        value._swapRequestBlsValidator,
                        value._contractUpgradeBlsValidator,
                        value._verificationFeeBps,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        _swapRequestBlsValidator: tuple.1,
                        _contractUpgradeBlsValidator: tuple.2,
                        _verificationFeeBps: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl initializeReturn {
            fn _tokenize(
                &self,
            ) -> <initializeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address,address,uint256)";
            const SELECTOR: [u8; 4] = [207u8, 117u8, 111u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._swapRequestBlsValidator,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._contractUpgradeBlsValidator,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._verificationFeeBps),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                initializeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isDstTokenMapped(address,uint256,address)` and selector `0x3ade90e9`.
```solidity
function isDstTokenMapped(address srcToken, uint256 dstChainId, address dstToken) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isDstTokenMappedCall {
        #[allow(missing_docs)]
        pub srcToken: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstToken: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isDstTokenMapped(address,uint256,address)`](isDstTokenMappedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isDstTokenMappedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isDstTokenMappedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isDstTokenMappedCall) -> Self {
                    (value.srcToken, value.dstChainId, value.dstToken)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isDstTokenMappedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        srcToken: tuple.0,
                        dstChainId: tuple.1,
                        dstToken: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isDstTokenMappedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isDstTokenMappedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isDstTokenMappedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isDstTokenMappedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isDstTokenMapped(address,uint256,address)";
            const SELECTOR: [u8; 4] = [58u8, 222u8, 144u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.srcToken,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.dstToken,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isDstTokenMappedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isDstTokenMappedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `minimumContractUpgradeDelay()` and selector `0x143490e1`.
```solidity
function minimumContractUpgradeDelay() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumContractUpgradeDelayCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`minimumContractUpgradeDelay()`](minimumContractUpgradeDelayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumContractUpgradeDelayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumContractUpgradeDelayCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: minimumContractUpgradeDelayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for minimumContractUpgradeDelayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumContractUpgradeDelayReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: minimumContractUpgradeDelayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for minimumContractUpgradeDelayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for minimumContractUpgradeDelayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "minimumContractUpgradeDelay()";
            const SELECTOR: [u8; 4] = [20u8, 52u8, 144u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: minimumContractUpgradeDelayReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: minimumContractUpgradeDelayReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `minimumContractUpgradeDelayParamsToBytes(string,uint256,uint256)` and selector `0xd3203859`.
```solidity
function minimumContractUpgradeDelayParamsToBytes(string memory action, uint256 _minimumContractUpgradeDelay, uint256 nonce) external view returns (bytes memory, bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumContractUpgradeDelayParamsToBytesCall {
        #[allow(missing_docs)]
        pub action: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub _minimumContractUpgradeDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`minimumContractUpgradeDelayParamsToBytes(string,uint256,uint256)`](minimumContractUpgradeDelayParamsToBytesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumContractUpgradeDelayParamsToBytesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumContractUpgradeDelayParamsToBytesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: minimumContractUpgradeDelayParamsToBytesCall) -> Self {
                    (value.action, value._minimumContractUpgradeDelay, value.nonce)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for minimumContractUpgradeDelayParamsToBytesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        action: tuple.0,
                        _minimumContractUpgradeDelay: tuple.1,
                        nonce: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumContractUpgradeDelayParamsToBytesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: minimumContractUpgradeDelayParamsToBytesReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for minimumContractUpgradeDelayParamsToBytesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        impl minimumContractUpgradeDelayParamsToBytesReturn {
            fn _tokenize(
                &self,
            ) -> <minimumContractUpgradeDelayParamsToBytesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for minimumContractUpgradeDelayParamsToBytesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = minimumContractUpgradeDelayParamsToBytesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "minimumContractUpgradeDelayParamsToBytes(string,uint256,uint256)";
            const SELECTOR: [u8; 4] = [211u8, 32u8, 56u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.action,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._minimumContractUpgradeDelay,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                minimumContractUpgradeDelayParamsToBytesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `nonceToRequester(uint256)` and selector `0x77ca1d72`.
```solidity
function nonceToRequester(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nonceToRequesterCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`nonceToRequester(uint256)`](nonceToRequesterCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nonceToRequesterReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nonceToRequesterCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: nonceToRequesterCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for nonceToRequesterCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nonceToRequesterReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: nonceToRequesterReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for nonceToRequesterReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nonceToRequesterCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nonceToRequester(uint256)";
            const SELECTOR: [u8; 4] = [119u8, 202u8, 29u8, 114u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: nonceToRequesterReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: nonceToRequesterReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `permitDestinationChainId(uint256)` and selector `0x44d1da8c`.
```solidity
function permitDestinationChainId(uint256 chainId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitDestinationChainIdCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`permitDestinationChainId(uint256)`](permitDestinationChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitDestinationChainIdReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitDestinationChainIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permitDestinationChainIdCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permitDestinationChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitDestinationChainIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permitDestinationChainIdReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permitDestinationChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl permitDestinationChainIdReturn {
            fn _tokenize(
                &self,
            ) -> <permitDestinationChainIdCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permitDestinationChainIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permitDestinationChainIdReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permitDestinationChainId(uint256)";
            const SELECTOR: [u8; 4] = [68u8, 209u8, 218u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                permitDestinationChainIdReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `proxiableUUID()` and selector `0x52d1902d`.
```solidity
function proxiableUUID() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`proxiableUUID()`](proxiableUUIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxiableUUIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxiableUUID()";
            const SELECTOR: [u8; 4] = [82u8, 209u8, 144u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `rebalanceSolver(address,bytes32,bytes)` and selector `0x4b918119`.
```solidity
function rebalanceSolver(address solver, bytes32 requestId, bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rebalanceSolverCall {
        #[allow(missing_docs)]
        pub solver: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`rebalanceSolver(address,bytes32,bytes)`](rebalanceSolverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rebalanceSolverReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rebalanceSolverCall> for UnderlyingRustTuple<'_> {
                fn from(value: rebalanceSolverCall) -> Self {
                    (value.solver, value.requestId, value.signature)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rebalanceSolverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        solver: tuple.0,
                        requestId: tuple.1,
                        signature: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rebalanceSolverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: rebalanceSolverReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for rebalanceSolverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl rebalanceSolverReturn {
            fn _tokenize(
                &self,
            ) -> <rebalanceSolverCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rebalanceSolverCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = rebalanceSolverReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rebalanceSolver(address,bytes32,bytes)";
            const SELECTOR: [u8; 4] = [75u8, 145u8, 129u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.solver,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                rebalanceSolverReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `relayTokens(address,bytes32,address,address,address,address,uint256,uint256,uint256)` and selector `0xf04cd277`.
```solidity
function relayTokens(address solverRefundAddress, bytes32 requestId, address sender, address recipient, address tokenIn, address tokenOut, uint256 amountOut, uint256 srcChainId, uint256 nonce) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct relayTokensCall {
        #[allow(missing_docs)]
        pub solverRefundAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`relayTokens(address,bytes32,address,address,address,address,uint256,uint256,uint256)`](relayTokensCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct relayTokensReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<relayTokensCall> for UnderlyingRustTuple<'_> {
                fn from(value: relayTokensCall) -> Self {
                    (
                        value.solverRefundAddress,
                        value.requestId,
                        value.sender,
                        value.recipient,
                        value.tokenIn,
                        value.tokenOut,
                        value.amountOut,
                        value.srcChainId,
                        value.nonce,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for relayTokensCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        solverRefundAddress: tuple.0,
                        requestId: tuple.1,
                        sender: tuple.2,
                        recipient: tuple.3,
                        tokenIn: tuple.4,
                        tokenOut: tuple.5,
                        amountOut: tuple.6,
                        srcChainId: tuple.7,
                        nonce: tuple.8,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<relayTokensReturn> for UnderlyingRustTuple<'_> {
                fn from(value: relayTokensReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for relayTokensReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl relayTokensReturn {
            fn _tokenize(
                &self,
            ) -> <relayTokensCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for relayTokensCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = relayTokensReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "relayTokens(address,bytes32,address,address,address,address,uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [240u8, 76u8, 210u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.solverRefundAddress,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountOut),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.srcChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                relayTokensReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `removeTokenMapping(uint256,address,address)` and selector `0x03f37d3e`.
```solidity
function removeTokenMapping(uint256 dstChainId, address dstToken, address srcToken) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeTokenMappingCall {
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstToken: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub srcToken: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeTokenMapping(uint256,address,address)`](removeTokenMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeTokenMappingReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeTokenMappingCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeTokenMappingCall) -> Self {
                    (value.dstChainId, value.dstToken, value.srcToken)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeTokenMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        dstChainId: tuple.0,
                        dstToken: tuple.1,
                        srcToken: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeTokenMappingReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeTokenMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeTokenMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl removeTokenMappingReturn {
            fn _tokenize(
                &self,
            ) -> <removeTokenMappingCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeTokenMappingCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeTokenMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeTokenMapping(uint256,address,address)";
            const SELECTOR: [u8; 4] = [3u8, 243u8, 125u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.dstToken,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.srcToken,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                removeTokenMappingReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceRoleReturn {
            fn _tokenize(
                &self,
            ) -> <renounceRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `requestCrossChainSwap(address,address,uint256,uint256,uint256,address)` and selector `0xa24d3461`.
```solidity
function requestCrossChainSwap(address tokenIn, address tokenOut, uint256 amount, uint256 solverFee, uint256 dstChainId, address recipient) external returns (bytes32 requestId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requestCrossChainSwapCall {
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub solverFee: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`requestCrossChainSwap(address,address,uint256,uint256,uint256,address)`](requestCrossChainSwapCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requestCrossChainSwapReturn {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requestCrossChainSwapCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: requestCrossChainSwapCall) -> Self {
                    (
                        value.tokenIn,
                        value.tokenOut,
                        value.amount,
                        value.solverFee,
                        value.dstChainId,
                        value.recipient,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requestCrossChainSwapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tokenIn: tuple.0,
                        tokenOut: tuple.1,
                        amount: tuple.2,
                        solverFee: tuple.3,
                        dstChainId: tuple.4,
                        recipient: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requestCrossChainSwapReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: requestCrossChainSwapReturn) -> Self {
                    (value.requestId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for requestCrossChainSwapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { requestId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requestCrossChainSwapCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requestCrossChainSwap(address,address,uint256,uint256,uint256,address)";
            const SELECTOR: [u8; 4] = [162u8, 77u8, 52u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.solverFee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: requestCrossChainSwapReturn = r.into();
                        r.requestId
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: requestCrossChainSwapReturn = r.into();
                        r.requestId
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeRoleReturn {
            fn _tokenize(
                &self,
            ) -> <revokeRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `scheduleUpgrade(address,bytes,uint256,bytes)` and selector `0xa9e36520`.
```solidity
function scheduleUpgrade(address newImplementation, bytes memory upgradeCalldata, uint256 upgradeTime, bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct scheduleUpgradeCall {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub upgradeCalldata: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub upgradeTime: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`scheduleUpgrade(address,bytes,uint256,bytes)`](scheduleUpgradeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct scheduleUpgradeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<scheduleUpgradeCall> for UnderlyingRustTuple<'_> {
                fn from(value: scheduleUpgradeCall) -> Self {
                    (
                        value.newImplementation,
                        value.upgradeCalldata,
                        value.upgradeTime,
                        value.signature,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for scheduleUpgradeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        upgradeCalldata: tuple.1,
                        upgradeTime: tuple.2,
                        signature: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<scheduleUpgradeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: scheduleUpgradeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for scheduleUpgradeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl scheduleUpgradeReturn {
            fn _tokenize(
                &self,
            ) -> <scheduleUpgradeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for scheduleUpgradeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = scheduleUpgradeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "scheduleUpgrade(address,bytes,uint256,bytes)";
            const SELECTOR: [u8; 4] = [169u8, 227u8, 101u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.upgradeCalldata,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.upgradeTime),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                scheduleUpgradeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `scheduledImplementation()` and selector `0x9193059c`.
```solidity
function scheduledImplementation() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct scheduledImplementationCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`scheduledImplementation()`](scheduledImplementationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct scheduledImplementationReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<scheduledImplementationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: scheduledImplementationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for scheduledImplementationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<scheduledImplementationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: scheduledImplementationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for scheduledImplementationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for scheduledImplementationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "scheduledImplementation()";
            const SELECTOR: [u8; 4] = [145u8, 147u8, 5u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: scheduledImplementationReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: scheduledImplementationReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `scheduledTimestampForUpgrade()` and selector `0xa9c9f215`.
```solidity
function scheduledTimestampForUpgrade() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct scheduledTimestampForUpgradeCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`scheduledTimestampForUpgrade()`](scheduledTimestampForUpgradeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct scheduledTimestampForUpgradeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<scheduledTimestampForUpgradeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: scheduledTimestampForUpgradeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for scheduledTimestampForUpgradeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<scheduledTimestampForUpgradeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: scheduledTimestampForUpgradeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for scheduledTimestampForUpgradeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for scheduledTimestampForUpgradeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "scheduledTimestampForUpgrade()";
            const SELECTOR: [u8; 4] = [169u8, 201u8, 242u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: scheduledTimestampForUpgradeReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: scheduledTimestampForUpgradeReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setCancellationWindow(uint256,bytes)` and selector `0x2a2d17bc`.
```solidity
function setCancellationWindow(uint256 newSwapRequestCancellationWindow, bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCancellationWindowCall {
        #[allow(missing_docs)]
        pub newSwapRequestCancellationWindow: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`setCancellationWindow(uint256,bytes)`](setCancellationWindowCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCancellationWindowReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCancellationWindowCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setCancellationWindowCall) -> Self {
                    (value.newSwapRequestCancellationWindow, value.signature)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setCancellationWindowCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newSwapRequestCancellationWindow: tuple.0,
                        signature: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCancellationWindowReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setCancellationWindowReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setCancellationWindowReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setCancellationWindowReturn {
            fn _tokenize(
                &self,
            ) -> <setCancellationWindowCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setCancellationWindowCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setCancellationWindowReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setCancellationWindow(uint256,bytes)";
            const SELECTOR: [u8; 4] = [42u8, 45u8, 23u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.newSwapRequestCancellationWindow,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setCancellationWindowReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setContractUpgradeBlsValidator(address,bytes)` and selector `0xf1863713`.
```solidity
function setContractUpgradeBlsValidator(address _contractUpgradeBlsValidator, bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setContractUpgradeBlsValidatorCall {
        #[allow(missing_docs)]
        pub _contractUpgradeBlsValidator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`setContractUpgradeBlsValidator(address,bytes)`](setContractUpgradeBlsValidatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setContractUpgradeBlsValidatorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setContractUpgradeBlsValidatorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setContractUpgradeBlsValidatorCall) -> Self {
                    (value._contractUpgradeBlsValidator, value.signature)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setContractUpgradeBlsValidatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _contractUpgradeBlsValidator: tuple.0,
                        signature: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setContractUpgradeBlsValidatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setContractUpgradeBlsValidatorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setContractUpgradeBlsValidatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setContractUpgradeBlsValidatorReturn {
            fn _tokenize(
                &self,
            ) -> <setContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setContractUpgradeBlsValidatorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setContractUpgradeBlsValidatorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setContractUpgradeBlsValidator(address,bytes)";
            const SELECTOR: [u8; 4] = [241u8, 134u8, 55u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._contractUpgradeBlsValidator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setContractUpgradeBlsValidatorReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setMinimumContractUpgradeDelay(uint256,bytes)` and selector `0x98772ea2`.
```solidity
function setMinimumContractUpgradeDelay(uint256 _minimumContractUpgradeDelay, bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMinimumContractUpgradeDelayCall {
        #[allow(missing_docs)]
        pub _minimumContractUpgradeDelay: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`setMinimumContractUpgradeDelay(uint256,bytes)`](setMinimumContractUpgradeDelayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMinimumContractUpgradeDelayReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMinimumContractUpgradeDelayCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMinimumContractUpgradeDelayCall) -> Self {
                    (value._minimumContractUpgradeDelay, value.signature)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMinimumContractUpgradeDelayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _minimumContractUpgradeDelay: tuple.0,
                        signature: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMinimumContractUpgradeDelayReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMinimumContractUpgradeDelayReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMinimumContractUpgradeDelayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setMinimumContractUpgradeDelayReturn {
            fn _tokenize(
                &self,
            ) -> <setMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMinimumContractUpgradeDelayCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMinimumContractUpgradeDelayReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMinimumContractUpgradeDelay(uint256,bytes)";
            const SELECTOR: [u8; 4] = [152u8, 119u8, 46u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self._minimumContractUpgradeDelay,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setMinimumContractUpgradeDelayReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setSwapRequestBlsValidator(address,bytes)` and selector `0xdf919813`.
```solidity
function setSwapRequestBlsValidator(address _swapRequestBlsValidator, bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSwapRequestBlsValidatorCall {
        #[allow(missing_docs)]
        pub _swapRequestBlsValidator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`setSwapRequestBlsValidator(address,bytes)`](setSwapRequestBlsValidatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSwapRequestBlsValidatorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSwapRequestBlsValidatorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSwapRequestBlsValidatorCall) -> Self {
                    (value._swapRequestBlsValidator, value.signature)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSwapRequestBlsValidatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _swapRequestBlsValidator: tuple.0,
                        signature: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSwapRequestBlsValidatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSwapRequestBlsValidatorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSwapRequestBlsValidatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setSwapRequestBlsValidatorReturn {
            fn _tokenize(
                &self,
            ) -> <setSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSwapRequestBlsValidatorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSwapRequestBlsValidatorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSwapRequestBlsValidator(address,bytes)";
            const SELECTOR: [u8; 4] = [223u8, 145u8, 152u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._swapRequestBlsValidator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setSwapRequestBlsValidatorReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setTokenMapping(uint256,address,address)` and selector `0x9695ec21`.
```solidity
function setTokenMapping(uint256 dstChainId, address dstToken, address srcToken) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTokenMappingCall {
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstToken: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub srcToken: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setTokenMapping(uint256,address,address)`](setTokenMappingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTokenMappingReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTokenMappingCall> for UnderlyingRustTuple<'_> {
                fn from(value: setTokenMappingCall) -> Self {
                    (value.dstChainId, value.dstToken, value.srcToken)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTokenMappingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        dstChainId: tuple.0,
                        dstToken: tuple.1,
                        srcToken: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTokenMappingReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setTokenMappingReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setTokenMappingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setTokenMappingReturn {
            fn _tokenize(
                &self,
            ) -> <setTokenMappingCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTokenMappingCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTokenMappingReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTokenMapping(uint256,address,address)";
            const SELECTOR: [u8; 4] = [150u8, 149u8, 236u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.dstToken,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.srcToken,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setTokenMappingReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setVerificationFeeBps(uint256)` and selector `0xb073748c`.
```solidity
function setVerificationFeeBps(uint256 _verificationFeeBps) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setVerificationFeeBpsCall {
        #[allow(missing_docs)]
        pub _verificationFeeBps: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setVerificationFeeBps(uint256)`](setVerificationFeeBpsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setVerificationFeeBpsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setVerificationFeeBpsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setVerificationFeeBpsCall) -> Self {
                    (value._verificationFeeBps,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setVerificationFeeBpsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _verificationFeeBps: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setVerificationFeeBpsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setVerificationFeeBpsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setVerificationFeeBpsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setVerificationFeeBpsReturn {
            fn _tokenize(
                &self,
            ) -> <setVerificationFeeBpsCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setVerificationFeeBpsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setVerificationFeeBpsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setVerificationFeeBps(uint256)";
            const SELECTOR: [u8; 4] = [176u8, 115u8, 116u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._verificationFeeBps),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setVerificationFeeBpsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `stageSwapRequestCancellation(bytes32)` and selector `0x19d257bf`.
```solidity
function stageSwapRequestCancellation(bytes32 requestId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stageSwapRequestCancellationCall {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`stageSwapRequestCancellation(bytes32)`](stageSwapRequestCancellationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stageSwapRequestCancellationReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stageSwapRequestCancellationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: stageSwapRequestCancellationCall) -> Self {
                    (value.requestId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for stageSwapRequestCancellationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { requestId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stageSwapRequestCancellationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: stageSwapRequestCancellationReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for stageSwapRequestCancellationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl stageSwapRequestCancellationReturn {
            fn _tokenize(
                &self,
            ) -> <stageSwapRequestCancellationCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for stageSwapRequestCancellationCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = stageSwapRequestCancellationReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "stageSwapRequestCancellation(bytes32)";
            const SELECTOR: [u8; 4] = [25u8, 210u8, 87u8, 191u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                stageSwapRequestCancellationReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapRequestBlsValidator()` and selector `0xdb65070d`.
```solidity
function swapRequestBlsValidator() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestBlsValidatorCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`swapRequestBlsValidator()`](swapRequestBlsValidatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestBlsValidatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestBlsValidatorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestBlsValidatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestBlsValidatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestBlsValidatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestBlsValidatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestBlsValidatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapRequestBlsValidatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapRequestBlsValidator()";
            const SELECTOR: [u8; 4] = [219u8, 101u8, 7u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: swapRequestBlsValidatorReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: swapRequestBlsValidatorReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapRequestCancellationInitiatedAt(bytes32)` and selector `0xdaa4c66b`.
```solidity
function swapRequestCancellationInitiatedAt(bytes32) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestCancellationInitiatedAtCall(
        pub alloy::sol_types::private::FixedBytes<32>,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`swapRequestCancellationInitiatedAt(bytes32)`](swapRequestCancellationInitiatedAtCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestCancellationInitiatedAtReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestCancellationInitiatedAtCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestCancellationInitiatedAtCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestCancellationInitiatedAtCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestCancellationInitiatedAtReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestCancellationInitiatedAtReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestCancellationInitiatedAtReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapRequestCancellationInitiatedAtCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapRequestCancellationInitiatedAt(bytes32)";
            const SELECTOR: [u8; 4] = [218u8, 164u8, 198u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: swapRequestCancellationInitiatedAtReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: swapRequestCancellationInitiatedAtReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapRequestCancellationWindow()` and selector `0xeb20fae2`.
```solidity
function swapRequestCancellationWindow() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestCancellationWindowCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`swapRequestCancellationWindow()`](swapRequestCancellationWindowCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestCancellationWindowReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestCancellationWindowCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestCancellationWindowCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestCancellationWindowCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestCancellationWindowReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestCancellationWindowReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestCancellationWindowReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapRequestCancellationWindowCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapRequestCancellationWindow()";
            const SELECTOR: [u8; 4] = [235u8, 32u8, 250u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: swapRequestCancellationWindowReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: swapRequestCancellationWindowReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapRequestParameters(bytes32)` and selector `0x5153a4c3`.
```solidity
function swapRequestParameters(bytes32) external view returns (address sender, address recipient, address tokenIn, address tokenOut, uint256 amountOut, uint256 srcChainId, uint256 dstChainId, uint256 verificationFee, uint256 solverFee, uint256 nonce, bool executed, uint256 requestedAt);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestParametersCall(pub alloy::sol_types::private::FixedBytes<32>);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`swapRequestParameters(bytes32)`](swapRequestParametersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestParametersReturn {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub verificationFee: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub solverFee: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub executed: bool,
        #[allow(missing_docs)]
        pub requestedAt: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestParametersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestParametersCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestParametersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestParametersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestParametersReturn) -> Self {
                    (
                        value.sender,
                        value.recipient,
                        value.tokenIn,
                        value.tokenOut,
                        value.amountOut,
                        value.srcChainId,
                        value.dstChainId,
                        value.verificationFee,
                        value.solverFee,
                        value.nonce,
                        value.executed,
                        value.requestedAt,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestParametersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sender: tuple.0,
                        recipient: tuple.1,
                        tokenIn: tuple.2,
                        tokenOut: tuple.3,
                        amountOut: tuple.4,
                        srcChainId: tuple.5,
                        dstChainId: tuple.6,
                        verificationFee: tuple.7,
                        solverFee: tuple.8,
                        nonce: tuple.9,
                        executed: tuple.10,
                        requestedAt: tuple.11,
                    }
                }
            }
        }
        impl swapRequestParametersReturn {
            fn _tokenize(
                &self,
            ) -> <swapRequestParametersCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountOut),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.srcChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.verificationFee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.solverFee),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.executed,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestedAt),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapRequestParametersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapRequestParametersReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapRequestParameters(bytes32)";
            const SELECTOR: [u8; 4] = [81u8, 83u8, 164u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                swapRequestParametersReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapRequestParametersToBytes(bytes32,address)` and selector `0xce123580`.
```solidity
function swapRequestParametersToBytes(bytes32 requestId, address solver) external view returns (bytes memory message, bytes memory messageAsG1Bytes);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestParametersToBytesCall {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub solver: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`swapRequestParametersToBytes(bytes32,address)`](swapRequestParametersToBytesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestParametersToBytesReturn {
        #[allow(missing_docs)]
        pub message: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub messageAsG1Bytes: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestParametersToBytesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestParametersToBytesCall) -> Self {
                    (value.requestId, value.solver)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestParametersToBytesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        requestId: tuple.0,
                        solver: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestParametersToBytesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestParametersToBytesReturn) -> Self {
                    (value.message, value.messageAsG1Bytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestParametersToBytesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        message: tuple.0,
                        messageAsG1Bytes: tuple.1,
                    }
                }
            }
        }
        impl swapRequestParametersToBytesReturn {
            fn _tokenize(
                &self,
            ) -> <swapRequestParametersToBytesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.message,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.messageAsG1Bytes,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapRequestParametersToBytesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapRequestParametersToBytesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapRequestParametersToBytes(bytes32,address)";
            const SELECTOR: [u8; 4] = [206u8, 18u8, 53u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.solver,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                swapRequestParametersToBytesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapRequestReceipts(bytes32)` and selector `0xe7b7ee96`.
```solidity
function swapRequestReceipts(bytes32) external view returns (bytes32 requestId, uint256 srcChainId, uint256 dstChainId, address tokenIn, address tokenOut, bool fulfilled, address solver, address recipient, uint256 amountOut, uint256 fulfilledAt);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestReceiptsCall(pub alloy::sol_types::private::FixedBytes<32>);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`swapRequestReceipts(bytes32)`](swapRequestReceiptsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapRequestReceiptsReturn {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub srcChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tokenOut: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub fulfilled: bool,
        #[allow(missing_docs)]
        pub solver: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountOut: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fulfilledAt: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestReceiptsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestReceiptsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestReceiptsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapRequestReceiptsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapRequestReceiptsReturn) -> Self {
                    (
                        value.requestId,
                        value.srcChainId,
                        value.dstChainId,
                        value.tokenIn,
                        value.tokenOut,
                        value.fulfilled,
                        value.solver,
                        value.recipient,
                        value.amountOut,
                        value.fulfilledAt,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapRequestReceiptsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        requestId: tuple.0,
                        srcChainId: tuple.1,
                        dstChainId: tuple.2,
                        tokenIn: tuple.3,
                        tokenOut: tuple.4,
                        fulfilled: tuple.5,
                        solver: tuple.6,
                        recipient: tuple.7,
                        amountOut: tuple.8,
                        fulfilledAt: tuple.9,
                    }
                }
            }
        }
        impl swapRequestReceiptsReturn {
            fn _tokenize(
                &self,
            ) -> <swapRequestReceiptsCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.srcChainId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dstChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.fulfilled,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.solver,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountOut),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.fulfilledAt),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapRequestReceiptsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapRequestReceiptsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapRequestReceipts(bytes32)";
            const SELECTOR: [u8; 4] = [231u8, 183u8, 238u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                swapRequestReceiptsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `totalVerificationFeeBalance(address)` and selector `0x6e3207a6`.
```solidity
function totalVerificationFeeBalance(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalVerificationFeeBalanceCall(pub alloy::sol_types::private::Address);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`totalVerificationFeeBalance(address)`](totalVerificationFeeBalanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalVerificationFeeBalanceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalVerificationFeeBalanceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: totalVerificationFeeBalanceCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for totalVerificationFeeBalanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalVerificationFeeBalanceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: totalVerificationFeeBalanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for totalVerificationFeeBalanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalVerificationFeeBalanceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalVerificationFeeBalance(address)";
            const SELECTOR: [u8; 4] = [110u8, 50u8, 7u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.0,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: totalVerificationFeeBalanceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: totalVerificationFeeBalanceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateSolverFeesIfUnfulfilled(bytes32,uint256)` and selector `0x7a1e1a05`.
```solidity
function updateSolverFeesIfUnfulfilled(bytes32 requestId, uint256 newFee) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateSolverFeesIfUnfulfilledCall {
        #[allow(missing_docs)]
        pub requestId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newFee: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`updateSolverFeesIfUnfulfilled(bytes32,uint256)`](updateSolverFeesIfUnfulfilledCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateSolverFeesIfUnfulfilledReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateSolverFeesIfUnfulfilledCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateSolverFeesIfUnfulfilledCall) -> Self {
                    (value.requestId, value.newFee)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateSolverFeesIfUnfulfilledCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        requestId: tuple.0,
                        newFee: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateSolverFeesIfUnfulfilledReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateSolverFeesIfUnfulfilledReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateSolverFeesIfUnfulfilledReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl updateSolverFeesIfUnfulfilledReturn {
            fn _tokenize(
                &self,
            ) -> <updateSolverFeesIfUnfulfilledCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateSolverFeesIfUnfulfilledCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateSolverFeesIfUnfulfilledReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateSolverFeesIfUnfulfilled(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [122u8, 30u8, 26u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.requestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newFee),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                updateSolverFeesIfUnfulfilledReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `upgradeToAndCall(address,bytes)` and selector `0x4f1ef286`.
```solidity
function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallCall {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeToAndCall(address,bytes)`](upgradeToAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallCall) -> Self {
                    (value.newImplementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl upgradeToAndCallReturn {
            fn _tokenize(
                &self,
            ) -> <upgradeToAndCallCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeToAndCall(address,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 242u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                upgradeToAndCallReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verificationFeeBps()` and selector `0xcf97ad30`.
```solidity
function verificationFeeBps() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verificationFeeBpsCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verificationFeeBps()`](verificationFeeBpsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verificationFeeBpsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verificationFeeBpsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verificationFeeBpsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verificationFeeBpsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verificationFeeBpsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verificationFeeBpsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verificationFeeBpsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verificationFeeBpsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verificationFeeBps()";
            const SELECTOR: [u8; 4] = [207u8, 151u8, 173u8, 48u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verificationFeeBpsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verificationFeeBpsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `withdrawVerificationFee(address,address)` and selector `0x3d0aed50`.
```solidity
function withdrawVerificationFee(address token, address to) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawVerificationFeeCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`withdrawVerificationFee(address,address)`](withdrawVerificationFeeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawVerificationFeeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawVerificationFeeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: withdrawVerificationFeeCall) -> Self {
                    (value.token, value.to)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for withdrawVerificationFeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        to: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawVerificationFeeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: withdrawVerificationFeeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for withdrawVerificationFeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl withdrawVerificationFeeReturn {
            fn _tokenize(
                &self,
            ) -> <withdrawVerificationFeeCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawVerificationFeeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawVerificationFeeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdrawVerificationFee(address,address)";
            const SELECTOR: [u8; 4] = [61u8, 10u8, 237u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                withdrawVerificationFeeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Router`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum RouterCalls {
        #[allow(missing_docs)]
        ADMIN_ROLE(ADMIN_ROLECall),
        #[allow(missing_docs)]
        BPS_DIVISOR(BPS_DIVISORCall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MAX_FEE_BPS(MAX_FEE_BPSCall),
        #[allow(missing_docs)]
        UPGRADE_INTERFACE_VERSION(UPGRADE_INTERFACE_VERSIONCall),
        #[allow(missing_docs)]
        allowedDstChainIds(allowedDstChainIdsCall),
        #[allow(missing_docs)]
        blockDestinationChainId(blockDestinationChainIdCall),
        #[allow(missing_docs)]
        blsValidatorUpdateParamsToBytes(blsValidatorUpdateParamsToBytesCall),
        #[allow(missing_docs)]
        buildSwapRequestParameters(buildSwapRequestParametersCall),
        #[allow(missing_docs)]
        cancelSwapRequestAndRefund(cancelSwapRequestAndRefundCall),
        #[allow(missing_docs)]
        cancelUpgrade(cancelUpgradeCall),
        #[allow(missing_docs)]
        contractUpgradeBlsValidator(contractUpgradeBlsValidatorCall),
        #[allow(missing_docs)]
        contractUpgradeParamsToBytes(contractUpgradeParamsToBytesCall),
        #[allow(missing_docs)]
        currentNonce(currentNonceCall),
        #[allow(missing_docs)]
        executeUpgrade(executeUpgradeCall),
        #[allow(missing_docs)]
        getAllowedDstChainId(getAllowedDstChainIdCall),
        #[allow(missing_docs)]
        getCancelledSwapRequests(getCancelledSwapRequestsCall),
        #[allow(missing_docs)]
        getChainID(getChainIDCall),
        #[allow(missing_docs)]
        getChainId(getChainIdCall),
        #[allow(missing_docs)]
        getContractUpgradeBlsValidator(getContractUpgradeBlsValidatorCall),
        #[allow(missing_docs)]
        getFulfilledSolverRefunds(getFulfilledSolverRefundsCall),
        #[allow(missing_docs)]
        getFulfilledTransfers(getFulfilledTransfersCall),
        #[allow(missing_docs)]
        getMinimumContractUpgradeDelay(getMinimumContractUpgradeDelayCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        getRoleMember(getRoleMemberCall),
        #[allow(missing_docs)]
        getRoleMemberCount(getRoleMemberCountCall),
        #[allow(missing_docs)]
        getRoleMembers(getRoleMembersCall),
        #[allow(missing_docs)]
        getSwapRequestBlsValidator(getSwapRequestBlsValidatorCall),
        #[allow(missing_docs)]
        getSwapRequestId(getSwapRequestIdCall),
        #[allow(missing_docs)]
        getSwapRequestParameters(getSwapRequestParametersCall),
        #[allow(missing_docs)]
        getSwapRequestReceipt(getSwapRequestReceiptCall),
        #[allow(missing_docs)]
        getTokenMapping(getTokenMappingCall),
        #[allow(missing_docs)]
        getTotalVerificationFeeBalance(getTotalVerificationFeeBalanceCall),
        #[allow(missing_docs)]
        getUnfulfilledSolverRefunds(getUnfulfilledSolverRefundsCall),
        #[allow(missing_docs)]
        getVerificationFeeAmount(getVerificationFeeAmountCall),
        #[allow(missing_docs)]
        getVerificationFeeBps(getVerificationFeeBpsCall),
        #[allow(missing_docs)]
        getVersion(getVersionCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isDstTokenMapped(isDstTokenMappedCall),
        #[allow(missing_docs)]
        minimumContractUpgradeDelay(minimumContractUpgradeDelayCall),
        #[allow(missing_docs)]
        minimumContractUpgradeDelayParamsToBytes(
            minimumContractUpgradeDelayParamsToBytesCall,
        ),
        #[allow(missing_docs)]
        nonceToRequester(nonceToRequesterCall),
        #[allow(missing_docs)]
        permitDestinationChainId(permitDestinationChainIdCall),
        #[allow(missing_docs)]
        proxiableUUID(proxiableUUIDCall),
        #[allow(missing_docs)]
        rebalanceSolver(rebalanceSolverCall),
        #[allow(missing_docs)]
        relayTokens(relayTokensCall),
        #[allow(missing_docs)]
        removeTokenMapping(removeTokenMappingCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        requestCrossChainSwap(requestCrossChainSwapCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        scheduleUpgrade(scheduleUpgradeCall),
        #[allow(missing_docs)]
        scheduledImplementation(scheduledImplementationCall),
        #[allow(missing_docs)]
        scheduledTimestampForUpgrade(scheduledTimestampForUpgradeCall),
        #[allow(missing_docs)]
        setCancellationWindow(setCancellationWindowCall),
        #[allow(missing_docs)]
        setContractUpgradeBlsValidator(setContractUpgradeBlsValidatorCall),
        #[allow(missing_docs)]
        setMinimumContractUpgradeDelay(setMinimumContractUpgradeDelayCall),
        #[allow(missing_docs)]
        setSwapRequestBlsValidator(setSwapRequestBlsValidatorCall),
        #[allow(missing_docs)]
        setTokenMapping(setTokenMappingCall),
        #[allow(missing_docs)]
        setVerificationFeeBps(setVerificationFeeBpsCall),
        #[allow(missing_docs)]
        stageSwapRequestCancellation(stageSwapRequestCancellationCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        swapRequestBlsValidator(swapRequestBlsValidatorCall),
        #[allow(missing_docs)]
        swapRequestCancellationInitiatedAt(swapRequestCancellationInitiatedAtCall),
        #[allow(missing_docs)]
        swapRequestCancellationWindow(swapRequestCancellationWindowCall),
        #[allow(missing_docs)]
        swapRequestParameters(swapRequestParametersCall),
        #[allow(missing_docs)]
        swapRequestParametersToBytes(swapRequestParametersToBytesCall),
        #[allow(missing_docs)]
        swapRequestReceipts(swapRequestReceiptsCall),
        #[allow(missing_docs)]
        totalVerificationFeeBalance(totalVerificationFeeBalanceCall),
        #[allow(missing_docs)]
        updateSolverFeesIfUnfulfilled(updateSolverFeesIfUnfulfilledCall),
        #[allow(missing_docs)]
        upgradeToAndCall(upgradeToAndCallCall),
        #[allow(missing_docs)]
        verificationFeeBps(verificationFeeBpsCall),
        #[allow(missing_docs)]
        withdrawVerificationFee(withdrawVerificationFeeCall),
    }
    #[automatically_derived]
    impl RouterCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [2u8, 123u8, 112u8, 71u8],
            [3u8, 243u8, 125u8, 62u8],
            [7u8, 239u8, 233u8, 48u8],
            [13u8, 142u8, 110u8, 44u8],
            [16u8, 239u8, 47u8, 93u8],
            [20u8, 52u8, 144u8, 225u8],
            [21u8, 177u8, 125u8, 164u8],
            [25u8, 31u8, 225u8, 237u8],
            [25u8, 210u8, 87u8, 191u8],
            [36u8, 138u8, 156u8, 163u8],
            [42u8, 45u8, 23u8, 188u8],
            [47u8, 47u8, 241u8, 93u8],
            [52u8, 8u8, 228u8, 112u8],
            [52u8, 71u8, 58u8, 241u8],
            [52u8, 117u8, 191u8, 143u8],
            [54u8, 86u8, 138u8, 190u8],
            [58u8, 222u8, 144u8, 233u8],
            [61u8, 10u8, 237u8, 80u8],
            [68u8, 209u8, 218u8, 140u8],
            [72u8, 116u8, 157u8, 23u8],
            [75u8, 145u8, 129u8, 25u8],
            [79u8, 30u8, 242u8, 134u8],
            [80u8, 77u8, 165u8, 169u8],
            [81u8, 83u8, 164u8, 195u8],
            [82u8, 209u8, 144u8, 45u8],
            [86u8, 75u8, 129u8, 239u8],
            [94u8, 216u8, 185u8, 211u8],
            [99u8, 112u8, 214u8, 88u8],
            [110u8, 50u8, 7u8, 166u8],
            [117u8, 178u8, 56u8, 252u8],
            [119u8, 202u8, 29u8, 114u8],
            [122u8, 30u8, 26u8, 5u8],
            [122u8, 229u8, 22u8, 34u8],
            [126u8, 137u8, 98u8, 20u8],
            [136u8, 134u8, 229u8, 6u8],
            [144u8, 16u8, 208u8, 124u8],
            [145u8, 147u8, 5u8, 156u8],
            [145u8, 209u8, 72u8, 84u8],
            [150u8, 149u8, 236u8, 33u8],
            [152u8, 119u8, 46u8, 162u8],
            [153u8, 214u8, 18u8, 14u8],
            [162u8, 23u8, 253u8, 223u8],
            [162u8, 77u8, 52u8, 97u8],
            [163u8, 36u8, 106u8, 211u8],
            [163u8, 109u8, 21u8, 236u8],
            [164u8, 197u8, 162u8, 122u8],
            [169u8, 201u8, 242u8, 21u8],
            [169u8, 227u8, 101u8, 32u8],
            [169u8, 238u8, 15u8, 194u8],
            [170u8, 21u8, 224u8, 41u8],
            [173u8, 60u8, 177u8, 204u8],
            [173u8, 182u8, 16u8, 163u8],
            [176u8, 115u8, 116u8, 140u8],
            [178u8, 30u8, 172u8, 158u8],
            [180u8, 68u8, 150u8, 76u8],
            [202u8, 21u8, 200u8, 115u8],
            [206u8, 18u8, 53u8, 128u8],
            [207u8, 117u8, 111u8, 223u8],
            [207u8, 151u8, 173u8, 48u8],
            [211u8, 32u8, 56u8, 89u8],
            [213u8, 71u8, 116u8, 31u8],
            [213u8, 91u8, 232u8, 198u8],
            [218u8, 164u8, 198u8, 107u8],
            [218u8, 173u8, 254u8, 195u8],
            [219u8, 101u8, 7u8, 13u8],
            [223u8, 145u8, 152u8, 19u8],
            [231u8, 183u8, 238u8, 150u8],
            [235u8, 9u8, 26u8, 198u8],
            [235u8, 32u8, 250u8, 226u8],
            [240u8, 76u8, 210u8, 119u8],
            [241u8, 109u8, 234u8, 130u8],
            [241u8, 134u8, 55u8, 19u8],
            [248u8, 74u8, 227u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RouterCalls {
        const NAME: &'static str = "RouterCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 74usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ADMIN_ROLE(_) => {
                    <ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::BPS_DIVISOR(_) => {
                    <BPS_DIVISORCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MAX_FEE_BPS(_) => {
                    <MAX_FEE_BPSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::UPGRADE_INTERFACE_VERSION(_) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowedDstChainIds(_) => {
                    <allowedDstChainIdsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blockDestinationChainId(_) => {
                    <blockDestinationChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blsValidatorUpdateParamsToBytes(_) => {
                    <blsValidatorUpdateParamsToBytesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::buildSwapRequestParameters(_) => {
                    <buildSwapRequestParametersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::cancelSwapRequestAndRefund(_) => {
                    <cancelSwapRequestAndRefundCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::cancelUpgrade(_) => {
                    <cancelUpgradeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::contractUpgradeBlsValidator(_) => {
                    <contractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::contractUpgradeParamsToBytes(_) => {
                    <contractUpgradeParamsToBytesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::currentNonce(_) => {
                    <currentNonceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeUpgrade(_) => {
                    <executeUpgradeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllowedDstChainId(_) => {
                    <getAllowedDstChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCancelledSwapRequests(_) => {
                    <getCancelledSwapRequestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getChainID(_) => {
                    <getChainIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getChainId(_) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getContractUpgradeBlsValidator(_) => {
                    <getContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getFulfilledSolverRefunds(_) => {
                    <getFulfilledSolverRefundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getFulfilledTransfers(_) => {
                    <getFulfilledTransfersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getMinimumContractUpgradeDelay(_) => {
                    <getMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleMember(_) => {
                    <getRoleMemberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleMemberCount(_) => {
                    <getRoleMemberCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleMembers(_) => {
                    <getRoleMembersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSwapRequestBlsValidator(_) => {
                    <getSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSwapRequestId(_) => {
                    <getSwapRequestIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSwapRequestParameters(_) => {
                    <getSwapRequestParametersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSwapRequestReceipt(_) => {
                    <getSwapRequestReceiptCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTokenMapping(_) => {
                    <getTokenMappingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTotalVerificationFeeBalance(_) => {
                    <getTotalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getUnfulfilledSolverRefunds(_) => {
                    <getUnfulfilledSolverRefundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVerificationFeeAmount(_) => {
                    <getVerificationFeeAmountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVerificationFeeBps(_) => {
                    <getVerificationFeeBpsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVersion(_) => {
                    <getVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isDstTokenMapped(_) => {
                    <isDstTokenMappedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::minimumContractUpgradeDelay(_) => {
                    <minimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::minimumContractUpgradeDelayParamsToBytes(_) => {
                    <minimumContractUpgradeDelayParamsToBytesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::nonceToRequester(_) => {
                    <nonceToRequesterCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::permitDestinationChainId(_) => {
                    <permitDestinationChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proxiableUUID(_) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::rebalanceSolver(_) => {
                    <rebalanceSolverCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::relayTokens(_) => {
                    <relayTokensCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeTokenMapping(_) => {
                    <removeTokenMappingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requestCrossChainSwap(_) => {
                    <requestCrossChainSwapCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::scheduleUpgrade(_) => {
                    <scheduleUpgradeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::scheduledImplementation(_) => {
                    <scheduledImplementationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::scheduledTimestampForUpgrade(_) => {
                    <scheduledTimestampForUpgradeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setCancellationWindow(_) => {
                    <setCancellationWindowCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setContractUpgradeBlsValidator(_) => {
                    <setContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMinimumContractUpgradeDelay(_) => {
                    <setMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSwapRequestBlsValidator(_) => {
                    <setSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTokenMapping(_) => {
                    <setTokenMappingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setVerificationFeeBps(_) => {
                    <setVerificationFeeBpsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::stageSwapRequestCancellation(_) => {
                    <stageSwapRequestCancellationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapRequestBlsValidator(_) => {
                    <swapRequestBlsValidatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapRequestCancellationInitiatedAt(_) => {
                    <swapRequestCancellationInitiatedAtCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapRequestCancellationWindow(_) => {
                    <swapRequestCancellationWindowCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapRequestParameters(_) => {
                    <swapRequestParametersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapRequestParametersToBytes(_) => {
                    <swapRequestParametersToBytesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapRequestReceipts(_) => {
                    <swapRequestReceiptsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::totalVerificationFeeBalance(_) => {
                    <totalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateSolverFeesIfUnfulfilled(_) => {
                    <updateSolverFeesIfUnfulfilledCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeToAndCall(_) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verificationFeeBps(_) => {
                    <verificationFeeBpsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdrawVerificationFee(_) => {
                    <withdrawVerificationFeeCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8]) -> alloy_sol_types::Result<RouterCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getMinimumContractUpgradeDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getMinimumContractUpgradeDelay)
                    }
                    getMinimumContractUpgradeDelay
                },
                {
                    fn removeTokenMapping(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <removeTokenMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::removeTokenMapping)
                    }
                    removeTokenMapping
                },
                {
                    fn getAllowedDstChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getAllowedDstChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getAllowedDstChainId)
                    }
                    getAllowedDstChainId
                },
                {
                    fn getVersion(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn blsValidatorUpdateParamsToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <blsValidatorUpdateParamsToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::blsValidatorUpdateParamsToBytes)
                    }
                    blsValidatorUpdateParamsToBytes
                },
                {
                    fn minimumContractUpgradeDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <minimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::minimumContractUpgradeDelay)
                    }
                    minimumContractUpgradeDelay
                },
                {
                    fn contractUpgradeBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <contractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::contractUpgradeBlsValidator)
                    }
                    contractUpgradeBlsValidator
                },
                {
                    fn BPS_DIVISOR(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <BPS_DIVISORCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::BPS_DIVISOR)
                    }
                    BPS_DIVISOR
                },
                {
                    fn stageSwapRequestCancellation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <stageSwapRequestCancellationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::stageSwapRequestCancellation)
                    }
                    stageSwapRequestCancellation
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn setCancellationWindow(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setCancellationWindowCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::setCancellationWindow)
                    }
                    setCancellationWindow
                },
                {
                    fn grantRole(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RouterCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn getChainId(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <getChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getChainId)
                    }
                    getChainId
                },
                {
                    fn cancelUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <cancelUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::cancelUpgrade)
                    }
                    cancelUpgrade
                },
                {
                    fn getSwapRequestParameters(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestParameters)
                    }
                    getSwapRequestParameters
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn isDstTokenMapped(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <isDstTokenMappedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::isDstTokenMapped)
                    }
                    isDstTokenMapped
                },
                {
                    fn withdrawVerificationFee(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <withdrawVerificationFeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::withdrawVerificationFee)
                    }
                    withdrawVerificationFee
                },
                {
                    fn permitDestinationChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <permitDestinationChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::permitDestinationChainId)
                    }
                    permitDestinationChainId
                },
                {
                    fn getTokenMapping(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getTokenMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getTokenMapping)
                    }
                    getTokenMapping
                },
                {
                    fn rebalanceSolver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <rebalanceSolverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::rebalanceSolver)
                    }
                    rebalanceSolver
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn contractUpgradeParamsToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <contractUpgradeParamsToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::contractUpgradeParamsToBytes)
                    }
                    contractUpgradeParamsToBytes
                },
                {
                    fn swapRequestParameters(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestParametersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::swapRequestParameters)
                    }
                    swapRequestParameters
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn getChainID(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <getChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getChainID)
                    }
                    getChainID
                },
                {
                    fn getCancelledSwapRequests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getCancelledSwapRequestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getCancelledSwapRequests)
                    }
                    getCancelledSwapRequests
                },
                {
                    fn blockDestinationChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <blockDestinationChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::blockDestinationChainId)
                    }
                    blockDestinationChainId
                },
                {
                    fn totalVerificationFeeBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <totalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::totalVerificationFeeBalance)
                    }
                    totalVerificationFeeBalance
                },
                {
                    fn ADMIN_ROLE(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::ADMIN_ROLE)
                    }
                    ADMIN_ROLE
                },
                {
                    fn nonceToRequester(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <nonceToRequesterCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::nonceToRequester)
                    }
                    nonceToRequester
                },
                {
                    fn updateSolverFeesIfUnfulfilled(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <updateSolverFeesIfUnfulfilledCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::updateSolverFeesIfUnfulfilled)
                    }
                    updateSolverFeesIfUnfulfilled
                },
                {
                    fn getVerificationFeeAmount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getVerificationFeeAmountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getVerificationFeeAmount)
                    }
                    getVerificationFeeAmount
                },
                {
                    fn executeUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <executeUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::executeUpgrade)
                    }
                    executeUpgrade
                },
                {
                    fn getUnfulfilledSolverRefunds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getUnfulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getUnfulfilledSolverRefunds)
                    }
                    getUnfulfilledSolverRefunds
                },
                {
                    fn getRoleMember(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleMemberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getRoleMember)
                    }
                    getRoleMember
                },
                {
                    fn scheduledImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <scheduledImplementationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::scheduledImplementation)
                    }
                    scheduledImplementation
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RouterCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn setTokenMapping(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setTokenMappingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::setTokenMapping)
                    }
                    setTokenMapping
                },
                {
                    fn setMinimumContractUpgradeDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::setMinimumContractUpgradeDelay)
                    }
                    setMinimumContractUpgradeDelay
                },
                {
                    fn getTotalVerificationFeeBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getTotalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getTotalVerificationFeeBalance)
                    }
                    getTotalVerificationFeeBalance
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn requestCrossChainSwap(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <requestCrossChainSwapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::requestCrossChainSwap)
                    }
                    requestCrossChainSwap
                },
                {
                    fn getRoleMembers(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleMembersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getRoleMembers)
                    }
                    getRoleMembers
                },
                {
                    fn getFulfilledSolverRefunds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getFulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getFulfilledSolverRefunds)
                    }
                    getFulfilledSolverRefunds
                },
                {
                    fn getContractUpgradeBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getContractUpgradeBlsValidator)
                    }
                    getContractUpgradeBlsValidator
                },
                {
                    fn scheduledTimestampForUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <scheduledTimestampForUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::scheduledTimestampForUpgrade)
                    }
                    scheduledTimestampForUpgrade
                },
                {
                    fn scheduleUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <scheduleUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::scheduleUpgrade)
                    }
                    scheduleUpgrade
                },
                {
                    fn buildSwapRequestParameters(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <buildSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::buildSwapRequestParameters)
                    }
                    buildSwapRequestParameters
                },
                {
                    fn getVerificationFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getVerificationFeeBps)
                    }
                    getVerificationFeeBps
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn currentNonce(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <currentNonceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::currentNonce)
                    }
                    currentNonce
                },
                {
                    fn setVerificationFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::setVerificationFeeBps)
                    }
                    setVerificationFeeBps
                },
                {
                    fn cancelSwapRequestAndRefund(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <cancelSwapRequestAndRefundCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::cancelSwapRequestAndRefund)
                    }
                    cancelSwapRequestAndRefund
                },
                {
                    fn getSwapRequestBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestBlsValidator)
                    }
                    getSwapRequestBlsValidator
                },
                {
                    fn getRoleMemberCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleMemberCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getRoleMemberCount)
                    }
                    getRoleMemberCount
                },
                {
                    fn swapRequestParametersToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestParametersToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::swapRequestParametersToBytes)
                    }
                    swapRequestParametersToBytes
                },
                {
                    fn initialize(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::initialize)
                    }
                    initialize
                },
                {
                    fn verificationFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <verificationFeeBpsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::verificationFeeBps)
                    }
                    verificationFeeBps
                },
                {
                    fn minimumContractUpgradeDelayParamsToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <minimumContractUpgradeDelayParamsToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::minimumContractUpgradeDelayParamsToBytes)
                    }
                    minimumContractUpgradeDelayParamsToBytes
                },
                {
                    fn revokeRole(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn MAX_FEE_BPS(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <MAX_FEE_BPSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::MAX_FEE_BPS)
                    }
                    MAX_FEE_BPS
                },
                {
                    fn swapRequestCancellationInitiatedAt(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestCancellationInitiatedAtCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::swapRequestCancellationInitiatedAt)
                    }
                    swapRequestCancellationInitiatedAt
                },
                {
                    fn getSwapRequestId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestId)
                    }
                    getSwapRequestId
                },
                {
                    fn swapRequestBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::swapRequestBlsValidator)
                    }
                    swapRequestBlsValidator
                },
                {
                    fn setSwapRequestBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::setSwapRequestBlsValidator)
                    }
                    setSwapRequestBlsValidator
                },
                {
                    fn swapRequestReceipts(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestReceiptsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::swapRequestReceipts)
                    }
                    swapRequestReceipts
                },
                {
                    fn allowedDstChainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <allowedDstChainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::allowedDstChainIds)
                    }
                    allowedDstChainIds
                },
                {
                    fn swapRequestCancellationWindow(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestCancellationWindowCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::swapRequestCancellationWindow)
                    }
                    swapRequestCancellationWindow
                },
                {
                    fn relayTokens(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <relayTokensCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::relayTokens)
                    }
                    relayTokens
                },
                {
                    fn getSwapRequestReceipt(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestReceiptCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestReceipt)
                    }
                    getSwapRequestReceipt
                },
                {
                    fn setContractUpgradeBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::setContractUpgradeBlsValidator)
                    }
                    setContractUpgradeBlsValidator
                },
                {
                    fn getFulfilledTransfers(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getFulfilledTransfersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RouterCalls::getFulfilledTransfers)
                    }
                    getFulfilledTransfers
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RouterCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getMinimumContractUpgradeDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getMinimumContractUpgradeDelay)
                    }
                    getMinimumContractUpgradeDelay
                },
                {
                    fn removeTokenMapping(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <removeTokenMappingCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::removeTokenMapping)
                    }
                    removeTokenMapping
                },
                {
                    fn getAllowedDstChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getAllowedDstChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getAllowedDstChainId)
                    }
                    getAllowedDstChainId
                },
                {
                    fn getVersion(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn blsValidatorUpdateParamsToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <blsValidatorUpdateParamsToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::blsValidatorUpdateParamsToBytes)
                    }
                    blsValidatorUpdateParamsToBytes
                },
                {
                    fn minimumContractUpgradeDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <minimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::minimumContractUpgradeDelay)
                    }
                    minimumContractUpgradeDelay
                },
                {
                    fn contractUpgradeBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <contractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::contractUpgradeBlsValidator)
                    }
                    contractUpgradeBlsValidator
                },
                {
                    fn BPS_DIVISOR(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <BPS_DIVISORCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::BPS_DIVISOR)
                    }
                    BPS_DIVISOR
                },
                {
                    fn stageSwapRequestCancellation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <stageSwapRequestCancellationCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::stageSwapRequestCancellation)
                    }
                    stageSwapRequestCancellation
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn setCancellationWindow(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setCancellationWindowCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::setCancellationWindow)
                    }
                    setCancellationWindow
                },
                {
                    fn grantRole(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn getChainId(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <getChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getChainId)
                    }
                    getChainId
                },
                {
                    fn cancelUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <cancelUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::cancelUpgrade)
                    }
                    cancelUpgrade
                },
                {
                    fn getSwapRequestParameters(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestParameters)
                    }
                    getSwapRequestParameters
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn isDstTokenMapped(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <isDstTokenMappedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::isDstTokenMapped)
                    }
                    isDstTokenMapped
                },
                {
                    fn withdrawVerificationFee(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <withdrawVerificationFeeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::withdrawVerificationFee)
                    }
                    withdrawVerificationFee
                },
                {
                    fn permitDestinationChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <permitDestinationChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::permitDestinationChainId)
                    }
                    permitDestinationChainId
                },
                {
                    fn getTokenMapping(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getTokenMappingCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getTokenMapping)
                    }
                    getTokenMapping
                },
                {
                    fn rebalanceSolver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <rebalanceSolverCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::rebalanceSolver)
                    }
                    rebalanceSolver
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn contractUpgradeParamsToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <contractUpgradeParamsToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::contractUpgradeParamsToBytes)
                    }
                    contractUpgradeParamsToBytes
                },
                {
                    fn swapRequestParameters(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestParametersCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::swapRequestParameters)
                    }
                    swapRequestParameters
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn getChainID(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <getChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getChainID)
                    }
                    getChainID
                },
                {
                    fn getCancelledSwapRequests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getCancelledSwapRequestsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getCancelledSwapRequests)
                    }
                    getCancelledSwapRequests
                },
                {
                    fn blockDestinationChainId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <blockDestinationChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::blockDestinationChainId)
                    }
                    blockDestinationChainId
                },
                {
                    fn totalVerificationFeeBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <totalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::totalVerificationFeeBalance)
                    }
                    totalVerificationFeeBalance
                },
                {
                    fn ADMIN_ROLE(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::ADMIN_ROLE)
                    }
                    ADMIN_ROLE
                },
                {
                    fn nonceToRequester(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <nonceToRequesterCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::nonceToRequester)
                    }
                    nonceToRequester
                },
                {
                    fn updateSolverFeesIfUnfulfilled(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <updateSolverFeesIfUnfulfilledCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::updateSolverFeesIfUnfulfilled)
                    }
                    updateSolverFeesIfUnfulfilled
                },
                {
                    fn getVerificationFeeAmount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getVerificationFeeAmountCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getVerificationFeeAmount)
                    }
                    getVerificationFeeAmount
                },
                {
                    fn executeUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <executeUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::executeUpgrade)
                    }
                    executeUpgrade
                },
                {
                    fn getUnfulfilledSolverRefunds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getUnfulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getUnfulfilledSolverRefunds)
                    }
                    getUnfulfilledSolverRefunds
                },
                {
                    fn getRoleMember(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleMemberCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getRoleMember)
                    }
                    getRoleMember
                },
                {
                    fn scheduledImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <scheduledImplementationCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::scheduledImplementation)
                    }
                    scheduledImplementation
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn setTokenMapping(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setTokenMappingCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::setTokenMapping)
                    }
                    setTokenMapping
                },
                {
                    fn setMinimumContractUpgradeDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::setMinimumContractUpgradeDelay)
                    }
                    setMinimumContractUpgradeDelay
                },
                {
                    fn getTotalVerificationFeeBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getTotalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getTotalVerificationFeeBalance)
                    }
                    getTotalVerificationFeeBalance
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn requestCrossChainSwap(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <requestCrossChainSwapCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::requestCrossChainSwap)
                    }
                    requestCrossChainSwap
                },
                {
                    fn getRoleMembers(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleMembersCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getRoleMembers)
                    }
                    getRoleMembers
                },
                {
                    fn getFulfilledSolverRefunds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getFulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getFulfilledSolverRefunds)
                    }
                    getFulfilledSolverRefunds
                },
                {
                    fn getContractUpgradeBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getContractUpgradeBlsValidator)
                    }
                    getContractUpgradeBlsValidator
                },
                {
                    fn scheduledTimestampForUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <scheduledTimestampForUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::scheduledTimestampForUpgrade)
                    }
                    scheduledTimestampForUpgrade
                },
                {
                    fn scheduleUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <scheduleUpgradeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::scheduleUpgrade)
                    }
                    scheduleUpgrade
                },
                {
                    fn buildSwapRequestParameters(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <buildSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::buildSwapRequestParameters)
                    }
                    buildSwapRequestParameters
                },
                {
                    fn getVerificationFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getVerificationFeeBps)
                    }
                    getVerificationFeeBps
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn currentNonce(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <currentNonceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::currentNonce)
                    }
                    currentNonce
                },
                {
                    fn setVerificationFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::setVerificationFeeBps)
                    }
                    setVerificationFeeBps
                },
                {
                    fn cancelSwapRequestAndRefund(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <cancelSwapRequestAndRefundCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::cancelSwapRequestAndRefund)
                    }
                    cancelSwapRequestAndRefund
                },
                {
                    fn getSwapRequestBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestBlsValidator)
                    }
                    getSwapRequestBlsValidator
                },
                {
                    fn getRoleMemberCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getRoleMemberCountCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getRoleMemberCount)
                    }
                    getRoleMemberCount
                },
                {
                    fn swapRequestParametersToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestParametersToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::swapRequestParametersToBytes)
                    }
                    swapRequestParametersToBytes
                },
                {
                    fn initialize(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::initialize)
                    }
                    initialize
                },
                {
                    fn verificationFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <verificationFeeBpsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::verificationFeeBps)
                    }
                    verificationFeeBps
                },
                {
                    fn minimumContractUpgradeDelayParamsToBytes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <minimumContractUpgradeDelayParamsToBytesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::minimumContractUpgradeDelayParamsToBytes)
                    }
                    minimumContractUpgradeDelayParamsToBytes
                },
                {
                    fn revokeRole(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn MAX_FEE_BPS(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <MAX_FEE_BPSCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::MAX_FEE_BPS)
                    }
                    MAX_FEE_BPS
                },
                {
                    fn swapRequestCancellationInitiatedAt(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestCancellationInitiatedAtCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::swapRequestCancellationInitiatedAt)
                    }
                    swapRequestCancellationInitiatedAt
                },
                {
                    fn getSwapRequestId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestId)
                    }
                    getSwapRequestId
                },
                {
                    fn swapRequestBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::swapRequestBlsValidator)
                    }
                    swapRequestBlsValidator
                },
                {
                    fn setSwapRequestBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::setSwapRequestBlsValidator)
                    }
                    setSwapRequestBlsValidator
                },
                {
                    fn swapRequestReceipts(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestReceiptsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::swapRequestReceipts)
                    }
                    swapRequestReceipts
                },
                {
                    fn allowedDstChainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <allowedDstChainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::allowedDstChainIds)
                    }
                    allowedDstChainIds
                },
                {
                    fn swapRequestCancellationWindow(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <swapRequestCancellationWindowCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::swapRequestCancellationWindow)
                    }
                    swapRequestCancellationWindow
                },
                {
                    fn relayTokens(data: &[u8]) -> alloy_sol_types::Result<RouterCalls> {
                        <relayTokensCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::relayTokens)
                    }
                    relayTokens
                },
                {
                    fn getSwapRequestReceipt(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getSwapRequestReceiptCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getSwapRequestReceipt)
                    }
                    getSwapRequestReceipt
                },
                {
                    fn setContractUpgradeBlsValidator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <setContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::setContractUpgradeBlsValidator)
                    }
                    setContractUpgradeBlsValidator
                },
                {
                    fn getFulfilledTransfers(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterCalls> {
                        <getFulfilledTransfersCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterCalls::getFulfilledTransfers)
                    }
                    getFulfilledTransfers
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ADMIN_ROLE(inner) => {
                    <ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::BPS_DIVISOR(inner) => {
                    <BPS_DIVISORCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MAX_FEE_BPS(inner) => {
                    <MAX_FEE_BPSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowedDstChainIds(inner) => {
                    <allowedDstChainIdsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blockDestinationChainId(inner) => {
                    <blockDestinationChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blsValidatorUpdateParamsToBytes(inner) => {
                    <blsValidatorUpdateParamsToBytesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::buildSwapRequestParameters(inner) => {
                    <buildSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::cancelSwapRequestAndRefund(inner) => {
                    <cancelSwapRequestAndRefundCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::cancelUpgrade(inner) => {
                    <cancelUpgradeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::contractUpgradeBlsValidator(inner) => {
                    <contractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::contractUpgradeParamsToBytes(inner) => {
                    <contractUpgradeParamsToBytesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::currentNonce(inner) => {
                    <currentNonceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeUpgrade(inner) => {
                    <executeUpgradeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllowedDstChainId(inner) => {
                    <getAllowedDstChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCancelledSwapRequests(inner) => {
                    <getCancelledSwapRequestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getChainID(inner) => {
                    <getChainIDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getChainId(inner) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getContractUpgradeBlsValidator(inner) => {
                    <getContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getFulfilledSolverRefunds(inner) => {
                    <getFulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getFulfilledTransfers(inner) => {
                    <getFulfilledTransfersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getMinimumContractUpgradeDelay(inner) => {
                    <getMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleMember(inner) => {
                    <getRoleMemberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleMemberCount(inner) => {
                    <getRoleMemberCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleMembers(inner) => {
                    <getRoleMembersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSwapRequestBlsValidator(inner) => {
                    <getSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSwapRequestId(inner) => {
                    <getSwapRequestIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSwapRequestParameters(inner) => {
                    <getSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSwapRequestReceipt(inner) => {
                    <getSwapRequestReceiptCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTokenMapping(inner) => {
                    <getTokenMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTotalVerificationFeeBalance(inner) => {
                    <getTotalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getUnfulfilledSolverRefunds(inner) => {
                    <getUnfulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVerificationFeeAmount(inner) => {
                    <getVerificationFeeAmountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVerificationFeeBps(inner) => {
                    <getVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isDstTokenMapped(inner) => {
                    <isDstTokenMappedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::minimumContractUpgradeDelay(inner) => {
                    <minimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::minimumContractUpgradeDelayParamsToBytes(inner) => {
                    <minimumContractUpgradeDelayParamsToBytesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::nonceToRequester(inner) => {
                    <nonceToRequesterCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::permitDestinationChainId(inner) => {
                    <permitDestinationChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::rebalanceSolver(inner) => {
                    <rebalanceSolverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::relayTokens(inner) => {
                    <relayTokensCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeTokenMapping(inner) => {
                    <removeTokenMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requestCrossChainSwap(inner) => {
                    <requestCrossChainSwapCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::scheduleUpgrade(inner) => {
                    <scheduleUpgradeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::scheduledImplementation(inner) => {
                    <scheduledImplementationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::scheduledTimestampForUpgrade(inner) => {
                    <scheduledTimestampForUpgradeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setCancellationWindow(inner) => {
                    <setCancellationWindowCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setContractUpgradeBlsValidator(inner) => {
                    <setContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMinimumContractUpgradeDelay(inner) => {
                    <setMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSwapRequestBlsValidator(inner) => {
                    <setSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setTokenMapping(inner) => {
                    <setTokenMappingCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setVerificationFeeBps(inner) => {
                    <setVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::stageSwapRequestCancellation(inner) => {
                    <stageSwapRequestCancellationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapRequestBlsValidator(inner) => {
                    <swapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapRequestCancellationInitiatedAt(inner) => {
                    <swapRequestCancellationInitiatedAtCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapRequestCancellationWindow(inner) => {
                    <swapRequestCancellationWindowCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapRequestParameters(inner) => {
                    <swapRequestParametersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapRequestParametersToBytes(inner) => {
                    <swapRequestParametersToBytesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapRequestReceipts(inner) => {
                    <swapRequestReceiptsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::totalVerificationFeeBalance(inner) => {
                    <totalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateSolverFeesIfUnfulfilled(inner) => {
                    <updateSolverFeesIfUnfulfilledCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verificationFeeBps(inner) => {
                    <verificationFeeBpsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdrawVerificationFee(inner) => {
                    <withdrawVerificationFeeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ADMIN_ROLE(inner) => {
                    <ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BPS_DIVISOR(inner) => {
                    <BPS_DIVISORCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MAX_FEE_BPS(inner) => {
                    <MAX_FEE_BPSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowedDstChainIds(inner) => {
                    <allowedDstChainIdsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blockDestinationChainId(inner) => {
                    <blockDestinationChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blsValidatorUpdateParamsToBytes(inner) => {
                    <blsValidatorUpdateParamsToBytesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::buildSwapRequestParameters(inner) => {
                    <buildSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::cancelSwapRequestAndRefund(inner) => {
                    <cancelSwapRequestAndRefundCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::cancelUpgrade(inner) => {
                    <cancelUpgradeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::contractUpgradeBlsValidator(inner) => {
                    <contractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::contractUpgradeParamsToBytes(inner) => {
                    <contractUpgradeParamsToBytesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::currentNonce(inner) => {
                    <currentNonceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeUpgrade(inner) => {
                    <executeUpgradeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllowedDstChainId(inner) => {
                    <getAllowedDstChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCancelledSwapRequests(inner) => {
                    <getCancelledSwapRequestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getChainID(inner) => {
                    <getChainIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getChainId(inner) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getContractUpgradeBlsValidator(inner) => {
                    <getContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getFulfilledSolverRefunds(inner) => {
                    <getFulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getFulfilledTransfers(inner) => {
                    <getFulfilledTransfersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getMinimumContractUpgradeDelay(inner) => {
                    <getMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleMember(inner) => {
                    <getRoleMemberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleMemberCount(inner) => {
                    <getRoleMemberCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleMembers(inner) => {
                    <getRoleMembersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSwapRequestBlsValidator(inner) => {
                    <getSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSwapRequestId(inner) => {
                    <getSwapRequestIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSwapRequestParameters(inner) => {
                    <getSwapRequestParametersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSwapRequestReceipt(inner) => {
                    <getSwapRequestReceiptCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTokenMapping(inner) => {
                    <getTokenMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTotalVerificationFeeBalance(inner) => {
                    <getTotalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getUnfulfilledSolverRefunds(inner) => {
                    <getUnfulfilledSolverRefundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVerificationFeeAmount(inner) => {
                    <getVerificationFeeAmountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVerificationFeeBps(inner) => {
                    <getVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isDstTokenMapped(inner) => {
                    <isDstTokenMappedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::minimumContractUpgradeDelay(inner) => {
                    <minimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::minimumContractUpgradeDelayParamsToBytes(inner) => {
                    <minimumContractUpgradeDelayParamsToBytesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::nonceToRequester(inner) => {
                    <nonceToRequesterCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::permitDestinationChainId(inner) => {
                    <permitDestinationChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::rebalanceSolver(inner) => {
                    <rebalanceSolverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::relayTokens(inner) => {
                    <relayTokensCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeTokenMapping(inner) => {
                    <removeTokenMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requestCrossChainSwap(inner) => {
                    <requestCrossChainSwapCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::scheduleUpgrade(inner) => {
                    <scheduleUpgradeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::scheduledImplementation(inner) => {
                    <scheduledImplementationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::scheduledTimestampForUpgrade(inner) => {
                    <scheduledTimestampForUpgradeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setCancellationWindow(inner) => {
                    <setCancellationWindowCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setContractUpgradeBlsValidator(inner) => {
                    <setContractUpgradeBlsValidatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMinimumContractUpgradeDelay(inner) => {
                    <setMinimumContractUpgradeDelayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSwapRequestBlsValidator(inner) => {
                    <setSwapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setTokenMapping(inner) => {
                    <setTokenMappingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setVerificationFeeBps(inner) => {
                    <setVerificationFeeBpsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::stageSwapRequestCancellation(inner) => {
                    <stageSwapRequestCancellationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapRequestBlsValidator(inner) => {
                    <swapRequestBlsValidatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapRequestCancellationInitiatedAt(inner) => {
                    <swapRequestCancellationInitiatedAtCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapRequestCancellationWindow(inner) => {
                    <swapRequestCancellationWindowCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapRequestParameters(inner) => {
                    <swapRequestParametersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapRequestParametersToBytes(inner) => {
                    <swapRequestParametersToBytesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapRequestReceipts(inner) => {
                    <swapRequestReceiptsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::totalVerificationFeeBalance(inner) => {
                    <totalVerificationFeeBalanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateSolverFeesIfUnfulfilled(inner) => {
                    <updateSolverFeesIfUnfulfilledCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verificationFeeBps(inner) => {
                    <verificationFeeBpsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdrawVerificationFee(inner) => {
                    <withdrawVerificationFeeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Router`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RouterErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        AddressEmptyCode(AddressEmptyCode),
        #[allow(missing_docs)]
        AlreadyFulfilled(AlreadyFulfilled),
        #[allow(missing_docs)]
        BLSSignatureVerificationFailed(BLSSignatureVerificationFailed),
        #[allow(missing_docs)]
        DestinationChainIdNotSupported(DestinationChainIdNotSupported),
        #[allow(missing_docs)]
        ERC1967InvalidImplementation(ERC1967InvalidImplementation),
        #[allow(missing_docs)]
        ERC1967NonPayable(ERC1967NonPayable),
        #[allow(missing_docs)]
        FailedCall(FailedCall),
        #[allow(missing_docs)]
        FeeBpsExceedsThreshold(FeeBpsExceedsThreshold),
        #[allow(missing_docs)]
        FeeTooLow(FeeTooLow),
        #[allow(missing_docs)]
        GrantRoleFailed(GrantRoleFailed),
        #[allow(missing_docs)]
        InsufficientVerificationFeeBalance(InsufficientVerificationFeeBalance),
        #[allow(missing_docs)]
        InvalidFeeBps(InvalidFeeBps),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        InvalidTokenOrRecipient(InvalidTokenOrRecipient),
        #[allow(missing_docs)]
        NewFeeTooLow(NewFeeTooLow),
        #[allow(missing_docs)]
        NoUpgradePending(NoUpgradePending),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
        #[allow(missing_docs)]
        SafeERC20FailedOperation(SafeERC20FailedOperation),
        #[allow(missing_docs)]
        SameVersionUpgradeNotAllowed(SameVersionUpgradeNotAllowed),
        #[allow(missing_docs)]
        SourceChainIdMismatch(SourceChainIdMismatch),
        #[allow(missing_docs)]
        SourceChainIdShouldBeDifferentFromDestination(
            SourceChainIdShouldBeDifferentFromDestination,
        ),
        #[allow(missing_docs)]
        SwapRequestCancellationAlreadyStaged(SwapRequestCancellationAlreadyStaged),
        #[allow(missing_docs)]
        SwapRequestCancellationNotStaged(SwapRequestCancellationNotStaged),
        #[allow(missing_docs)]
        SwapRequestCancellationWindowNotPassed(SwapRequestCancellationWindowNotPassed),
        #[allow(missing_docs)]
        SwapRequestCancellationWindowTooShort(SwapRequestCancellationWindowTooShort),
        #[allow(missing_docs)]
        SwapRequestParametersMismatch(SwapRequestParametersMismatch),
        #[allow(missing_docs)]
        TokenMappingAlreadyExists(TokenMappingAlreadyExists),
        #[allow(missing_docs)]
        TokenNotSupported(TokenNotSupported),
        #[allow(missing_docs)]
        TooLateToCancelUpgrade(TooLateToCancelUpgrade),
        #[allow(missing_docs)]
        UUPSUnauthorizedCallContext(UUPSUnauthorizedCallContext),
        #[allow(missing_docs)]
        UUPSUnsupportedProxiableUUID(UUPSUnsupportedProxiableUUID),
        #[allow(missing_docs)]
        UnauthorisedCaller(UnauthorisedCaller),
        #[allow(missing_docs)]
        UpgradeDelayTooShort(UpgradeDelayTooShort),
        #[allow(missing_docs)]
        UpgradeFailed(UpgradeFailed),
        #[allow(missing_docs)]
        UpgradeMustGoThroughExecuteUpgrade(UpgradeMustGoThroughExecuteUpgrade),
        #[allow(missing_docs)]
        UpgradeTimeMustRespectDelay(UpgradeTimeMustRespectDelay),
        #[allow(missing_docs)]
        UpgradeTooEarly(UpgradeTooEarly),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroAmount(ZeroAmount),
    }
    #[automatically_derived]
    impl RouterErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 205u8, 168u8, 254u8],
            [8u8, 198u8, 43u8, 171u8],
            [12u8, 212u8, 226u8, 214u8],
            [21u8, 114u8, 36u8, 254u8],
            [22u8, 13u8, 33u8, 142u8],
            [27u8, 151u8, 189u8, 42u8],
            [31u8, 42u8, 32u8, 5u8],
            [34u8, 52u8, 24u8, 146u8],
            [41u8, 91u8, 162u8, 144u8],
            [61u8, 209u8, 179u8, 5u8],
            [62u8, 229u8, 174u8, 181u8],
            [72u8, 228u8, 56u8, 158u8],
            [74u8, 65u8, 23u8, 249u8],
            [76u8, 156u8, 140u8, 227u8],
            [82u8, 116u8, 175u8, 231u8],
            [82u8, 198u8, 80u8, 249u8],
            [85u8, 41u8, 155u8, 73u8],
            [88u8, 158u8, 251u8, 80u8],
            [92u8, 180u8, 166u8, 6u8],
            [97u8, 129u8, 59u8, 128u8],
            [101u8, 225u8, 185u8, 220u8],
            [102u8, 151u8, 178u8, 50u8],
            [115u8, 47u8, 148u8, 19u8],
            [116u8, 74u8, 20u8, 129u8],
            [124u8, 97u8, 23u8, 142u8],
            [128u8, 14u8, 241u8, 30u8],
            [139u8, 255u8, 135u8, 207u8],
            [153u8, 150u8, 179u8, 21u8],
            [156u8, 141u8, 141u8, 9u8],
            [170u8, 29u8, 73u8, 164u8],
            [177u8, 159u8, 228u8, 88u8],
            [179u8, 152u8, 151u8, 159u8],
            [196u8, 254u8, 199u8, 224u8],
            [208u8, 252u8, 200u8, 81u8],
            [210u8, 75u8, 180u8, 234u8],
            [214u8, 189u8, 162u8, 117u8],
            [215u8, 230u8, 188u8, 248u8],
            [217u8, 46u8, 35u8, 61u8],
            [224u8, 124u8, 141u8, 186u8],
            [225u8, 25u8, 188u8, 241u8],
            [226u8, 81u8, 125u8, 63u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RouterErrors {
        const NAME: &'static str = "RouterErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 42usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressEmptyCode(_) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AlreadyFulfilled(_) => {
                    <AlreadyFulfilled as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BLSSignatureVerificationFailed(_) => {
                    <BLSSignatureVerificationFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::DestinationChainIdNotSupported(_) => {
                    <DestinationChainIdNotSupported as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidImplementation(_) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967NonPayable(_) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedCall(_) => {
                    <FailedCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FeeBpsExceedsThreshold(_) => {
                    <FeeBpsExceedsThreshold as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FeeTooLow(_) => <FeeTooLow as alloy_sol_types::SolError>::SELECTOR,
                Self::GrantRoleFailed(_) => {
                    <GrantRoleFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientVerificationFeeBalance(_) => {
                    <InsufficientVerificationFeeBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidFeeBps(_) => {
                    <InvalidFeeBps as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidTokenOrRecipient(_) => {
                    <InvalidTokenOrRecipient as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NewFeeTooLow(_) => {
                    <NewFeeTooLow as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoUpgradePending(_) => {
                    <NoUpgradePending as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeERC20FailedOperation(_) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SameVersionUpgradeNotAllowed(_) => {
                    <SameVersionUpgradeNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SourceChainIdMismatch(_) => {
                    <SourceChainIdMismatch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SourceChainIdShouldBeDifferentFromDestination(_) => {
                    <SourceChainIdShouldBeDifferentFromDestination as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SwapRequestCancellationAlreadyStaged(_) => {
                    <SwapRequestCancellationAlreadyStaged as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SwapRequestCancellationNotStaged(_) => {
                    <SwapRequestCancellationNotStaged as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SwapRequestCancellationWindowNotPassed(_) => {
                    <SwapRequestCancellationWindowNotPassed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SwapRequestCancellationWindowTooShort(_) => {
                    <SwapRequestCancellationWindowTooShort as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SwapRequestParametersMismatch(_) => {
                    <SwapRequestParametersMismatch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TokenMappingAlreadyExists(_) => {
                    <TokenMappingAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TokenNotSupported(_) => {
                    <TokenNotSupported as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TooLateToCancelUpgrade(_) => {
                    <TooLateToCancelUpgrade as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnauthorizedCallContext(_) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnsupportedProxiableUUID(_) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorisedCaller(_) => {
                    <UnauthorisedCaller as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UpgradeDelayTooShort(_) => {
                    <UpgradeDelayTooShort as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UpgradeFailed(_) => {
                    <UpgradeFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UpgradeMustGoThroughExecuteUpgrade(_) => {
                    <UpgradeMustGoThroughExecuteUpgrade as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UpgradeTimeMustRespectDelay(_) => {
                    <UpgradeTimeMustRespectDelay as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UpgradeTooEarly(_) => {
                    <UpgradeTooEarly as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAmount(_) => {
                    <ZeroAmount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8]) -> alloy_sol_types::Result<RouterErrors>] = &[
                {
                    fn UnauthorisedCaller(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UnauthorisedCaller as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UnauthorisedCaller)
                    }
                    UnauthorisedCaller
                },
                {
                    fn SwapRequestCancellationAlreadyStaged(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationAlreadyStaged as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationAlreadyStaged)
                    }
                    SwapRequestCancellationAlreadyStaged
                },
                {
                    fn UpgradeTimeMustRespectDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeTimeMustRespectDelay as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UpgradeTimeMustRespectDelay)
                    }
                    UpgradeTimeMustRespectDelay
                },
                {
                    fn SameVersionUpgradeNotAllowed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SameVersionUpgradeNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SameVersionUpgradeNotAllowed)
                    }
                    SameVersionUpgradeNotAllowed
                },
                {
                    fn SwapRequestCancellationNotStaged(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationNotStaged as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationNotStaged)
                    }
                    SwapRequestCancellationNotStaged
                },
                {
                    fn NewFeeTooLow(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <NewFeeTooLow as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(RouterErrors::NewFeeTooLow)
                    }
                    NewFeeTooLow
                },
                {
                    fn ZeroAmount(data: &[u8]) -> alloy_sol_types::Result<RouterErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(RouterErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn SwapRequestCancellationWindowNotPassed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationWindowNotPassed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationWindowNotPassed)
                    }
                    SwapRequestCancellationWindowNotPassed
                },
                {
                    fn InvalidTokenOrRecipient(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InvalidTokenOrRecipient as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::InvalidTokenOrRecipient)
                    }
                    InvalidTokenOrRecipient
                },
                {
                    fn TokenNotSupported(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <TokenNotSupported as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::TokenNotSupported)
                    }
                    TokenNotSupported
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn FeeBpsExceedsThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <FeeBpsExceedsThreshold as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::FeeBpsExceedsThreshold)
                    }
                    FeeBpsExceedsThreshold
                },
                {
                    fn AlreadyFulfilled(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AlreadyFulfilled as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::AlreadyFulfilled)
                    }
                    AlreadyFulfilled
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn SafeERC20FailedOperation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SafeERC20FailedOperation)
                    }
                    SafeERC20FailedOperation
                },
                {
                    fn NoUpgradePending(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <NoUpgradePending as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::NoUpgradePending)
                    }
                    NoUpgradePending
                },
                {
                    fn UpgradeFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UpgradeFailed)
                    }
                    UpgradeFailed
                },
                {
                    fn GrantRoleFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <GrantRoleFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::GrantRoleFailed)
                    }
                    GrantRoleFailed
                },
                {
                    fn UpgradeMustGoThroughExecuteUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeMustGoThroughExecuteUpgrade as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UpgradeMustGoThroughExecuteUpgrade)
                    }
                    UpgradeMustGoThroughExecuteUpgrade
                },
                {
                    fn UpgradeTooEarly(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeTooEarly as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UpgradeTooEarly)
                    }
                    UpgradeTooEarly
                },
                {
                    fn UpgradeDelayTooShort(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeDelayTooShort as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UpgradeDelayTooShort)
                    }
                    UpgradeDelayTooShort
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn FeeTooLow(data: &[u8]) -> alloy_sol_types::Result<RouterErrors> {
                        <FeeTooLow as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(RouterErrors::FeeTooLow)
                    }
                    FeeTooLow
                },
                {
                    fn SourceChainIdMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SourceChainIdMismatch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SourceChainIdMismatch)
                    }
                    SourceChainIdMismatch
                },
                {
                    fn DestinationChainIdNotSupported(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <DestinationChainIdNotSupported as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::DestinationChainIdNotSupported)
                    }
                    DestinationChainIdNotSupported
                },
                {
                    fn TokenMappingAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <TokenMappingAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::TokenMappingAlreadyExists)
                    }
                    TokenMappingAlreadyExists
                },
                {
                    fn InvalidFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InvalidFeeBps as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::InvalidFeeBps)
                    }
                    InvalidFeeBps
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn SourceChainIdShouldBeDifferentFromDestination(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SourceChainIdShouldBeDifferentFromDestination as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RouterErrors::SourceChainIdShouldBeDifferentFromDestination,
                            )
                    }
                    SourceChainIdShouldBeDifferentFromDestination
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn TooLateToCancelUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <TooLateToCancelUpgrade as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::TooLateToCancelUpgrade)
                    }
                    TooLateToCancelUpgrade
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn SwapRequestParametersMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestParametersMismatch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SwapRequestParametersMismatch)
                    }
                    SwapRequestParametersMismatch
                },
                {
                    fn InsufficientVerificationFeeBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InsufficientVerificationFeeBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::InsufficientVerificationFeeBalance)
                    }
                    InsufficientVerificationFeeBalance
                },
                {
                    fn BLSSignatureVerificationFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <BLSSignatureVerificationFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::BLSSignatureVerificationFailed)
                    }
                    BLSSignatureVerificationFailed
                },
                {
                    fn FailedCall(data: &[u8]) -> alloy_sol_types::Result<RouterErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(RouterErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(RouterErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn SwapRequestCancellationWindowTooShort(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationWindowTooShort as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationWindowTooShort)
                    }
                    SwapRequestCancellationWindowTooShort
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RouterErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RouterErrors>] = &[
                {
                    fn UnauthorisedCaller(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UnauthorisedCaller as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UnauthorisedCaller)
                    }
                    UnauthorisedCaller
                },
                {
                    fn SwapRequestCancellationAlreadyStaged(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationAlreadyStaged as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationAlreadyStaged)
                    }
                    SwapRequestCancellationAlreadyStaged
                },
                {
                    fn UpgradeTimeMustRespectDelay(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeTimeMustRespectDelay as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UpgradeTimeMustRespectDelay)
                    }
                    UpgradeTimeMustRespectDelay
                },
                {
                    fn SameVersionUpgradeNotAllowed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SameVersionUpgradeNotAllowed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SameVersionUpgradeNotAllowed)
                    }
                    SameVersionUpgradeNotAllowed
                },
                {
                    fn SwapRequestCancellationNotStaged(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationNotStaged as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationNotStaged)
                    }
                    SwapRequestCancellationNotStaged
                },
                {
                    fn NewFeeTooLow(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <NewFeeTooLow as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::NewFeeTooLow)
                    }
                    NewFeeTooLow
                },
                {
                    fn ZeroAmount(data: &[u8]) -> alloy_sol_types::Result<RouterErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn SwapRequestCancellationWindowNotPassed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationWindowNotPassed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationWindowNotPassed)
                    }
                    SwapRequestCancellationWindowNotPassed
                },
                {
                    fn InvalidTokenOrRecipient(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InvalidTokenOrRecipient as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::InvalidTokenOrRecipient)
                    }
                    InvalidTokenOrRecipient
                },
                {
                    fn TokenNotSupported(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <TokenNotSupported as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::TokenNotSupported)
                    }
                    TokenNotSupported
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn FeeBpsExceedsThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <FeeBpsExceedsThreshold as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::FeeBpsExceedsThreshold)
                    }
                    FeeBpsExceedsThreshold
                },
                {
                    fn AlreadyFulfilled(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AlreadyFulfilled as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::AlreadyFulfilled)
                    }
                    AlreadyFulfilled
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn SafeERC20FailedOperation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SafeERC20FailedOperation)
                    }
                    SafeERC20FailedOperation
                },
                {
                    fn NoUpgradePending(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <NoUpgradePending as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::NoUpgradePending)
                    }
                    NoUpgradePending
                },
                {
                    fn UpgradeFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeFailed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UpgradeFailed)
                    }
                    UpgradeFailed
                },
                {
                    fn GrantRoleFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <GrantRoleFailed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::GrantRoleFailed)
                    }
                    GrantRoleFailed
                },
                {
                    fn UpgradeMustGoThroughExecuteUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeMustGoThroughExecuteUpgrade as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UpgradeMustGoThroughExecuteUpgrade)
                    }
                    UpgradeMustGoThroughExecuteUpgrade
                },
                {
                    fn UpgradeTooEarly(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeTooEarly as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UpgradeTooEarly)
                    }
                    UpgradeTooEarly
                },
                {
                    fn UpgradeDelayTooShort(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UpgradeDelayTooShort as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UpgradeDelayTooShort)
                    }
                    UpgradeDelayTooShort
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn FeeTooLow(data: &[u8]) -> alloy_sol_types::Result<RouterErrors> {
                        <FeeTooLow as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::FeeTooLow)
                    }
                    FeeTooLow
                },
                {
                    fn SourceChainIdMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SourceChainIdMismatch as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SourceChainIdMismatch)
                    }
                    SourceChainIdMismatch
                },
                {
                    fn DestinationChainIdNotSupported(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <DestinationChainIdNotSupported as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::DestinationChainIdNotSupported)
                    }
                    DestinationChainIdNotSupported
                },
                {
                    fn TokenMappingAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <TokenMappingAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::TokenMappingAlreadyExists)
                    }
                    TokenMappingAlreadyExists
                },
                {
                    fn InvalidFeeBps(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InvalidFeeBps as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::InvalidFeeBps)
                    }
                    InvalidFeeBps
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn SourceChainIdShouldBeDifferentFromDestination(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SourceChainIdShouldBeDifferentFromDestination as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RouterErrors::SourceChainIdShouldBeDifferentFromDestination,
                            )
                    }
                    SourceChainIdShouldBeDifferentFromDestination
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn TooLateToCancelUpgrade(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <TooLateToCancelUpgrade as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::TooLateToCancelUpgrade)
                    }
                    TooLateToCancelUpgrade
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn SwapRequestParametersMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestParametersMismatch as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SwapRequestParametersMismatch)
                    }
                    SwapRequestParametersMismatch
                },
                {
                    fn InsufficientVerificationFeeBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InsufficientVerificationFeeBalance as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::InsufficientVerificationFeeBalance)
                    }
                    InsufficientVerificationFeeBalance
                },
                {
                    fn BLSSignatureVerificationFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <BLSSignatureVerificationFailed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::BLSSignatureVerificationFailed)
                    }
                    BLSSignatureVerificationFailed
                },
                {
                    fn FailedCall(data: &[u8]) -> alloy_sol_types::Result<RouterErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn SwapRequestCancellationWindowTooShort(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <SwapRequestCancellationWindowTooShort as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::SwapRequestCancellationWindowTooShort)
                    }
                    SwapRequestCancellationWindowTooShort
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RouterErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RouterErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AlreadyFulfilled(inner) => {
                    <AlreadyFulfilled as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BLSSignatureVerificationFailed(inner) => {
                    <BLSSignatureVerificationFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DestinationChainIdNotSupported(inner) => {
                    <DestinationChainIdNotSupported as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FeeBpsExceedsThreshold(inner) => {
                    <FeeBpsExceedsThreshold as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FeeTooLow(inner) => {
                    <FeeTooLow as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::GrantRoleFailed(inner) => {
                    <GrantRoleFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientVerificationFeeBalance(inner) => {
                    <InsufficientVerificationFeeBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidFeeBps(inner) => {
                    <InvalidFeeBps as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidTokenOrRecipient(inner) => {
                    <InvalidTokenOrRecipient as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NewFeeTooLow(inner) => {
                    <NewFeeTooLow as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NoUpgradePending(inner) => {
                    <NoUpgradePending as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SameVersionUpgradeNotAllowed(inner) => {
                    <SameVersionUpgradeNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SourceChainIdMismatch(inner) => {
                    <SourceChainIdMismatch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SourceChainIdShouldBeDifferentFromDestination(inner) => {
                    <SourceChainIdShouldBeDifferentFromDestination as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SwapRequestCancellationAlreadyStaged(inner) => {
                    <SwapRequestCancellationAlreadyStaged as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SwapRequestCancellationNotStaged(inner) => {
                    <SwapRequestCancellationNotStaged as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SwapRequestCancellationWindowNotPassed(inner) => {
                    <SwapRequestCancellationWindowNotPassed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SwapRequestCancellationWindowTooShort(inner) => {
                    <SwapRequestCancellationWindowTooShort as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SwapRequestParametersMismatch(inner) => {
                    <SwapRequestParametersMismatch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TokenMappingAlreadyExists(inner) => {
                    <TokenMappingAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TokenNotSupported(inner) => {
                    <TokenNotSupported as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TooLateToCancelUpgrade(inner) => {
                    <TooLateToCancelUpgrade as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnauthorisedCaller(inner) => {
                    <UnauthorisedCaller as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UpgradeDelayTooShort(inner) => {
                    <UpgradeDelayTooShort as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UpgradeFailed(inner) => {
                    <UpgradeFailed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::UpgradeMustGoThroughExecuteUpgrade(inner) => {
                    <UpgradeMustGoThroughExecuteUpgrade as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UpgradeTimeMustRespectDelay(inner) => {
                    <UpgradeTimeMustRespectDelay as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UpgradeTooEarly(inner) => {
                    <UpgradeTooEarly as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AlreadyFulfilled(inner) => {
                    <AlreadyFulfilled as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BLSSignatureVerificationFailed(inner) => {
                    <BLSSignatureVerificationFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DestinationChainIdNotSupported(inner) => {
                    <DestinationChainIdNotSupported as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::FeeBpsExceedsThreshold(inner) => {
                    <FeeBpsExceedsThreshold as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FeeTooLow(inner) => {
                    <FeeTooLow as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::GrantRoleFailed(inner) => {
                    <GrantRoleFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientVerificationFeeBalance(inner) => {
                    <InsufficientVerificationFeeBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidFeeBps(inner) => {
                    <InvalidFeeBps as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidTokenOrRecipient(inner) => {
                    <InvalidTokenOrRecipient as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NewFeeTooLow(inner) => {
                    <NewFeeTooLow as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoUpgradePending(inner) => {
                    <NoUpgradePending as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SameVersionUpgradeNotAllowed(inner) => {
                    <SameVersionUpgradeNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SourceChainIdMismatch(inner) => {
                    <SourceChainIdMismatch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SourceChainIdShouldBeDifferentFromDestination(inner) => {
                    <SourceChainIdShouldBeDifferentFromDestination as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SwapRequestCancellationAlreadyStaged(inner) => {
                    <SwapRequestCancellationAlreadyStaged as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SwapRequestCancellationNotStaged(inner) => {
                    <SwapRequestCancellationNotStaged as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SwapRequestCancellationWindowNotPassed(inner) => {
                    <SwapRequestCancellationWindowNotPassed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SwapRequestCancellationWindowTooShort(inner) => {
                    <SwapRequestCancellationWindowTooShort as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SwapRequestParametersMismatch(inner) => {
                    <SwapRequestParametersMismatch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TokenMappingAlreadyExists(inner) => {
                    <TokenMappingAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TokenNotSupported(inner) => {
                    <TokenNotSupported as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TooLateToCancelUpgrade(inner) => {
                    <TooLateToCancelUpgrade as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnauthorisedCaller(inner) => {
                    <UnauthorisedCaller as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UpgradeDelayTooShort(inner) => {
                    <UpgradeDelayTooShort as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UpgradeFailed(inner) => {
                    <UpgradeFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UpgradeMustGoThroughExecuteUpgrade(inner) => {
                    <UpgradeMustGoThroughExecuteUpgrade as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UpgradeTimeMustRespectDelay(inner) => {
                    <UpgradeTimeMustRespectDelay as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UpgradeTooEarly(inner) => {
                    <UpgradeTooEarly as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`Router`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RouterEvents {
        #[allow(missing_docs)]
        BLSValidatorUpdated(BLSValidatorUpdated),
        #[allow(missing_docs)]
        ContractUpgradeBLSValidatorUpdated(ContractUpgradeBLSValidatorUpdated),
        #[allow(missing_docs)]
        DestinationChainIdBlocked(DestinationChainIdBlocked),
        #[allow(missing_docs)]
        DestinationChainIdPermitted(DestinationChainIdPermitted),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        MinimumContractUpgradeDelayUpdated(MinimumContractUpgradeDelayUpdated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        SolverPayoutFulfilled(SolverPayoutFulfilled),
        #[allow(missing_docs)]
        SwapRequestCancellationStaged(SwapRequestCancellationStaged),
        #[allow(missing_docs)]
        SwapRequestCancellationWindowUpdated(SwapRequestCancellationWindowUpdated),
        #[allow(missing_docs)]
        SwapRequestFulfilled(SwapRequestFulfilled),
        #[allow(missing_docs)]
        SwapRequestRefundClaimed(SwapRequestRefundClaimed),
        #[allow(missing_docs)]
        SwapRequestSolverFeeUpdated(SwapRequestSolverFeeUpdated),
        #[allow(missing_docs)]
        SwapRequested(SwapRequested),
        #[allow(missing_docs)]
        TokenMappingAdded(TokenMappingAdded),
        #[allow(missing_docs)]
        TokenMappingRemoved(TokenMappingRemoved),
        #[allow(missing_docs)]
        UpgradeCancelled(UpgradeCancelled),
        #[allow(missing_docs)]
        UpgradeExecuted(UpgradeExecuted),
        #[allow(missing_docs)]
        UpgradeScheduled(UpgradeScheduled),
        #[allow(missing_docs)]
        Upgraded(Upgraded),
        #[allow(missing_docs)]
        VerificationFeeBpsUpdated(VerificationFeeBpsUpdated),
        #[allow(missing_docs)]
        VerificationFeeWithdrawn(VerificationFeeWithdrawn),
    }
    #[automatically_derived]
    impl RouterEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                0u8, 246u8, 178u8, 118u8, 174u8, 191u8, 193u8, 99u8, 195u8, 100u8, 106u8,
                99u8, 160u8, 40u8, 111u8, 132u8, 95u8, 221u8, 45u8, 245u8, 107u8, 233u8,
                27u8, 97u8, 182u8, 32u8, 68u8, 6u8, 124u8, 232u8, 73u8, 164u8,
            ],
            [
                4u8, 123u8, 38u8, 104u8, 255u8, 84u8, 74u8, 139u8, 191u8, 48u8, 189u8,
                123u8, 163u8, 231u8, 84u8, 134u8, 186u8, 160u8, 26u8, 4u8, 186u8, 223u8,
                83u8, 134u8, 182u8, 195u8, 188u8, 154u8, 125u8, 164u8, 214u8, 99u8,
            ],
            [
                42u8, 51u8, 34u8, 92u8, 24u8, 116u8, 121u8, 57u8, 220u8, 243u8, 178u8,
                189u8, 49u8, 131u8, 189u8, 53u8, 42u8, 38u8, 24u8, 227u8, 51u8, 174u8,
                53u8, 106u8, 215u8, 53u8, 46u8, 128u8, 69u8, 113u8, 144u8, 147u8,
            ],
            [
                45u8, 33u8, 200u8, 80u8, 91u8, 72u8, 176u8, 140u8, 241u8, 120u8, 162u8,
                13u8, 42u8, 103u8, 1u8, 121u8, 226u8, 108u8, 251u8, 180u8, 159u8, 252u8,
                255u8, 101u8, 22u8, 50u8, 57u8, 82u8, 21u8, 182u8, 175u8, 184u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                49u8, 152u8, 220u8, 128u8, 36u8, 159u8, 207u8, 237u8, 189u8, 13u8, 6u8,
                225u8, 255u8, 73u8, 167u8, 105u8, 90u8, 81u8, 176u8, 6u8, 89u8, 35u8,
                40u8, 206u8, 11u8, 18u8, 124u8, 222u8, 171u8, 119u8, 233u8, 54u8,
            ],
            [
                77u8, 130u8, 18u8, 197u8, 86u8, 47u8, 209u8, 221u8, 107u8, 169u8, 36u8,
                3u8, 239u8, 193u8, 140u8, 162u8, 28u8, 195u8, 243u8, 172u8, 0u8, 105u8,
                255u8, 67u8, 149u8, 101u8, 11u8, 210u8, 164u8, 97u8, 58u8, 82u8,
            ],
            [
                88u8, 25u8, 165u8, 236u8, 113u8, 165u8, 102u8, 130u8, 227u8, 232u8,
                164u8, 108u8, 64u8, 57u8, 76u8, 130u8, 222u8, 149u8, 229u8, 10u8, 141u8,
                74u8, 172u8, 124u8, 126u8, 32u8, 57u8, 216u8, 63u8, 238u8, 193u8, 116u8,
            ],
            [
                120u8, 167u8, 250u8, 255u8, 212u8, 150u8, 103u8, 246u8, 210u8, 188u8,
                22u8, 250u8, 44u8, 82u8, 135u8, 16u8, 192u8, 159u8, 192u8, 170u8, 115u8,
                50u8, 90u8, 63u8, 40u8, 225u8, 97u8, 248u8, 174u8, 62u8, 244u8, 161u8,
            ],
            [
                126u8, 146u8, 70u8, 187u8, 141u8, 244u8, 246u8, 64u8, 148u8, 179u8,
                143u8, 183u8, 25u8, 213u8, 61u8, 74u8, 202u8, 18u8, 164u8, 90u8, 81u8,
                158u8, 20u8, 89u8, 253u8, 9u8, 159u8, 168u8, 193u8, 125u8, 211u8, 176u8,
            ],
            [
                133u8, 61u8, 209u8, 112u8, 248u8, 48u8, 107u8, 177u8, 238u8, 178u8,
                106u8, 69u8, 243u8, 61u8, 56u8, 148u8, 113u8, 73u8, 253u8, 140u8, 255u8,
                237u8, 33u8, 190u8, 4u8, 85u8, 58u8, 85u8, 164u8, 90u8, 123u8, 110u8,
            ],
            [
                166u8, 140u8, 132u8, 191u8, 8u8, 88u8, 113u8, 190u8, 53u8, 61u8, 255u8,
                162u8, 207u8, 29u8, 137u8, 139u8, 134u8, 79u8, 75u8, 254u8, 200u8, 215u8,
                150u8, 50u8, 104u8, 39u8, 123u8, 101u8, 96u8, 159u8, 200u8, 142u8,
            ],
            [
                168u8, 238u8, 8u8, 31u8, 93u8, 240u8, 59u8, 160u8, 2u8, 85u8, 40u8, 12u8,
                120u8, 30u8, 214u8, 161u8, 166u8, 124u8, 151u8, 2u8, 80u8, 227u8, 104u8,
                111u8, 149u8, 140u8, 25u8, 172u8, 203u8, 8u8, 212u8, 128u8,
            ],
            [
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ],
            [
                189u8, 59u8, 232u8, 159u8, 108u8, 165u8, 70u8, 240u8, 43u8, 103u8, 221u8,
                209u8, 147u8, 212u8, 240u8, 230u8, 79u8, 88u8, 15u8, 60u8, 119u8, 110u8,
                148u8, 46u8, 119u8, 164u8, 80u8, 147u8, 189u8, 22u8, 218u8, 12u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                195u8, 127u8, 202u8, 211u8, 54u8, 116u8, 37u8, 27u8, 171u8, 161u8, 203u8,
                193u8, 107u8, 46u8, 142u8, 56u8, 131u8, 255u8, 37u8, 230u8, 16u8, 89u8,
                115u8, 188u8, 122u8, 127u8, 155u8, 215u8, 250u8, 252u8, 33u8, 153u8,
            ],
            [
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ],
            [
                225u8, 0u8, 150u8, 39u8, 101u8, 62u8, 180u8, 127u8, 125u8, 15u8, 59u8,
                68u8, 53u8, 116u8, 159u8, 121u8, 132u8, 168u8, 3u8, 194u8, 31u8, 132u8,
                160u8, 118u8, 204u8, 77u8, 203u8, 4u8, 18u8, 207u8, 6u8, 111u8,
            ],
            [
                226u8, 143u8, 79u8, 13u8, 113u8, 41u8, 46u8, 76u8, 44u8, 13u8, 100u8,
                73u8, 255u8, 13u8, 220u8, 131u8, 18u8, 251u8, 158u8, 235u8, 96u8, 76u8,
                165u8, 96u8, 196u8, 219u8, 225u8, 32u8, 253u8, 241u8, 7u8, 206u8,
            ],
            [
                226u8, 240u8, 22u8, 15u8, 190u8, 119u8, 154u8, 187u8, 36u8, 98u8, 118u8,
                212u8, 157u8, 172u8, 12u8, 185u8, 124u8, 134u8, 223u8, 124u8, 183u8,
                42u8, 81u8, 11u8, 185u8, 207u8, 33u8, 72u8, 111u8, 92u8, 130u8, 175u8,
            ],
            [
                240u8, 127u8, 66u8, 105u8, 28u8, 151u8, 139u8, 82u8, 67u8, 105u8, 207u8,
                40u8, 147u8, 167u8, 202u8, 49u8, 255u8, 64u8, 142u8, 73u8, 224u8, 134u8,
                40u8, 110u8, 156u8, 174u8, 146u8, 13u8, 223u8, 148u8, 193u8, 25u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
            [
                253u8, 90u8, 154u8, 231u8, 199u8, 60u8, 17u8, 253u8, 232u8, 109u8, 214u8,
                23u8, 4u8, 233u8, 55u8, 160u8, 76u8, 153u8, 231u8, 238u8, 246u8, 104u8,
                5u8, 15u8, 104u8, 90u8, 171u8, 197u8, 216u8, 166u8, 178u8, 228u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RouterEvents {
        const NAME: &'static str = "RouterEvents";
        const COUNT: usize = 24usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <BLSValidatorUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BLSValidatorUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::BLSValidatorUpdated)
                }
                Some(
                    <ContractUpgradeBLSValidatorUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ContractUpgradeBLSValidatorUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ContractUpgradeBLSValidatorUpdated)
                }
                Some(
                    <DestinationChainIdBlocked as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DestinationChainIdBlocked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DestinationChainIdBlocked)
                }
                Some(
                    <DestinationChainIdPermitted as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DestinationChainIdPermitted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DestinationChainIdPermitted)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <MinimumContractUpgradeDelayUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <MinimumContractUpgradeDelayUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::MinimumContractUpgradeDelayUpdated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(
                    <SolverPayoutFulfilled as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SolverPayoutFulfilled as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SolverPayoutFulfilled)
                }
                Some(
                    <SwapRequestCancellationStaged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SwapRequestCancellationStaged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SwapRequestCancellationStaged)
                }
                Some(
                    <SwapRequestCancellationWindowUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SwapRequestCancellationWindowUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SwapRequestCancellationWindowUpdated)
                }
                Some(
                    <SwapRequestFulfilled as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SwapRequestFulfilled as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SwapRequestFulfilled)
                }
                Some(
                    <SwapRequestRefundClaimed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SwapRequestRefundClaimed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SwapRequestRefundClaimed)
                }
                Some(
                    <SwapRequestSolverFeeUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SwapRequestSolverFeeUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SwapRequestSolverFeeUpdated)
                }
                Some(<SwapRequested as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <SwapRequested as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SwapRequested)
                }
                Some(
                    <TokenMappingAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TokenMappingAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::TokenMappingAdded)
                }
                Some(
                    <TokenMappingRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TokenMappingRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::TokenMappingRemoved)
                }
                Some(<UpgradeCancelled as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UpgradeCancelled as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::UpgradeCancelled)
                }
                Some(<UpgradeExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UpgradeExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::UpgradeExecuted)
                }
                Some(<UpgradeScheduled as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UpgradeScheduled as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::UpgradeScheduled)
                }
                Some(<Upgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Upgraded as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Upgraded)
                }
                Some(
                    <VerificationFeeBpsUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <VerificationFeeBpsUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::VerificationFeeBpsUpdated)
                }
                Some(
                    <VerificationFeeWithdrawn as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <VerificationFeeWithdrawn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::VerificationFeeWithdrawn)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RouterEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BLSValidatorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ContractUpgradeBLSValidatorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DestinationChainIdBlocked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DestinationChainIdPermitted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::MinimumContractUpgradeDelayUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SolverPayoutFulfilled(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SwapRequestCancellationStaged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SwapRequestCancellationWindowUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SwapRequestFulfilled(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SwapRequestRefundClaimed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SwapRequestSolverFeeUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SwapRequested(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TokenMappingAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TokenMappingRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UpgradeCancelled(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UpgradeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UpgradeScheduled(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::VerificationFeeBpsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::VerificationFeeWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BLSValidatorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ContractUpgradeBLSValidatorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DestinationChainIdBlocked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DestinationChainIdPermitted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::MinimumContractUpgradeDelayUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SolverPayoutFulfilled(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SwapRequestCancellationStaged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SwapRequestCancellationWindowUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SwapRequestFulfilled(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SwapRequestRefundClaimed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SwapRequestSolverFeeUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SwapRequested(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TokenMappingAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TokenMappingRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UpgradeCancelled(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UpgradeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UpgradeScheduled(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::VerificationFeeBpsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::VerificationFeeWithdrawn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Router`](self) contract instance.

See the [wrapper's documentation](`RouterInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(address: alloy_sol_types::private::Address, provider: P) -> RouterInstance<P, N> {
        RouterInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RouterInstance<P, N>>,
    > {
        RouterInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        RouterInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`Router`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Router`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RouterInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for RouterInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RouterInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RouterInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`Router`](self) contract instance.

See the [wrapper's documentation](`RouterInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<RouterInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> RouterInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RouterInstance<P, N> {
            RouterInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RouterInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ADMIN_ROLE`] function.
        pub fn ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, ADMIN_ROLECall, N> {
            self.call_builder(&ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`BPS_DIVISOR`] function.
        pub fn BPS_DIVISOR(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, BPS_DIVISORCall, N> {
            self.call_builder(&BPS_DIVISORCall)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`MAX_FEE_BPS`] function.
        pub fn MAX_FEE_BPS(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, MAX_FEE_BPSCall, N> {
            self.call_builder(&MAX_FEE_BPSCall)
        }
        ///Creates a new call builder for the [`UPGRADE_INTERFACE_VERSION`] function.
        pub fn UPGRADE_INTERFACE_VERSION(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, UPGRADE_INTERFACE_VERSIONCall, N> {
            self.call_builder(&UPGRADE_INTERFACE_VERSIONCall)
        }
        ///Creates a new call builder for the [`allowedDstChainIds`] function.
        pub fn allowedDstChainIds(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, allowedDstChainIdsCall, N> {
            self.call_builder(&allowedDstChainIdsCall(_0))
        }
        ///Creates a new call builder for the [`blockDestinationChainId`] function.
        pub fn blockDestinationChainId(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, blockDestinationChainIdCall, N> {
            self.call_builder(
                &blockDestinationChainIdCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`blsValidatorUpdateParamsToBytes`] function.
        pub fn blsValidatorUpdateParamsToBytes(
            &self,
            action: alloy::sol_types::private::String,
            blsValidator: alloy::sol_types::private::Address,
            nonce: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, blsValidatorUpdateParamsToBytesCall, N> {
            self.call_builder(
                &blsValidatorUpdateParamsToBytesCall {
                    action,
                    blsValidator,
                    nonce,
                },
            )
        }
        ///Creates a new call builder for the [`buildSwapRequestParameters`] function.
        pub fn buildSwapRequestParameters(
            &self,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            amountOut: alloy::sol_types::private::primitives::aliases::U256,
            verificationFeeAmount: alloy::sol_types::private::primitives::aliases::U256,
            solverFeeAmount: alloy::sol_types::private::primitives::aliases::U256,
            dstChainId: alloy::sol_types::private::primitives::aliases::U256,
            recipient: alloy::sol_types::private::Address,
            nonce: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, buildSwapRequestParametersCall, N> {
            self.call_builder(
                &buildSwapRequestParametersCall {
                    tokenIn,
                    tokenOut,
                    amountOut,
                    verificationFeeAmount,
                    solverFeeAmount,
                    dstChainId,
                    recipient,
                    nonce,
                },
            )
        }
        ///Creates a new call builder for the [`cancelSwapRequestAndRefund`] function.
        pub fn cancelSwapRequestAndRefund(
            &self,
            requestId: alloy::sol_types::private::FixedBytes<32>,
            refundRecipient: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, cancelSwapRequestAndRefundCall, N> {
            self.call_builder(
                &cancelSwapRequestAndRefundCall {
                    requestId,
                    refundRecipient,
                },
            )
        }
        ///Creates a new call builder for the [`cancelUpgrade`] function.
        pub fn cancelUpgrade(
            &self,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, cancelUpgradeCall, N> {
            self.call_builder(&cancelUpgradeCall { signature })
        }
        ///Creates a new call builder for the [`contractUpgradeBlsValidator`] function.
        pub fn contractUpgradeBlsValidator(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, contractUpgradeBlsValidatorCall, N> {
            self.call_builder(&contractUpgradeBlsValidatorCall)
        }
        ///Creates a new call builder for the [`contractUpgradeParamsToBytes`] function.
        pub fn contractUpgradeParamsToBytes(
            &self,
            action: alloy::sol_types::private::String,
            pendingImplementation: alloy::sol_types::private::Address,
            newImplementation: alloy::sol_types::private::Address,
            upgradeCalldata: alloy::sol_types::private::Bytes,
            upgradeTime: alloy::sol_types::private::primitives::aliases::U256,
            nonce: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, contractUpgradeParamsToBytesCall, N> {
            self.call_builder(
                &contractUpgradeParamsToBytesCall {
                    action,
                    pendingImplementation,
                    newImplementation,
                    upgradeCalldata,
                    upgradeTime,
                    nonce,
                },
            )
        }
        ///Creates a new call builder for the [`currentNonce`] function.
        pub fn currentNonce(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, currentNonceCall, N> {
            self.call_builder(&currentNonceCall)
        }
        ///Creates a new call builder for the [`executeUpgrade`] function.
        pub fn executeUpgrade(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, executeUpgradeCall, N> {
            self.call_builder(&executeUpgradeCall)
        }
        ///Creates a new call builder for the [`getAllowedDstChainId`] function.
        pub fn getAllowedDstChainId(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getAllowedDstChainIdCall, N> {
            self.call_builder(
                &getAllowedDstChainIdCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`getCancelledSwapRequests`] function.
        pub fn getCancelledSwapRequests(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getCancelledSwapRequestsCall, N> {
            self.call_builder(&getCancelledSwapRequestsCall)
        }
        ///Creates a new call builder for the [`getChainID`] function.
        pub fn getChainID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getChainIDCall, N> {
            self.call_builder(&getChainIDCall)
        }
        ///Creates a new call builder for the [`getChainId`] function.
        pub fn getChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getChainIdCall, N> {
            self.call_builder(&getChainIdCall)
        }
        ///Creates a new call builder for the [`getContractUpgradeBlsValidator`] function.
        pub fn getContractUpgradeBlsValidator(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getContractUpgradeBlsValidatorCall, N> {
            self.call_builder(&getContractUpgradeBlsValidatorCall)
        }
        ///Creates a new call builder for the [`getFulfilledSolverRefunds`] function.
        pub fn getFulfilledSolverRefunds(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getFulfilledSolverRefundsCall, N> {
            self.call_builder(&getFulfilledSolverRefundsCall)
        }
        ///Creates a new call builder for the [`getFulfilledTransfers`] function.
        pub fn getFulfilledTransfers(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getFulfilledTransfersCall, N> {
            self.call_builder(&getFulfilledTransfersCall)
        }
        ///Creates a new call builder for the [`getMinimumContractUpgradeDelay`] function.
        pub fn getMinimumContractUpgradeDelay(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getMinimumContractUpgradeDelayCall, N> {
            self.call_builder(&getMinimumContractUpgradeDelayCall)
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`getRoleMember`] function.
        pub fn getRoleMember(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            index: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleMemberCall, N> {
            self.call_builder(&getRoleMemberCall { role, index })
        }
        ///Creates a new call builder for the [`getRoleMemberCount`] function.
        pub fn getRoleMemberCount(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleMemberCountCall, N> {
            self.call_builder(&getRoleMemberCountCall { role })
        }
        ///Creates a new call builder for the [`getRoleMembers`] function.
        pub fn getRoleMembers(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleMembersCall, N> {
            self.call_builder(&getRoleMembersCall { role })
        }
        ///Creates a new call builder for the [`getSwapRequestBlsValidator`] function.
        pub fn getSwapRequestBlsValidator(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getSwapRequestBlsValidatorCall, N> {
            self.call_builder(&getSwapRequestBlsValidatorCall)
        }
        ///Creates a new call builder for the [`getSwapRequestId`] function.
        pub fn getSwapRequestId(
            &self,
            p: <IRouter::SwapRequestParameters as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<&P, getSwapRequestIdCall, N> {
            self.call_builder(&getSwapRequestIdCall { p })
        }
        ///Creates a new call builder for the [`getSwapRequestParameters`] function.
        pub fn getSwapRequestParameters(
            &self,
            requestId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getSwapRequestParametersCall, N> {
            self.call_builder(
                &getSwapRequestParametersCall {
                    requestId,
                },
            )
        }
        ///Creates a new call builder for the [`getSwapRequestReceipt`] function.
        pub fn getSwapRequestReceipt(
            &self,
            _requestId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getSwapRequestReceiptCall, N> {
            self.call_builder(
                &getSwapRequestReceiptCall {
                    _requestId,
                },
            )
        }
        ///Creates a new call builder for the [`getTokenMapping`] function.
        pub fn getTokenMapping(
            &self,
            srcToken: alloy::sol_types::private::Address,
            dstChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getTokenMappingCall, N> {
            self.call_builder(
                &getTokenMappingCall {
                    srcToken,
                    dstChainId,
                },
            )
        }
        ///Creates a new call builder for the [`getTotalVerificationFeeBalance`] function.
        pub fn getTotalVerificationFeeBalance(
            &self,
            token: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getTotalVerificationFeeBalanceCall, N> {
            self.call_builder(
                &getTotalVerificationFeeBalanceCall {
                    token,
                },
            )
        }
        ///Creates a new call builder for the [`getUnfulfilledSolverRefunds`] function.
        pub fn getUnfulfilledSolverRefunds(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getUnfulfilledSolverRefundsCall, N> {
            self.call_builder(&getUnfulfilledSolverRefundsCall)
        }
        ///Creates a new call builder for the [`getVerificationFeeAmount`] function.
        pub fn getVerificationFeeAmount(
            &self,
            amountToSwap: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getVerificationFeeAmountCall, N> {
            self.call_builder(
                &getVerificationFeeAmountCall {
                    amountToSwap,
                },
            )
        }
        ///Creates a new call builder for the [`getVerificationFeeBps`] function.
        pub fn getVerificationFeeBps(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getVerificationFeeBpsCall, N> {
            self.call_builder(&getVerificationFeeBpsCall)
        }
        ///Creates a new call builder for the [`getVersion`] function.
        pub fn getVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getVersionCall, N> {
            self.call_builder(&getVersionCall)
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _owner: alloy::sol_types::private::Address,
            _swapRequestBlsValidator: alloy::sol_types::private::Address,
            _contractUpgradeBlsValidator: alloy::sol_types::private::Address,
            _verificationFeeBps: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _owner,
                    _swapRequestBlsValidator,
                    _contractUpgradeBlsValidator,
                    _verificationFeeBps,
                },
            )
        }
        ///Creates a new call builder for the [`isDstTokenMapped`] function.
        pub fn isDstTokenMapped(
            &self,
            srcToken: alloy::sol_types::private::Address,
            dstChainId: alloy::sol_types::private::primitives::aliases::U256,
            dstToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isDstTokenMappedCall, N> {
            self.call_builder(
                &isDstTokenMappedCall {
                    srcToken,
                    dstChainId,
                    dstToken,
                },
            )
        }
        ///Creates a new call builder for the [`minimumContractUpgradeDelay`] function.
        pub fn minimumContractUpgradeDelay(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, minimumContractUpgradeDelayCall, N> {
            self.call_builder(&minimumContractUpgradeDelayCall)
        }
        ///Creates a new call builder for the [`minimumContractUpgradeDelayParamsToBytes`] function.
        pub fn minimumContractUpgradeDelayParamsToBytes(
            &self,
            action: alloy::sol_types::private::String,
            _minimumContractUpgradeDelay: alloy::sol_types::private::primitives::aliases::U256,
            nonce: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            minimumContractUpgradeDelayParamsToBytesCall,
            N,
        > {
            self.call_builder(
                &minimumContractUpgradeDelayParamsToBytesCall {
                    action,
                    _minimumContractUpgradeDelay,
                    nonce,
                },
            )
        }
        ///Creates a new call builder for the [`nonceToRequester`] function.
        pub fn nonceToRequester(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, nonceToRequesterCall, N> {
            self.call_builder(&nonceToRequesterCall(_0))
        }
        ///Creates a new call builder for the [`permitDestinationChainId`] function.
        pub fn permitDestinationChainId(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, permitDestinationChainIdCall, N> {
            self.call_builder(
                &permitDestinationChainIdCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`proxiableUUID`] function.
        pub fn proxiableUUID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, proxiableUUIDCall, N> {
            self.call_builder(&proxiableUUIDCall)
        }
        ///Creates a new call builder for the [`rebalanceSolver`] function.
        pub fn rebalanceSolver(
            &self,
            solver: alloy::sol_types::private::Address,
            requestId: alloy::sol_types::private::FixedBytes<32>,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, rebalanceSolverCall, N> {
            self.call_builder(
                &rebalanceSolverCall {
                    solver,
                    requestId,
                    signature,
                },
            )
        }
        ///Creates a new call builder for the [`relayTokens`] function.
        pub fn relayTokens(
            &self,
            solverRefundAddress: alloy::sol_types::private::Address,
            requestId: alloy::sol_types::private::FixedBytes<32>,
            sender: alloy::sol_types::private::Address,
            recipient: alloy::sol_types::private::Address,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            amountOut: alloy::sol_types::private::primitives::aliases::U256,
            srcChainId: alloy::sol_types::private::primitives::aliases::U256,
            nonce: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, relayTokensCall, N> {
            self.call_builder(
                &relayTokensCall {
                    solverRefundAddress,
                    requestId,
                    sender,
                    recipient,
                    tokenIn,
                    tokenOut,
                    amountOut,
                    srcChainId,
                    nonce,
                },
            )
        }
        ///Creates a new call builder for the [`removeTokenMapping`] function.
        pub fn removeTokenMapping(
            &self,
            dstChainId: alloy::sol_types::private::primitives::aliases::U256,
            dstToken: alloy::sol_types::private::Address,
            srcToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, removeTokenMappingCall, N> {
            self.call_builder(
                &removeTokenMappingCall {
                    dstChainId,
                    dstToken,
                    srcToken,
                },
            )
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`requestCrossChainSwap`] function.
        pub fn requestCrossChainSwap(
            &self,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            solverFee: alloy::sol_types::private::primitives::aliases::U256,
            dstChainId: alloy::sol_types::private::primitives::aliases::U256,
            recipient: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, requestCrossChainSwapCall, N> {
            self.call_builder(
                &requestCrossChainSwapCall {
                    tokenIn,
                    tokenOut,
                    amount,
                    solverFee,
                    dstChainId,
                    recipient,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`scheduleUpgrade`] function.
        pub fn scheduleUpgrade(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            upgradeCalldata: alloy::sol_types::private::Bytes,
            upgradeTime: alloy::sol_types::private::primitives::aliases::U256,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, scheduleUpgradeCall, N> {
            self.call_builder(
                &scheduleUpgradeCall {
                    newImplementation,
                    upgradeCalldata,
                    upgradeTime,
                    signature,
                },
            )
        }
        ///Creates a new call builder for the [`scheduledImplementation`] function.
        pub fn scheduledImplementation(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, scheduledImplementationCall, N> {
            self.call_builder(&scheduledImplementationCall)
        }
        ///Creates a new call builder for the [`scheduledTimestampForUpgrade`] function.
        pub fn scheduledTimestampForUpgrade(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, scheduledTimestampForUpgradeCall, N> {
            self.call_builder(&scheduledTimestampForUpgradeCall)
        }
        ///Creates a new call builder for the [`setCancellationWindow`] function.
        pub fn setCancellationWindow(
            &self,
            newSwapRequestCancellationWindow: alloy::sol_types::private::primitives::aliases::U256,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, setCancellationWindowCall, N> {
            self.call_builder(
                &setCancellationWindowCall {
                    newSwapRequestCancellationWindow,
                    signature,
                },
            )
        }
        ///Creates a new call builder for the [`setContractUpgradeBlsValidator`] function.
        pub fn setContractUpgradeBlsValidator(
            &self,
            _contractUpgradeBlsValidator: alloy::sol_types::private::Address,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, setContractUpgradeBlsValidatorCall, N> {
            self.call_builder(
                &setContractUpgradeBlsValidatorCall {
                    _contractUpgradeBlsValidator,
                    signature,
                },
            )
        }
        ///Creates a new call builder for the [`setMinimumContractUpgradeDelay`] function.
        pub fn setMinimumContractUpgradeDelay(
            &self,
            _minimumContractUpgradeDelay: alloy::sol_types::private::primitives::aliases::U256,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, setMinimumContractUpgradeDelayCall, N> {
            self.call_builder(
                &setMinimumContractUpgradeDelayCall {
                    _minimumContractUpgradeDelay,
                    signature,
                },
            )
        }
        ///Creates a new call builder for the [`setSwapRequestBlsValidator`] function.
        pub fn setSwapRequestBlsValidator(
            &self,
            _swapRequestBlsValidator: alloy::sol_types::private::Address,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, setSwapRequestBlsValidatorCall, N> {
            self.call_builder(
                &setSwapRequestBlsValidatorCall {
                    _swapRequestBlsValidator,
                    signature,
                },
            )
        }
        ///Creates a new call builder for the [`setTokenMapping`] function.
        pub fn setTokenMapping(
            &self,
            dstChainId: alloy::sol_types::private::primitives::aliases::U256,
            dstToken: alloy::sol_types::private::Address,
            srcToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, setTokenMappingCall, N> {
            self.call_builder(
                &setTokenMappingCall {
                    dstChainId,
                    dstToken,
                    srcToken,
                },
            )
        }
        ///Creates a new call builder for the [`setVerificationFeeBps`] function.
        pub fn setVerificationFeeBps(
            &self,
            _verificationFeeBps: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setVerificationFeeBpsCall, N> {
            self.call_builder(
                &setVerificationFeeBpsCall {
                    _verificationFeeBps,
                },
            )
        }
        ///Creates a new call builder for the [`stageSwapRequestCancellation`] function.
        pub fn stageSwapRequestCancellation(
            &self,
            requestId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, stageSwapRequestCancellationCall, N> {
            self.call_builder(
                &stageSwapRequestCancellationCall {
                    requestId,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`swapRequestBlsValidator`] function.
        pub fn swapRequestBlsValidator(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, swapRequestBlsValidatorCall, N> {
            self.call_builder(&swapRequestBlsValidatorCall)
        }
        ///Creates a new call builder for the [`swapRequestCancellationInitiatedAt`] function.
        pub fn swapRequestCancellationInitiatedAt(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            swapRequestCancellationInitiatedAtCall,
            N,
        > {
            self.call_builder(&swapRequestCancellationInitiatedAtCall(_0))
        }
        ///Creates a new call builder for the [`swapRequestCancellationWindow`] function.
        pub fn swapRequestCancellationWindow(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, swapRequestCancellationWindowCall, N> {
            self.call_builder(&swapRequestCancellationWindowCall)
        }
        ///Creates a new call builder for the [`swapRequestParameters`] function.
        pub fn swapRequestParameters(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, swapRequestParametersCall, N> {
            self.call_builder(&swapRequestParametersCall(_0))
        }
        ///Creates a new call builder for the [`swapRequestParametersToBytes`] function.
        pub fn swapRequestParametersToBytes(
            &self,
            requestId: alloy::sol_types::private::FixedBytes<32>,
            solver: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, swapRequestParametersToBytesCall, N> {
            self.call_builder(
                &swapRequestParametersToBytesCall {
                    requestId,
                    solver,
                },
            )
        }
        ///Creates a new call builder for the [`swapRequestReceipts`] function.
        pub fn swapRequestReceipts(
            &self,
            _0: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, swapRequestReceiptsCall, N> {
            self.call_builder(&swapRequestReceiptsCall(_0))
        }
        ///Creates a new call builder for the [`totalVerificationFeeBalance`] function.
        pub fn totalVerificationFeeBalance(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, totalVerificationFeeBalanceCall, N> {
            self.call_builder(&totalVerificationFeeBalanceCall(_0))
        }
        ///Creates a new call builder for the [`updateSolverFeesIfUnfulfilled`] function.
        pub fn updateSolverFeesIfUnfulfilled(
            &self,
            requestId: alloy::sol_types::private::FixedBytes<32>,
            newFee: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, updateSolverFeesIfUnfulfilledCall, N> {
            self.call_builder(
                &updateSolverFeesIfUnfulfilledCall {
                    requestId,
                    newFee,
                },
            )
        }
        ///Creates a new call builder for the [`upgradeToAndCall`] function.
        pub fn upgradeToAndCall(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, upgradeToAndCallCall, N> {
            self.call_builder(
                &upgradeToAndCallCall {
                    newImplementation,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`verificationFeeBps`] function.
        pub fn verificationFeeBps(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, verificationFeeBpsCall, N> {
            self.call_builder(&verificationFeeBpsCall)
        }
        ///Creates a new call builder for the [`withdrawVerificationFee`] function.
        pub fn withdrawVerificationFee(
            &self,
            token: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, withdrawVerificationFeeCall, N> {
            self.call_builder(
                &withdrawVerificationFeeCall {
                    token,
                    to,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RouterInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BLSValidatorUpdated`] event.
        pub fn BLSValidatorUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, BLSValidatorUpdated, N> {
            self.event_filter::<BLSValidatorUpdated>()
        }
        ///Creates a new event filter for the [`ContractUpgradeBLSValidatorUpdated`] event.
        pub fn ContractUpgradeBLSValidatorUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, ContractUpgradeBLSValidatorUpdated, N> {
            self.event_filter::<ContractUpgradeBLSValidatorUpdated>()
        }
        ///Creates a new event filter for the [`DestinationChainIdBlocked`] event.
        pub fn DestinationChainIdBlocked_filter(
            &self,
        ) -> alloy_contract::Event<&P, DestinationChainIdBlocked, N> {
            self.event_filter::<DestinationChainIdBlocked>()
        }
        ///Creates a new event filter for the [`DestinationChainIdPermitted`] event.
        pub fn DestinationChainIdPermitted_filter(
            &self,
        ) -> alloy_contract::Event<&P, DestinationChainIdPermitted, N> {
            self.event_filter::<DestinationChainIdPermitted>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<&P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`MinimumContractUpgradeDelayUpdated`] event.
        pub fn MinimumContractUpgradeDelayUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, MinimumContractUpgradeDelayUpdated, N> {
            self.event_filter::<MinimumContractUpgradeDelayUpdated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(&self) -> alloy_contract::Event<&P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(&self) -> alloy_contract::Event<&P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`SolverPayoutFulfilled`] event.
        pub fn SolverPayoutFulfilled_filter(
            &self,
        ) -> alloy_contract::Event<&P, SolverPayoutFulfilled, N> {
            self.event_filter::<SolverPayoutFulfilled>()
        }
        ///Creates a new event filter for the [`SwapRequestCancellationStaged`] event.
        pub fn SwapRequestCancellationStaged_filter(
            &self,
        ) -> alloy_contract::Event<&P, SwapRequestCancellationStaged, N> {
            self.event_filter::<SwapRequestCancellationStaged>()
        }
        ///Creates a new event filter for the [`SwapRequestCancellationWindowUpdated`] event.
        pub fn SwapRequestCancellationWindowUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, SwapRequestCancellationWindowUpdated, N> {
            self.event_filter::<SwapRequestCancellationWindowUpdated>()
        }
        ///Creates a new event filter for the [`SwapRequestFulfilled`] event.
        pub fn SwapRequestFulfilled_filter(
            &self,
        ) -> alloy_contract::Event<&P, SwapRequestFulfilled, N> {
            self.event_filter::<SwapRequestFulfilled>()
        }
        ///Creates a new event filter for the [`SwapRequestRefundClaimed`] event.
        pub fn SwapRequestRefundClaimed_filter(
            &self,
        ) -> alloy_contract::Event<&P, SwapRequestRefundClaimed, N> {
            self.event_filter::<SwapRequestRefundClaimed>()
        }
        ///Creates a new event filter for the [`SwapRequestSolverFeeUpdated`] event.
        pub fn SwapRequestSolverFeeUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, SwapRequestSolverFeeUpdated, N> {
            self.event_filter::<SwapRequestSolverFeeUpdated>()
        }
        ///Creates a new event filter for the [`SwapRequested`] event.
        pub fn SwapRequested_filter(
            &self,
        ) -> alloy_contract::Event<&P, SwapRequested, N> {
            self.event_filter::<SwapRequested>()
        }
        ///Creates a new event filter for the [`TokenMappingAdded`] event.
        pub fn TokenMappingAdded_filter(
            &self,
        ) -> alloy_contract::Event<&P, TokenMappingAdded, N> {
            self.event_filter::<TokenMappingAdded>()
        }
        ///Creates a new event filter for the [`TokenMappingRemoved`] event.
        pub fn TokenMappingRemoved_filter(
            &self,
        ) -> alloy_contract::Event<&P, TokenMappingRemoved, N> {
            self.event_filter::<TokenMappingRemoved>()
        }
        ///Creates a new event filter for the [`UpgradeCancelled`] event.
        pub fn UpgradeCancelled_filter(
            &self,
        ) -> alloy_contract::Event<&P, UpgradeCancelled, N> {
            self.event_filter::<UpgradeCancelled>()
        }
        ///Creates a new event filter for the [`UpgradeExecuted`] event.
        pub fn UpgradeExecuted_filter(
            &self,
        ) -> alloy_contract::Event<&P, UpgradeExecuted, N> {
            self.event_filter::<UpgradeExecuted>()
        }
        ///Creates a new event filter for the [`UpgradeScheduled`] event.
        pub fn UpgradeScheduled_filter(
            &self,
        ) -> alloy_contract::Event<&P, UpgradeScheduled, N> {
            self.event_filter::<UpgradeScheduled>()
        }
        ///Creates a new event filter for the [`Upgraded`] event.
        pub fn Upgraded_filter(&self) -> alloy_contract::Event<&P, Upgraded, N> {
            self.event_filter::<Upgraded>()
        }
        ///Creates a new event filter for the [`VerificationFeeBpsUpdated`] event.
        pub fn VerificationFeeBpsUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, VerificationFeeBpsUpdated, N> {
            self.event_filter::<VerificationFeeBpsUpdated>()
        }
        ///Creates a new event filter for the [`VerificationFeeWithdrawn`] event.
        pub fn VerificationFeeWithdrawn_filter(
            &self,
        ) -> alloy_contract::Event<&P, VerificationFeeWithdrawn, N> {
            self.event_filter::<VerificationFeeWithdrawn>()
        }
    }
}
