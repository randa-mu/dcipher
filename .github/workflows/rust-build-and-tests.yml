name: rust-build-and-tests
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}-dcipher
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always


jobs:
  rust-tests:
    name: Test rust crates
    runs-on: ["randamu-self-hosted-default"]
    steps:
      # Pull cargo nextest binaries
      - uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Run all tests
        run: cargo nextest run --target-dir './target' --no-tests warn --profile ci
        shell: bash
        env:
          TESTNETS_PRIVATE_KEY: ${{ secrets.TESTNETS_PRIVATE_KEY }}
          POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
          BASE_SEPOLIA_RPC_URL: ${{ secrets.BASE_SEPOLIA_RPC_URL }}
          AVALANCHE_FUJI_RPC_URL: ${{ secrets.AVALANCHE_FUJI_RPC_URL }}

  rust-clippy:
    name: Run clippy
    runs-on: ["randamu-self-hosted-default"]
    env:
      RUSTFLAGS: -Dwarnings
      RUSTDOCFLAGS: -Dwarnings
    steps:
      # Pull cargo nextest binaries
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Check formatting
        run: cargo fmt --check
        shell: bash

      - name: clippy check (all features)
        run: cargo clippy --workspace --all-features --all-targets --lib --bins --tests --benches --examples

      - name: clippy check (no features)
        run: cargo clippy --workspace --no-default-features --all-targets --lib --bins --tests --benches --examples

      - name: clippy check (default features)
        run: cargo clippy --workspace --all-targets --lib --bins --tests --benches --examples

      - name: clippy for each only on main
        if: github.ref == 'refs/heads/main'
        run: cargo hack clippy --workspace --exclude generated --each-feature --all-targets --target-dir './target'
        shell: bash